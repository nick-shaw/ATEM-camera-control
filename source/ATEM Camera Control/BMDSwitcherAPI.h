/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#ifndef BMD_BMDSWITCHERAPI_H
#define BMD_BMDSWITCHERAPI_H


#ifndef BMD_CONST
    #if defined(_MSC_VER)
        #define BMD_CONST __declspec(selectany) static const
    #else
        #define BMD_CONST static const
    #endif
#endif

#ifndef BMD_PUBLIC
	#define BMD_PUBLIC
#endif

#include <CoreFoundation/CoreFoundation.h>
#include <CoreFoundation/CFPlugInCOM.h>
#include <stdint.h>

// Type Declarations

typedef int64_t BMDSwitcherInputId;
typedef struct { uint8_t data[16]; } BMDSwitcherHash;
typedef int64_t BMDSwitcherAudioInputId;
typedef int64_t BMDSwitcherFairlightAudioSourceId;
typedef uint32_t BMDSwitcherRecordDiskId;
typedef int64_t BMDSwitcherHyperDeckClipId;
typedef int64_t BMDSwitcherHyperDeckId;

// Interface ID Declarations

BMD_CONST REFIID IID_IBMDSwitcherAudioMonitorOutputCallback       = /* CB5EFB16-0474-4FAA-B071-17FA0DADD19F */ { 0xCB,0x5E,0xFB,0x16,0x04,0x74,0x4F,0xAA,0xB0,0x71,0x17,0xFA,0x0D,0xAD,0xD1,0x9F };
BMD_CONST REFIID IID_IBMDSwitcherAudioMonitorOutput               = /* 21E041C3-6C69-4A95-A6CC-AE7A57257407 */ { 0x21,0xE0,0x41,0xC3,0x6C,0x69,0x4A,0x95,0xA6,0xCC,0xAE,0x7A,0x57,0x25,0x74,0x07 };
BMD_CONST REFIID IID_IBMDSwitcherAudioInputCallback               = /* 26E05D77-EFB9-4253-86D8-2F1E82E462F6 */ { 0x26,0xE0,0x5D,0x77,0xEF,0xB9,0x42,0x53,0x86,0xD8,0x2F,0x1E,0x82,0xE4,0x62,0xF6 };
BMD_CONST REFIID IID_IBMDSwitcherAudioInput                       = /* 321EA41E-544B-491B-B9AA-F6FCAECEF74F */ { 0x32,0x1E,0xA4,0x1E,0x54,0x4B,0x49,0x1B,0xB9,0xAA,0xF6,0xFC,0xAE,0xCE,0xF7,0x4F };
BMD_CONST REFIID IID_IBMDSwitcherAudioMixerCallback               = /* A203DA24-9910-450C-AA6A-9AA05C5C856E */ { 0xA2,0x03,0xDA,0x24,0x99,0x10,0x45,0x0C,0xAA,0x6A,0x9A,0xA0,0x5C,0x5C,0x85,0x6E };
BMD_CONST REFIID IID_IBMDSwitcherAudioMixer                       = /* BCED8CA2-E915-4701-87D4-F68045701E09 */ { 0xBC,0xED,0x8C,0xA2,0xE9,0x15,0x47,0x01,0x87,0xD4,0xF6,0x80,0x45,0x70,0x1E,0x09 };
BMD_CONST REFIID IID_IBMDSwitcherTalkbackCallback                 = /* 5F9A1C63-791C-4573-B28B-D9F2C00B8368 */ { 0x5F,0x9A,0x1C,0x63,0x79,0x1C,0x45,0x73,0xB2,0x8B,0xD9,0xF2,0xC0,0x0B,0x83,0x68 };
BMD_CONST REFIID IID_IBMDSwitcherTalkback                         = /* 5FB45599-DD69-49C5-AB0B-D7D593829E63 */ { 0x5F,0xB4,0x55,0x99,0xDD,0x69,0x49,0xC5,0xAB,0x0B,0xD7,0xD5,0x93,0x82,0x9E,0x63 };
BMD_CONST REFIID IID_IBMDSwitcherAudioHeadphoneOutput             = /* A2836B54-B3A0-4C6B-8BC8-16DC81213C60 */ { 0xA2,0x83,0x6B,0x54,0xB3,0xA0,0x4C,0x6B,0x8B,0xC8,0x16,0xDC,0x81,0x21,0x3C,0x60 };
BMD_CONST REFIID IID_IBMDSwitcherAudioHeadphoneOutputCallback     = /* C97CD29E-1871-42EE-9A51-DF34B6A5ACDB */ { 0xC9,0x7C,0xD2,0x9E,0x18,0x71,0x42,0xEE,0x9A,0x51,0xDF,0x34,0xB6,0xA5,0xAC,0xDB };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioLimiterCallback    = /* 57F7BAD2-4245-43C8-B772-06FE98841AD8 */ { 0x57,0xF7,0xBA,0xD2,0x42,0x45,0x43,0xC8,0xB7,0x72,0x06,0xFE,0x98,0x84,0x1A,0xD8 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioLimiter            = /* 88278FFF-4DB1-40A3-B4EF-01F329281411 */ { 0x88,0x27,0x8F,0xFF,0x4D,0xB1,0x40,0xA3,0xB4,0xEF,0x01,0xF3,0x29,0x28,0x14,0x11 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioCompressorCallback = /* EF39CA99-2E98-4C77-9D75-39E05D12E98A */ { 0xEF,0x39,0xCA,0x99,0x2E,0x98,0x4C,0x77,0x9D,0x75,0x39,0xE0,0x5D,0x12,0xE9,0x8A };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioCompressor         = /* 8E2A2B9A-B63A-4D9B-A88E-CF71CF64638F */ { 0x8E,0x2A,0x2B,0x9A,0xB6,0x3A,0x4D,0x9B,0xA8,0x8E,0xCF,0x71,0xCF,0x64,0x63,0x8F };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioExpanderCallback   = /* CBE12618-C52F-4403-9372-51C9EBB0A00A */ { 0xCB,0xE1,0x26,0x18,0xC5,0x2F,0x44,0x03,0x93,0x72,0x51,0xC9,0xEB,0xB0,0xA0,0x0A };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioExpander           = /* 23299B11-9A28-42B2-8467-21EF003F035B */ { 0x23,0x29,0x9B,0x11,0x9A,0x28,0x42,0xB2,0x84,0x67,0x21,0xEF,0x00,0x3F,0x03,0x5B };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioDynamicsProcessorCallback = /* B27B3C93-7B9C-4867-B9D5-062D0AF434F1 */ { 0xB2,0x7B,0x3C,0x93,0x7B,0x9C,0x48,0x67,0xB9,0xD5,0x06,0x2D,0x0A,0xF4,0x34,0xF1 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioDynamicsProcessor  = /* 8AB79F5B-79E6-46DC-BD05-12A1EF41E877 */ { 0x8A,0xB7,0x9F,0x5B,0x79,0xE6,0x46,0xDC,0xBD,0x05,0x12,0xA1,0xEF,0x41,0xE8,0x77 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioEqualizerBandCallback = /* F1889F6C-9BAD-41A0-BC89-25158BA43B8A */ { 0xF1,0x88,0x9F,0x6C,0x9B,0xAD,0x41,0xA0,0xBC,0x89,0x25,0x15,0x8B,0xA4,0x3B,0x8A };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioEqualizerBand      = /* 2E3EA367-C6F3-4396-A037-B28CED60D644 */ { 0x2E,0x3E,0xA3,0x67,0xC6,0xF3,0x43,0x96,0xA0,0x37,0xB2,0x8C,0xED,0x60,0xD6,0x44 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioEqualizerBandIterator = /* 6A5FA2E1-49A3-4BC8-80D5-C8B668293854 */ { 0x6A,0x5F,0xA2,0xE1,0x49,0xA3,0x4B,0xC8,0x80,0xD5,0xC8,0xB6,0x68,0x29,0x38,0x54 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioEqualizerCallback  = /* 75057AA9-15A1-4CA9-A143-3661764C887F */ { 0x75,0x05,0x7A,0xA9,0x15,0xA1,0x4C,0xA9,0xA1,0x43,0x36,0x61,0x76,0x4C,0x88,0x7F };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioEqualizer          = /* 89E3453D-FA23-40C5-BB16-A19FEEBCF0DE */ { 0x89,0xE3,0x45,0x3D,0xFA,0x23,0x40,0xC5,0xBB,0x16,0xA1,0x9F,0xEE,0xBC,0xF0,0xDE };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioSourceCallback     = /* E9331BC4-6E0F-44DD-8F90-5FC159EFF8E5 */ { 0xE9,0x33,0x1B,0xC4,0x6E,0x0F,0x44,0xDD,0x8F,0x90,0x5F,0xC1,0x59,0xEF,0xF8,0xE5 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioSource             = /* D8D1D78D-0B9F-4300-9734-AE8DA35A8ECA */ { 0xD8,0xD1,0xD7,0x8D,0x0B,0x9F,0x43,0x00,0x97,0x34,0xAE,0x8D,0xA3,0x5A,0x8E,0xCA };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioSourceIterator     = /* 050233A3-3244-46B0-A7CD-EF37A869ACDD */ { 0x05,0x02,0x33,0xA3,0x32,0x44,0x46,0xB0,0xA7,0xCD,0xEF,0x37,0xA8,0x69,0xAC,0xDD };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAnalogAudioInputCallback = /* A9B917B9-46C7-474D-BD86-75CC34D71AF8 */ { 0xA9,0xB9,0x17,0xB9,0x46,0xC7,0x47,0x4D,0xBD,0x86,0x75,0xCC,0x34,0xD7,0x1A,0xF8 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAnalogAudioInput        = /* C3F347F3-49BB-4832-835C-E329FBF5707E */ { 0xC3,0xF3,0x47,0xF3,0x49,0xBB,0x48,0x32,0x83,0x5C,0xE3,0x29,0xFB,0xF5,0x70,0x7E };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioInputCallback      = /* 25F66467-A6BB-4813-B214-158D0FF8653C */ { 0x25,0xF6,0x64,0x67,0xA6,0xBB,0x48,0x13,0xB2,0x14,0x15,0x8D,0x0F,0xF8,0x65,0x3C };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioInput              = /* 96748040-89C2-44F3-BCC0-124BDB9E378F */ { 0x96,0x74,0x80,0x40,0x89,0xC2,0x44,0xF3,0xBC,0xC0,0x12,0x4B,0xDB,0x9E,0x37,0x8F };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioInputIterator      = /* 019DABB8-EF1A-4BB6-9460-6972C5AD2B07 */ { 0x01,0x9D,0xAB,0xB8,0xEF,0x1A,0x4B,0xB6,0x94,0x60,0x69,0x72,0xC5,0xAD,0x2B,0x07 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioHeadphoneOutputCallback = /* 13492CC6-F496-4CDE-8355-3645DE38A6F1 */ { 0x13,0x49,0x2C,0xC6,0xF4,0x96,0x4C,0xDE,0x83,0x55,0x36,0x45,0xDE,0x38,0xA6,0xF1 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioHeadphoneOutput    = /* A9E5FB7D-A436-4179-9F3F-FF2BD5580830 */ { 0xA9,0xE5,0xFB,0x7D,0xA4,0x36,0x41,0x79,0x9F,0x3F,0xFF,0x2B,0xD5,0x58,0x08,0x30 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioHeadphoneOutputIterator = /* 63EED6B1-D574-4312-90B4-F6DEBC290701 */ { 0x63,0xEE,0xD6,0xB1,0xD5,0x74,0x43,0x12,0x90,0xB4,0xF6,0xDE,0xBC,0x29,0x07,0x01 };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioMixerCallback      = /* 071AFA58-5005-4BC9-A240-50656BFB2DFE */ { 0x07,0x1A,0xFA,0x58,0x50,0x05,0x4B,0xC9,0xA2,0x40,0x50,0x65,0x6B,0xFB,0x2D,0xFE };
BMD_CONST REFIID IID_IBMDSwitcherFairlightAudioMixer              = /* BC625428-D969-4512-9462-8AF8B65F0B21 */ { 0xBC,0x62,0x54,0x28,0xD9,0x69,0x45,0x12,0x94,0x62,0x8A,0xF8,0xB6,0x5F,0x0B,0x21 };
BMD_CONST REFIID IID_IBMDSwitcherKeyLumaParametersCallback        = /* AB31E347-5177-4595-8E52-650BF9B08B7F */ { 0xAB,0x31,0xE3,0x47,0x51,0x77,0x45,0x95,0x8E,0x52,0x65,0x0B,0xF9,0xB0,0x8B,0x7F };
BMD_CONST REFIID IID_IBMDSwitcherKeyLumaParameters                = /* EE88B575-6044-4372-B1D6-9733AF342DCA */ { 0xEE,0x88,0xB5,0x75,0x60,0x44,0x43,0x72,0xB1,0xD6,0x97,0x33,0xAF,0x34,0x2D,0xCA };
BMD_CONST REFIID IID_IBMDSwitcherKeyChromaParametersCallback      = /* FE3F97EC-5F2D-4E47-AA7A-38962F9CB3CE */ { 0xFE,0x3F,0x97,0xEC,0x5F,0x2D,0x4E,0x47,0xAA,0x7A,0x38,0x96,0x2F,0x9C,0xB3,0xCE };
BMD_CONST REFIID IID_IBMDSwitcherKeyChromaParameters              = /* 07658026-6AE3-4694-B814-2AB7EBBE7D1C */ { 0x07,0x65,0x80,0x26,0x6A,0xE3,0x46,0x94,0xB8,0x14,0x2A,0xB7,0xEB,0xBE,0x7D,0x1C };
BMD_CONST REFIID IID_IBMDSwitcherKeyAdvancedChromaParametersCallback = /* 98AF2E4A-DCC5-4EEB-896F-CE2B78F213A4 */ { 0x98,0xAF,0x2E,0x4A,0xDC,0xC5,0x4E,0xEB,0x89,0x6F,0xCE,0x2B,0x78,0xF2,0x13,0xA4 };
BMD_CONST REFIID IID_IBMDSwitcherKeyAdvancedChromaParameters      = /* 16CBDB44-C183-4110-AD6B-41C3398447E7 */ { 0x16,0xCB,0xDB,0x44,0xC1,0x83,0x41,0x10,0xAD,0x6B,0x41,0xC3,0x39,0x84,0x47,0xE7 };
BMD_CONST REFIID IID_IBMDSwitcherKeyPatternParametersCallback     = /* FBF24499-06EB-4C54-BE92-21C403C1093C */ { 0xFB,0xF2,0x44,0x99,0x06,0xEB,0x4C,0x54,0xBE,0x92,0x21,0xC4,0x03,0xC1,0x09,0x3C };
BMD_CONST REFIID IID_IBMDSwitcherKeyPatternParameters             = /* 267EDB96-5921-4BA5-88BA-C83123E153D2 */ { 0x26,0x7E,0xDB,0x96,0x59,0x21,0x4B,0xA5,0x88,0xBA,0xC8,0x31,0x23,0xE1,0x53,0xD2 };
BMD_CONST REFIID IID_IBMDSwitcherKeyFlyKeyFrameParametersCallback = /* 136BDD85-690B-4691-BA1D-AB8A61F97AE0 */ { 0x13,0x6B,0xDD,0x85,0x69,0x0B,0x46,0x91,0xBA,0x1D,0xAB,0x8A,0x61,0xF9,0x7A,0xE0 };
BMD_CONST REFIID IID_IBMDSwitcherKeyFlyKeyFrameParameters         = /* 57F0D002-53BB-4787-83F9-1851A257B116 */ { 0x57,0xF0,0xD0,0x02,0x53,0xBB,0x47,0x87,0x83,0xF9,0x18,0x51,0xA2,0x57,0xB1,0x16 };
BMD_CONST REFIID IID_IBMDSwitcherKeyFlyParametersCallback         = /* A9D6543D-0447-4048-B5AD-806622B9BF1A */ { 0xA9,0xD6,0x54,0x3D,0x04,0x47,0x40,0x48,0xB5,0xAD,0x80,0x66,0x22,0xB9,0xBF,0x1A };
BMD_CONST REFIID IID_IBMDSwitcherKeyFlyParameters                 = /* 36CD0B7F-E52E-4D94-ADF5-EEDCA6BCDF82 */ { 0x36,0xCD,0x0B,0x7F,0xE5,0x2E,0x4D,0x94,0xAD,0xF5,0xEE,0xDC,0xA6,0xBC,0xDF,0x82 };
BMD_CONST REFIID IID_IBMDSwitcherKeyDVEParametersCallback         = /* E437655F-32BB-4652-BA77-4083B435566A */ { 0xE4,0x37,0x65,0x5F,0x32,0xBB,0x46,0x52,0xBA,0x77,0x40,0x83,0xB4,0x35,0x56,0x6A };
BMD_CONST REFIID IID_IBMDSwitcherKeyDVEParameters                 = /* 92AA5433-70FB-423D-9435-646D171C9D82 */ { 0x92,0xAA,0x54,0x33,0x70,0xFB,0x42,0x3D,0x94,0x35,0x64,0x6D,0x17,0x1C,0x9D,0x82 };
BMD_CONST REFIID IID_IBMDSwitcherKeyCallback                      = /* 1972E4DF-1D5F-4C4E-A79B-E5A6E8CE1511 */ { 0x19,0x72,0xE4,0xDF,0x1D,0x5F,0x4C,0x4E,0xA7,0x9B,0xE5,0xA6,0xE8,0xCE,0x15,0x11 };
BMD_CONST REFIID IID_IBMDSwitcherKey                              = /* 4D5D7497-26E1-4AEF-9276-14532BD611FD */ { 0x4D,0x5D,0x74,0x97,0x26,0xE1,0x4A,0xEF,0x92,0x76,0x14,0x53,0x2B,0xD6,0x11,0xFD };
BMD_CONST REFIID IID_IBMDSwitcherMediaPlayerCallback              = /* 3A82C121-18FA-469E-AE9A-73255356CA5B */ { 0x3A,0x82,0xC1,0x21,0x18,0xFA,0x46,0x9E,0xAE,0x9A,0x73,0x25,0x53,0x56,0xCA,0x5B };
BMD_CONST REFIID IID_IBMDSwitcherMediaPlayer                      = /* B5240E1F-CE0A-4C38-9FAB-D7FAC227205A */ { 0xB5,0x24,0x0E,0x1F,0xCE,0x0A,0x4C,0x38,0x9F,0xAB,0xD7,0xFA,0xC2,0x27,0x20,0x5A };
BMD_CONST REFIID IID_IBMDSwitcherTransitionMixParametersCallback  = /* FE9730BB-F60B-46DF-B182-2992FFC884DE */ { 0xFE,0x97,0x30,0xBB,0xF6,0x0B,0x46,0xDF,0xB1,0x82,0x29,0x92,0xFF,0xC8,0x84,0xDE };
BMD_CONST REFIID IID_IBMDSwitcherTransitionMixParameters          = /* 4C5D18C9-0955-4525-9947-527EA0679140 */ { 0x4C,0x5D,0x18,0xC9,0x09,0x55,0x45,0x25,0x99,0x47,0x52,0x7E,0xA0,0x67,0x91,0x40 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionDipParametersCallback  = /* 410BE711-DB1A-48D1-93E7-382A0B1781B5 */ { 0x41,0x0B,0xE7,0x11,0xDB,0x1A,0x48,0xD1,0x93,0xE7,0x38,0x2A,0x0B,0x17,0x81,0xB5 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionDipParameters          = /* DACC2FF3-6B54-4459-AAA6-2B1EA2D6887A */ { 0xDA,0xCC,0x2F,0xF3,0x6B,0x54,0x44,0x59,0xAA,0xA6,0x2B,0x1E,0xA2,0xD6,0x88,0x7A };
BMD_CONST REFIID IID_IBMDSwitcherTransitionWipeParametersCallback = /* 0FC4E095-DF7A-4128-933A-AAE4B7FD6119 */ { 0x0F,0xC4,0xE0,0x95,0xDF,0x7A,0x41,0x28,0x93,0x3A,0xAA,0xE4,0xB7,0xFD,0x61,0x19 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionWipeParameters         = /* FAC84D37-11A2-4152-8E5E-D9EB0DC48619 */ { 0xFA,0xC8,0x4D,0x37,0x11,0xA2,0x41,0x52,0x8E,0x5E,0xD9,0xEB,0x0D,0xC4,0x86,0x19 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionDVEParametersCallback  = /* 6535115F-B64C-4512-BF5A-12969253E2F9 */ { 0x65,0x35,0x11,0x5F,0xB6,0x4C,0x45,0x12,0xBF,0x5A,0x12,0x96,0x92,0x53,0xE2,0xF9 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionDVEParameters          = /* BAE4F4CE-3731-4D1F-846B-F2D81C06C3F4 */ { 0xBA,0xE4,0xF4,0xCE,0x37,0x31,0x4D,0x1F,0x84,0x6B,0xF2,0xD8,0x1C,0x06,0xC3,0xF4 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionStingerParametersCallback = /* 9A8B3FB6-DD56-4DFF-AEB3-2C8A26585389 */ { 0x9A,0x8B,0x3F,0xB6,0xDD,0x56,0x4D,0xFF,0xAE,0xB3,0x2C,0x8A,0x26,0x58,0x53,0x89 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionStingerParameters      = /* 0F449A50-4083-49E8-BBF5-C3D95BFA1908 */ { 0x0F,0x44,0x9A,0x50,0x40,0x83,0x49,0xE8,0xBB,0xF5,0xC3,0xD9,0x5B,0xFA,0x19,0x08 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionParametersCallback     = /* DED1876A-38E3-418E-8044-F3C126C626E7 */ { 0xDE,0xD1,0x87,0x6A,0x38,0xE3,0x41,0x8E,0x80,0x44,0xF3,0xC1,0x26,0xC6,0x26,0xE7 };
BMD_CONST REFIID IID_IBMDSwitcherTransitionParameters             = /* 83755CE5-748B-4E49-A856-AC95B8CCD215 */ { 0x83,0x75,0x5C,0xE5,0x74,0x8B,0x4E,0x49,0xA8,0x56,0xAC,0x95,0xB8,0xCC,0xD2,0x15 };
BMD_CONST REFIID IID_IBMDSwitcherMixEffectBlockCallback           = /* 5BC629A0-4271-4597-9E87-9B563F519238 */ { 0x5B,0xC6,0x29,0xA0,0x42,0x71,0x45,0x97,0x9E,0x87,0x9B,0x56,0x3F,0x51,0x92,0x38 };
BMD_CONST REFIID IID_IBMDSwitcherMixEffectBlock                   = /* 6604B7AD-A814-46B2-8C69-C1C38815419A */ { 0x66,0x04,0xB7,0xAD,0xA8,0x14,0x46,0xB2,0x8C,0x69,0xC1,0xC3,0x88,0x15,0x41,0x9A };
BMD_CONST REFIID IID_IBMDSwitcherInputCallback                    = /* 93054328-C4C8-402D-8899-8E1ED28FAC22 */ { 0x93,0x05,0x43,0x28,0xC4,0xC8,0x40,0x2D,0x88,0x99,0x8E,0x1E,0xD2,0x8F,0xAC,0x22 };
BMD_CONST REFIID IID_IBMDSwitcherInput                            = /* 0B182DF9-3732-4B1C-921B-C3B914AD441F */ { 0x0B,0x18,0x2D,0xF9,0x37,0x32,0x4B,0x1C,0x92,0x1B,0xC3,0xB9,0x14,0xAD,0x44,0x1F };
BMD_CONST REFIID IID_IBMDSwitcherInputColorCallback               = /* BAE02C95-9394-439C-BE18-CEF0C0784EC3 */ { 0xBA,0xE0,0x2C,0x95,0x93,0x94,0x43,0x9C,0xBE,0x18,0xCE,0xF0,0xC0,0x78,0x4E,0xC3 };
BMD_CONST REFIID IID_IBMDSwitcherInputColor                       = /* A0AF18D9-CBE6-49F3-B548-A44E856054D1 */ { 0xA0,0xAF,0x18,0xD9,0xCB,0xE6,0x49,0xF3,0xB5,0x48,0xA4,0x4E,0x85,0x60,0x54,0xD1 };
BMD_CONST REFIID IID_IBMDSwitcherInputAuxCallback                 = /* 5AD1FF91-143F-49E9-9964-1B9FAF9A712A */ { 0x5A,0xD1,0xFF,0x91,0x14,0x3F,0x49,0xE9,0x99,0x64,0x1B,0x9F,0xAF,0x9A,0x71,0x2A };
BMD_CONST REFIID IID_IBMDSwitcherInputAux                         = /* 52C745A8-89B1-449A-A149-C43F5108DAE7 */ { 0x52,0xC7,0x45,0xA8,0x89,0xB1,0x44,0x9A,0xA1,0x49,0xC4,0x3F,0x51,0x08,0xDA,0xE7 };
BMD_CONST REFIID IID_IBMDSwitcherSuperSourceBoxCallback           = /* 7F667AF6-9B4E-4CDE-9F2F-2DF4505BF877 */ { 0x7F,0x66,0x7A,0xF6,0x9B,0x4E,0x4C,0xDE,0x9F,0x2F,0x2D,0xF4,0x50,0x5B,0xF8,0x77 };
BMD_CONST REFIID IID_IBMDSwitcherSuperSourceBox                   = /* 137028E5-87B2-407E-846F-283B18C82CE9 */ { 0x13,0x70,0x28,0xE5,0x87,0xB2,0x40,0x7E,0x84,0x6F,0x28,0x3B,0x18,0xC8,0x2C,0xE9 };
BMD_CONST REFIID IID_IBMDSwitcherSuperSourceBorderCallback        = /* E6AC8639-5ACF-4E5B-B178-2BEF3EA490E7 */ { 0xE6,0xAC,0x86,0x39,0x5A,0xCF,0x4E,0x5B,0xB1,0x78,0x2B,0xEF,0x3E,0xA4,0x90,0xE7 };
BMD_CONST REFIID IID_IBMDSwitcherSuperSourceBorder                = /* 4D082919-651E-40C7-BBA4-41D6107B7E97 */ { 0x4D,0x08,0x29,0x19,0x65,0x1E,0x40,0xC7,0xBB,0xA4,0x41,0xD6,0x10,0x7B,0x7E,0x97 };
BMD_CONST REFIID IID_IBMDSwitcherInputSuperSourceCallback         = /* 161446A5-6F0C-4B45-A59B-AEF6CD0C4950 */ { 0x16,0x14,0x46,0xA5,0x6F,0x0C,0x4B,0x45,0xA5,0x9B,0xAE,0xF6,0xCD,0x0C,0x49,0x50 };
BMD_CONST REFIID IID_IBMDSwitcherInputSuperSource                 = /* B97A1B97-69D0-457B-9580-92CCFE89FA4F */ { 0xB9,0x7A,0x1B,0x97,0x69,0xD0,0x45,0x7B,0x95,0x80,0x92,0xCC,0xFE,0x89,0xFA,0x4F };
BMD_CONST REFIID IID_IBMDSwitcherMultiViewCallback                = /* 345CE414-0BF1-46F9-97AC-FB1A47499005 */ { 0x34,0x5C,0xE4,0x14,0x0B,0xF1,0x46,0xF9,0x97,0xAC,0xFB,0x1A,0x47,0x49,0x90,0x05 };
BMD_CONST REFIID IID_IBMDSwitcherMultiView                        = /* 38EC859F-5EC6-4EDE-BDF5-1AAC9E63B1EB */ { 0x38,0xEC,0x85,0x9F,0x5E,0xC6,0x4E,0xDE,0xBD,0xF5,0x1A,0xAC,0x9E,0x63,0xB1,0xEB };
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKeyCallback            = /* 0C7D4DE3-E7D1-4062-86B4-9F82F7BB346D */ { 0x0C,0x7D,0x4D,0xE3,0xE7,0xD1,0x40,0x62,0x86,0xB4,0x9F,0x82,0xF7,0xBB,0x34,0x6D };
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKey                    = /* F54F9E1D-5EEE-40D2-A77A-85197A7D344E */ { 0xF5,0x4F,0x9E,0x1D,0x5E,0xEE,0x40,0xD2,0xA7,0x7A,0x85,0x19,0x7A,0x7D,0x34,0x4E };
BMD_CONST REFIID IID_IBMDSwitcherInputIterator                    = /* 275E9888-2F65-4B2E-9434-1937A72B9EC4 */ { 0x27,0x5E,0x98,0x88,0x2F,0x65,0x4B,0x2E,0x94,0x34,0x19,0x37,0xA7,0x2B,0x9E,0xC4 };
BMD_CONST REFIID IID_IBMDSwitcherSuperSourceBoxIterator           = /* 96153CDA-C894-42EA-BA90-C387018CC334 */ { 0x96,0x15,0x3C,0xDA,0xC8,0x94,0x42,0xEA,0xBA,0x90,0xC3,0x87,0x01,0x8C,0xC3,0x34 };
BMD_CONST REFIID IID_IBMDSwitcherMixEffectBlockIterator           = /* EA8D1E06-4A59-47EF-AF68-C7F074A35FE9 */ { 0xEA,0x8D,0x1E,0x06,0x4A,0x59,0x47,0xEF,0xAF,0x68,0xC7,0xF0,0x74,0xA3,0x5F,0xE9 };
BMD_CONST REFIID IID_IBMDSwitcherDownstreamKeyIterator            = /* AF65039F-C4D0-4C85-8CB0-AE060EDDC0B9 */ { 0xAF,0x65,0x03,0x9F,0xC4,0xD0,0x4C,0x85,0x8C,0xB0,0xAE,0x06,0x0E,0xDD,0xC0,0xB9 };
BMD_CONST REFIID IID_IBMDSwitcherKeyIterator                      = /* 63032A58-35FC-4AE3-86E3-49DFF879EA4A */ { 0x63,0x03,0x2A,0x58,0x35,0xFC,0x4A,0xE3,0x86,0xE3,0x49,0xDF,0xF8,0x79,0xEA,0x4A };
BMD_CONST REFIID IID_IBMDSwitcherMediaPlayerIterator              = /* E910816F-59CB-4224-A77F-06DE3D232275 */ { 0xE9,0x10,0x81,0x6F,0x59,0xCB,0x42,0x24,0xA7,0x7F,0x06,0xDE,0x3D,0x23,0x22,0x75 };
BMD_CONST REFIID IID_IBMDSwitcherMultiViewIterator                = /* B731477F-A85D-4003-9A89-9606309F3D34 */ { 0xB7,0x31,0x47,0x7F,0xA8,0x5D,0x40,0x03,0x9A,0x89,0x96,0x06,0x30,0x9F,0x3D,0x34 };
BMD_CONST REFIID IID_IBMDSwitcherAudioMonitorOutputIterator       = /* C76BAC6A-DFEE-4F2F-B161-226B481D556A */ { 0xC7,0x6B,0xAC,0x6A,0xDF,0xEE,0x4F,0x2F,0xB1,0x61,0x22,0x6B,0x48,0x1D,0x55,0x6A };
BMD_CONST REFIID IID_IBMDSwitcherAudioHeadphoneOutputIterator     = /* 151CFF07-EF32-441F-8FF8-C2163A751EA2 */ { 0x15,0x1C,0xFF,0x07,0xEF,0x32,0x44,0x1F,0x8F,0xF8,0xC2,0x16,0x3A,0x75,0x1E,0xA2 };
BMD_CONST REFIID IID_IBMDSwitcherAudioInputIterator               = /* 97959903-651E-4F68-BA42-1FA61508F189 */ { 0x97,0x95,0x99,0x03,0x65,0x1E,0x4F,0x68,0xBA,0x42,0x1F,0xA6,0x15,0x08,0xF1,0x89 };
BMD_CONST REFIID IID_IBMDSwitcherSerialPortIterator               = /* E3F0E3CE-5A1A-4D60-94A4-D3DBB2514763 */ { 0xE3,0xF0,0xE3,0xCE,0x5A,0x1A,0x4D,0x60,0x94,0xA4,0xD3,0xDB,0xB2,0x51,0x47,0x63 };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeckIterator                = /* 35879F23-168D-4AF2-80B0-6D72838E17F9 */ { 0x35,0x87,0x9F,0x23,0x16,0x8D,0x4A,0xF2,0x80,0xB0,0x6D,0x72,0x83,0x8E,0x17,0xF9 };
BMD_CONST REFIID IID_IBMDSwitcherMixMinusOutputIterator           = /* 7EE8380F-2A09-4085-86BC-DFB8ACACE0FB */ { 0x7E,0xE8,0x38,0x0F,0x2A,0x09,0x40,0x85,0x86,0xBC,0xDF,0xB8,0xAC,0xAC,0xE0,0xFB };
BMD_CONST REFIID IID_IBMDSwitcherTalkbackIterator                 = /* 17AC2EFF-C51A-41AB-A4CB-3C3AF2157FFE */ { 0x17,0xAC,0x2E,0xFF,0xC5,0x1A,0x41,0xAB,0xA4,0xCB,0x3C,0x3A,0xF2,0x15,0x7F,0xFE };
BMD_CONST REFIID IID_IBMDSwitcherCallback                         = /* EE50FC2C-D0D7-42D6-965A-57498CECC1F6 */ { 0xEE,0x50,0xFC,0x2C,0xD0,0xD7,0x42,0xD6,0x96,0x5A,0x57,0x49,0x8C,0xEC,0xC1,0xF6 };
BMD_CONST REFIID IID_IBMDSwitcher                                 = /* 00E7C247-9504-452B-AC97-F56EC3A180DE */ { 0x00,0xE7,0xC2,0x47,0x95,0x04,0x45,0x2B,0xAC,0x97,0xF5,0x6E,0xC3,0xA1,0x80,0xDE };
BMD_CONST REFIID IID_IBMDSwitcherDiscovery                        = /* 1BE1FC40-E404-48C5-BAB6-535D27D8AF88 */ { 0x1B,0xE1,0xFC,0x40,0xE4,0x04,0x48,0xC5,0xBA,0xB6,0x53,0x5D,0x27,0xD8,0xAF,0x88 };
BMD_CONST REFIID IID_IBMDSwitcherFrame                            = /* 35A1F6A6-D317-4F89-A565-0F0BD414CF77 */ { 0x35,0xA1,0xF6,0xA6,0xD3,0x17,0x4F,0x89,0xA5,0x65,0x0F,0x0B,0xD4,0x14,0xCF,0x77 };
BMD_CONST REFIID IID_IBMDSwitcherAudio                            = /* E89BD25E-FD04-4FBE-A124-CCAF5ADBE5B2 */ { 0xE8,0x9B,0xD2,0x5E,0xFD,0x04,0x4F,0xBE,0xA1,0x24,0xCC,0xAF,0x5A,0xDB,0xE5,0xB2 };
BMD_CONST REFIID IID_IBMDSwitcherLockCallback                     = /* 56663D7A-85A8-4DA0-9B13-2A52D3C7740C */ { 0x56,0x66,0x3D,0x7A,0x85,0xA8,0x4D,0xA0,0x9B,0x13,0x2A,0x52,0xD3,0xC7,0x74,0x0C };
BMD_CONST REFIID IID_IBMDSwitcherStillsCallback                   = /* 7AF82DC6-9A43-4CD2-9712-585E6BA159BA */ { 0x7A,0xF8,0x2D,0xC6,0x9A,0x43,0x4C,0xD2,0x97,0x12,0x58,0x5E,0x6B,0xA1,0x59,0xBA };
BMD_CONST REFIID IID_IBMDSwitcherStills                           = /* 235C654C-7389-4D3E-AB46-D0078D065940 */ { 0x23,0x5C,0x65,0x4C,0x73,0x89,0x4D,0x3E,0xAB,0x46,0xD0,0x07,0x8D,0x06,0x59,0x40 };
BMD_CONST REFIID IID_IBMDSwitcherClipCallback                     = /* 407117B4-B6A8-46D2-9911-43254171B1B7 */ { 0x40,0x71,0x17,0xB4,0xB6,0xA8,0x46,0xD2,0x99,0x11,0x43,0x25,0x41,0x71,0xB1,0xB7 };
BMD_CONST REFIID IID_IBMDSwitcherClip                             = /* 94AAF18A-7AF4-4721-8C1E-1843D42644E7 */ { 0x94,0xAA,0xF1,0x8A,0x7A,0xF4,0x47,0x21,0x8C,0x1E,0x18,0x43,0xD4,0x26,0x44,0xE7 };
BMD_CONST REFIID IID_IBMDSwitcherMediaPoolCallback                = /* B8617A16-1B17-4FD6-93BF-664FA71F2A50 */ { 0xB8,0x61,0x7A,0x16,0x1B,0x17,0x4F,0xD6,0x93,0xBF,0x66,0x4F,0xA7,0x1F,0x2A,0x50 };
BMD_CONST REFIID IID_IBMDSwitcherMediaPool                        = /* 33D14916-8E2C-46CC-A63B-2C9213A572C1 */ { 0x33,0xD1,0x49,0x16,0x8E,0x2C,0x46,0xCC,0xA6,0x3B,0x2C,0x92,0x13,0xA5,0x72,0xC1 };
BMD_CONST REFIID IID_IBMDSwitcherStillCapture                     = /* CC762E9E-5074-4B64-BC76-848E2C4E7421 */ { 0xCC,0x76,0x2E,0x9E,0x50,0x74,0x4B,0x64,0xBC,0x76,0x84,0x8E,0x2C,0x4E,0x74,0x21 };
BMD_CONST REFIID IID_IBMDSwitcherStillCaptureCallback             = /* 56AB0A02-9706-417C-85F4-584C275F9DEA */ { 0x56,0xAB,0x0A,0x02,0x97,0x06,0x41,0x7C,0x85,0xF4,0x58,0x4C,0x27,0x5F,0x9D,0xEA };
BMD_CONST REFIID IID_IBMDSwitcherSaveRecall                       = /* 7C8B477A-6BE3-4E85-B8EE-BE58BEC28958 */ { 0x7C,0x8B,0x47,0x7A,0x6B,0xE3,0x4E,0x85,0xB8,0xEE,0xBE,0x58,0xBE,0xC2,0x89,0x58 };
BMD_CONST REFIID IID_IBMDSwitcherRecordDiskIterator               = /* 777B5A46-83EF-4615-9722-146C79436927 */ { 0x77,0x7B,0x5A,0x46,0x83,0xEF,0x46,0x15,0x97,0x22,0x14,0x6C,0x79,0x43,0x69,0x27 };
BMD_CONST REFIID IID_IBMDSwitcherRecordDisk                       = /* 2F2046BD-E6FC-4CC0-8689-94454F027997 */ { 0x2F,0x20,0x46,0xBD,0xE6,0xFC,0x4C,0xC0,0x86,0x89,0x94,0x45,0x4F,0x02,0x79,0x97 };
BMD_CONST REFIID IID_IBMDSwitcherRecordDiskCallback               = /* B83041FC-3091-472B-B6A3-9D753692BF29 */ { 0xB8,0x30,0x41,0xFC,0x30,0x91,0x47,0x2B,0xB6,0xA3,0x9D,0x75,0x36,0x92,0xBF,0x29 };
BMD_CONST REFIID IID_IBMDSwitcherRecordAV                         = /* 43C5A333-3DF4-4DF2-8F81-0A994CE63315 */ { 0x43,0xC5,0xA3,0x33,0x3D,0xF4,0x4D,0xF2,0x8F,0x81,0x0A,0x99,0x4C,0xE6,0x33,0x15 };
BMD_CONST REFIID IID_IBMDSwitcherRecordAVCallback                 = /* 0DD309AE-D406-460D-B4AA-4D9EF2D31DE2 */ { 0x0D,0xD3,0x09,0xAE,0xD4,0x06,0x46,0x0D,0xB4,0xAA,0x4D,0x9E,0xF2,0xD3,0x1D,0xE2 };
BMD_CONST REFIID IID_IBMDSwitcherStreamRTMP                       = /* 89A72582-A54B-40B6-9CFB-9B750D6C5DD9 */ { 0x89,0xA7,0x25,0x82,0xA5,0x4B,0x40,0xB6,0x9C,0xFB,0x9B,0x75,0x0D,0x6C,0x5D,0xD9 };
BMD_CONST REFIID IID_IBMDSwitcherStreamRTMPCallback               = /* 0A7F37FF-3195-4EF2-82C9-AA3751906059 */ { 0x0A,0x7F,0x37,0xFF,0x31,0x95,0x4E,0xF2,0x82,0xC9,0xAA,0x37,0x51,0x90,0x60,0x59 };
BMD_CONST REFIID IID_IBMDSwitcherCameraControlParameterIterator   = /* 6B6E289F-0847-480A-A0BD-E8FB78A5505A */ { 0x6B,0x6E,0x28,0x9F,0x08,0x47,0x48,0x0A,0xA0,0xBD,0xE8,0xFB,0x78,0xA5,0x50,0x5A };
BMD_CONST REFIID IID_IBMDSwitcherCameraControlCallback            = /* 90337CAC-9376-4A62-A58F-10936130970B */ { 0x90,0x33,0x7C,0xAC,0x93,0x76,0x4A,0x62,0xA5,0x8F,0x10,0x93,0x61,0x30,0x97,0x0B };
BMD_CONST REFIID IID_IBMDSwitcherCameraControl                    = /* 889111CC-02CA-4268-ADD1-569166F0F0D9 */ { 0x88,0x91,0x11,0xCC,0x02,0xCA,0x42,0x68,0xAD,0xD1,0x56,0x91,0x66,0xF0,0xF0,0xD9 };
BMD_CONST REFIID IID_IBMDSwitcherMacro                            = /* 2F1DF648-CB02-48D5-B5EB-B857BBD626A7 */ { 0x2F,0x1D,0xF6,0x48,0xCB,0x02,0x48,0xD5,0xB5,0xEB,0xB8,0x57,0xBB,0xD6,0x26,0xA7 };
BMD_CONST REFIID IID_IBMDSwitcherTransferMacro                    = /* 9BAD28DB-F0CC-4696-82EE-B1E3E5A7C129 */ { 0x9B,0xAD,0x28,0xDB,0xF0,0xCC,0x46,0x96,0x82,0xEE,0xB1,0xE3,0xE5,0xA7,0xC1,0x29 };
BMD_CONST REFIID IID_IBMDSwitcherMacroPoolCallback                = /* E29294A0-FB4C-418D-9AE1-C6CBA288104F */ { 0xE2,0x92,0x94,0xA0,0xFB,0x4C,0x41,0x8D,0x9A,0xE1,0xC6,0xCB,0xA2,0x88,0x10,0x4F };
BMD_CONST REFIID IID_IBMDSwitcherMacroPool                        = /* 5FA28BFC-7934-42F4-BED8-8744D62D210F */ { 0x5F,0xA2,0x8B,0xFC,0x79,0x34,0x42,0xF4,0xBE,0xD8,0x87,0x44,0xD6,0x2D,0x21,0x0F };
BMD_CONST REFIID IID_IBMDSwitcherMacroControlCallback             = /* F6A62317-60F6-4D5C-A5DD-2DC372B9F4FF */ { 0xF6,0xA6,0x23,0x17,0x60,0xF6,0x4D,0x5C,0xA5,0xDD,0x2D,0xC3,0x72,0xB9,0xF4,0xFF };
BMD_CONST REFIID IID_IBMDSwitcherMacroControl                     = /* 2E23E657-A7F0-4C4A-BCBE-4B8D3DD061AC */ { 0x2E,0x23,0xE6,0x57,0xA7,0xF0,0x4C,0x4A,0xBC,0xBE,0x4B,0x8D,0x3D,0xD0,0x61,0xAC };
BMD_CONST REFIID IID_IBMDSwitcherSerialPortCallback               = /* 9CEBFC3C-77DF-45AC-A1B2-A9A6DF6ACE42 */ { 0x9C,0xEB,0xFC,0x3C,0x77,0xDF,0x45,0xAC,0xA1,0xB2,0xA9,0xA6,0xDF,0x6A,0xCE,0x42 };
BMD_CONST REFIID IID_IBMDSwitcherSerialPort                       = /* 14BEA77D-3F69-4FBF-A331-F5EA9FF6A42E */ { 0x14,0xBE,0xA7,0x7D,0x3F,0x69,0x4F,0xBF,0xA3,0x31,0xF5,0xEA,0x9F,0xF6,0xA4,0x2E };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeckClipCallback            = /* 473830E4-53D9-4924-9DC1-0FC0239EDBE9 */ { 0x47,0x38,0x30,0xE4,0x53,0xD9,0x49,0x24,0x9D,0xC1,0x0F,0xC0,0x23,0x9E,0xDB,0xE9 };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeckClip                    = /* DFBE7482-B24A-4BF1-92AD-7EAF1F5F2AE8 */ { 0xDF,0xBE,0x74,0x82,0xB2,0x4A,0x4B,0xF1,0x92,0xAD,0x7E,0xAF,0x1F,0x5F,0x2A,0xE8 };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeckClipIterator            = /* 162A6BFE-8290-4EAC-95E4-BA109D7BA4EC */ { 0x16,0x2A,0x6B,0xFE,0x82,0x90,0x4E,0xAC,0x95,0xE4,0xBA,0x10,0x9D,0x7B,0xA4,0xEC };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeckCallback                = /* F745EBDF-F868-4787-B2D4-50064A5D6597 */ { 0xF7,0x45,0xEB,0xDF,0xF8,0x68,0x47,0x87,0xB2,0xD4,0x50,0x06,0x4A,0x5D,0x65,0x97 };
BMD_CONST REFIID IID_IBMDSwitcherHyperDeck                        = /* 6BB0F7E1-2013-4C8F-A4C0-1016B0C37D14 */ { 0x6B,0xB0,0xF7,0xE1,0x20,0x13,0x4C,0x8F,0xA4,0xC0,0x10,0x16,0xB0,0xC3,0x7D,0x14 };
BMD_CONST REFIID IID_IBMDSwitcherMixMinusOutput                   = /* B47891B4-0AD6-4BCC-9009-4FCF51A26E4B */ { 0xB4,0x78,0x91,0xB4,0x0A,0xD6,0x4B,0xCC,0x90,0x09,0x4F,0xCF,0x51,0xA2,0x6E,0x4B };
BMD_CONST REFIID IID_IBMDSwitcherMixMinusOutputCallback           = /* D1D2EDF8-D949-49D0-8501-F001D69AB44F */ { 0xD1,0xD2,0xED,0xF8,0xD9,0x49,0x49,0xD0,0x85,0x01,0xF0,0x01,0xD6,0x9A,0xB4,0x4F };
BMD_CONST REFIID IID_IBMDSwitcherAudioInputXLRCallback            = /* 829910AE-E91A-4F0B-9A58-9A5F6EBCD2AC */ { 0x82,0x99,0x10,0xAE,0xE9,0x1A,0x4F,0x0B,0x9A,0x58,0x9A,0x5F,0x6E,0xBC,0xD2,0xAC };
BMD_CONST REFIID IID_IBMDSwitcherAudioInputXLR                    = /* 5189057A-58CD-4251-A646-683874EC58C6 */ { 0x51,0x89,0x05,0x7A,0x58,0xCD,0x42,0x51,0xA6,0x46,0x68,0x38,0x74,0xEC,0x58,0xC6 };

/* Enum BMDSwitcherInputEventType - Used in IBMDSwitcherInputCallback */

typedef uint32_t BMDSwitcherInputEventType;
enum _BMDSwitcherInputEventType {
    bmdSwitcherInputEventTypeShortNameChanged                    = /* 'shnm' */ 0x73686E6D,
    bmdSwitcherInputEventTypeLongNameChanged                     = /* 'lgnm' */ 0x6C676E6D,
    bmdSwitcherInputEventTypeAreNamesDefaultChanged              = /* 'andc' */ 0x616E6463,
    bmdSwitcherInputEventTypeIsProgramTalliedChanged             = /* 'ipgt' */ 0x69706774,
    bmdSwitcherInputEventTypeIsPreviewTalliedChanged             = /* 'iprt' */ 0x69707274,
    bmdSwitcherInputEventTypeAvailableExternalPortTypesChanged   = /* 'aept' */ 0x61657074,
    bmdSwitcherInputEventTypeCurrentExternalPortTypeChanged      = /* 'cept' */ 0x63657074
};

/* Enum BMDSwitcherPortType - IBMDSwitcherInput Port Types */

typedef uint32_t BMDSwitcherPortType;
enum _BMDSwitcherPortType {
    bmdSwitcherPortTypeExternal                                  = /* 'extn' */ 0x6578746E,
    bmdSwitcherPortTypeBlack                                     = /* 'blak' */ 0x626C616B,
    bmdSwitcherPortTypeColorBars                                 = /* 'colb' */ 0x636F6C62,
    bmdSwitcherPortTypeColorGenerator                            = /* 'colg' */ 0x636F6C67,
    bmdSwitcherPortTypeMediaPlayerFill                           = /* 'mpfl' */ 0x6D70666C,
    bmdSwitcherPortTypeMediaPlayerCut                            = /* 'mpct' */ 0x6D706374,
    bmdSwitcherPortTypeSuperSource                               = /* 'ssrc' */ 0x73737263,
    bmdSwitcherPortTypeMixEffectBlockOutput                      = /* 'mebo' */ 0x6D65626F,
    bmdSwitcherPortTypeAuxOutput                                 = /* 'auxo' */ 0x6175786F,
    bmdSwitcherPortTypeKeyCutOutput                              = /* 'kcto' */ 0x6B63746F,
    bmdSwitcherPortTypeMultiview                                 = /* 'mlvw' */ 0x6D6C7677,
    bmdSwitcherPortTypeExternalDirect                            = /* 'edir' */ 0x65646972
};

/* Enum BMDSwitcherExternalPortType - IBMDSwitcherInput External Port Types */

typedef uint32_t BMDSwitcherExternalPortType;
enum _BMDSwitcherExternalPortType {
    bmdSwitcherExternalPortTypeSDI                               = 0x00000001,
    bmdSwitcherExternalPortTypeHDMI                              = 0x00000002,
    bmdSwitcherExternalPortTypeComponent                         = 0x00000004,
    bmdSwitcherExternalPortTypeComposite                         = 0x00000008,
    bmdSwitcherExternalPortTypeSVideo                            = 0x00000010,
    bmdSwitcherExternalPortTypeInternal                          = 0x00000020,
    bmdSwitcherExternalPortTypeXLR                               = 0x00000040,
    bmdSwitcherExternalPortTypeAESEBU                            = 0x00000080,
    bmdSwitcherExternalPortTypeRCA                               = 0x00000100,
    bmdSwitcherExternalPortTypeTSJack                            = 0x00000200,
    bmdSwitcherExternalPortTypeMADI                              = 0x00000400,
    bmdSwitcherExternalPortTypeTRS                               = 0x00000800
};

/* Enum BMDSwitcherInputAvailability - IBMDSwitcherInput availablity bits */

typedef uint32_t BMDSwitcherInputAvailability;
enum _BMDSwitcherInputAvailability {
    bmdSwitcherInputAvailabilityMixEffectBlock0                  = 0x00000001,
    bmdSwitcherInputAvailabilityMixEffectBlock1                  = 0x00000002,
    bmdSwitcherInputAvailabilityMixEffectBlock2                  = 0x00000080,
    bmdSwitcherInputAvailabilityMixEffectBlock3                  = 0x00000100,
    bmdSwitcherInputAvailabilityAuxOutputs                       = 0x00000004,
    bmdSwitcherInputAvailabilityMultiView                        = 0x00000008,
    bmdSwitcherInputAvailabilitySuperSourceArt                   = 0x00000010,
    bmdSwitcherInputAvailabilitySuperSourceBox                   = 0x00000020,
    bmdSwitcherInputAvailabilityInputCut                         = 0x00000040
};

/* Enum BMDSwitcherEventType - IBMDSwitcher event type */

typedef uint32_t BMDSwitcherEventType;
enum _BMDSwitcherEventType {
    bmdSwitcherEventTypeVideoModeChanged                         = /* 'sevd' */ 0x73657664,
    bmdSwitcherEventTypeMethodForDownConvertedSDChanged          = /* 'semd' */ 0x73656D64,
    bmdSwitcherEventTypeDownConvertedHDVideoModeChanged          = /* 'sedV' */ 0x73656456,
    bmdSwitcherEventTypeMultiViewVideoModeChanged                = /* 'semv' */ 0x73656D76,
    bmdSwitcherEventTypePowerStatusChanged                       = /* 'sepw' */ 0x73657077,
    bmdSwitcherEventTypeDisconnected                             = /* 'sedi' */ 0x73656469,
    bmdSwitcherEventType3GSDIOutputLevelChanged                  = /* 'se3g' */ 0x73653367,
    bmdSwitcherEventTypeTimeCodeChanged                          = /* 'setc' */ 0x73657463,
    bmdSwitcherEventTypeTimeCodeLockedChanged                    = /* 'tclc' */ 0x74636C63,
    bmdSwitcherEventTypeTimeCodeModeChanged                      = /* 'tcmc' */ 0x74636D63,
    bmdSwitcherEventTypeSuperSourceCascadeChanged                = /* 'sscc' */ 0x73736363,
    bmdSwitcherEventTypeAutoVideoModeChanged                     = /* 'aivm' */ 0x6169766D,
    bmdSwitcherEventTypeAutoVideoModeDetectedChanged             = /* 'avmd' */ 0x61766D64
};

/* Enum BMDSwitcherInputColorEventType - Used in IBMDSwitcherInputColorCallback */

typedef uint32_t BMDSwitcherInputColorEventType;
enum _BMDSwitcherInputColorEventType {
    bmdSwitcherInputColorEventTypeHueChanged                     = /* 'HueC' */ 0x48756543,
    bmdSwitcherInputColorEventTypeSaturationChanged              = /* 'SatC' */ 0x53617443,
    bmdSwitcherInputColorEventTypeLumaChanged                    = /* 'LumC' */ 0x4C756D43
};

/* Enum BMDSwitcherInputAuxEventType - Used in IBMDSwitcherInputAuxCallback */

typedef uint32_t BMDSwitcherInputAuxEventType;
enum _BMDSwitcherInputAuxEventType {
    bmdSwitcherInputAuxEventTypeInputSourceChanged               = /* 'ipsC' */ 0x69707343
};

/* Enum BMDSwitcherSuperSourceBoxEventType - Used in IBMDSwitcherSuperSourceBoxCallback */

typedef uint32_t BMDSwitcherSuperSourceBoxEventType;
enum _BMDSwitcherSuperSourceBoxEventType {
    bmdSwitcherSuperSourceBoxEventTypeEnabledChanged             = /* 'enbC' */ 0x656E6243,
    bmdSwitcherSuperSourceBoxEventTypeInputSourceChanged         = /* 'ipsC' */ 0x69707343,
    bmdSwitcherSuperSourceBoxEventTypePositionXChanged           = /* 'psxC' */ 0x70737843,
    bmdSwitcherSuperSourceBoxEventTypePositionYChanged           = /* 'psyC' */ 0x70737943,
    bmdSwitcherSuperSourceBoxEventTypeSizeChanged                = /* 'sizC' */ 0x73697A43,
    bmdSwitcherSuperSourceBoxEventTypeCroppedChanged             = /* 'crpC' */ 0x63727043,
    bmdSwitcherSuperSourceBoxEventTypeCropTopChanged             = /* 'cptC' */ 0x63707443,
    bmdSwitcherSuperSourceBoxEventTypeCropBottomChanged          = /* 'cpbC' */ 0x63706243,
    bmdSwitcherSuperSourceBoxEventTypeCropLeftChanged            = /* 'cplC' */ 0x63706C43,
    bmdSwitcherSuperSourceBoxEventTypeCropRightChanged           = /* 'cprC' */ 0x63707243
};

/* Enum BMDSwitcherInputSuperSourceEventType - Used in IBMDSwitcherInputSuperSourceCallback */

typedef uint32_t BMDSwitcherInputSuperSourceEventType;
enum _BMDSwitcherInputSuperSourceEventType {
    bmdSwitcherInputSuperSourceEventTypeInputFillChanged         = /* 'ipfC' */ 0x69706643,
    bmdSwitcherInputSuperSourceEventTypeInputCutChanged          = /* 'ipcC' */ 0x69706343,
    bmdSwitcherInputSuperSourceEventTypeArtOptionChanged         = /* 'atoC' */ 0x61746F43,
    bmdSwitcherInputSuperSourceEventTypePreMultipliedChanged     = /* 'shpC' */ 0x73687043,
    bmdSwitcherInputSuperSourceEventTypeClipChanged              = /* 'clpC' */ 0x636C7043,
    bmdSwitcherInputSuperSourceEventTypeGainChanged              = /* 'ganC' */ 0x67616E43,
    bmdSwitcherInputSuperSourceEventTypeInverseChanged           = /* 'invC' */ 0x696E7643
};

/* Enum BMDSwitcherSuperSourceBorderEventType - Used in IBMDSwitcherSuperSourceBorderCallback */

typedef uint32_t BMDSwitcherSuperSourceBorderEventType;
enum _BMDSwitcherSuperSourceBorderEventType {
    bmdSwitcherSuperSourceBorderEventTypeEnabledChanged          = /* 'enbC' */ 0x656E6243,
    bmdSwitcherSuperSourceBorderEventTypeBevelChanged            = /* 'bvlC' */ 0x62766C43,
    bmdSwitcherSuperSourceBorderEventTypeWidthOutChanged         = /* 'wdoC' */ 0x77646F43,
    bmdSwitcherSuperSourceBorderEventTypeWidthInChanged          = /* 'wdiC' */ 0x77646943,
    bmdSwitcherSuperSourceBorderEventTypeSoftnessOutChanged      = /* 'sfoC' */ 0x73666F43,
    bmdSwitcherSuperSourceBorderEventTypeSoftnessInChanged       = /* 'sfiC' */ 0x73666943,
    bmdSwitcherSuperSourceBorderEventTypeBevelSoftnessChanged    = /* 'bvsC' */ 0x62767343,
    bmdSwitcherSuperSourceBorderEventTypeBevelPositionChanged    = /* 'bvpC' */ 0x62767043,
    bmdSwitcherSuperSourceBorderEventTypeHueChanged              = /* 'hueC' */ 0x68756543,
    bmdSwitcherSuperSourceBorderEventTypeSaturationChanged       = /* 'satC' */ 0x73617443,
    bmdSwitcherSuperSourceBorderEventTypeLumaChanged             = /* 'lumC' */ 0x6C756D43,
    bmdSwitcherSuperSourceBorderEventTypeLightSourceDirectionChanged = /* 'lsdC' */ 0x6C736443,
    bmdSwitcherSuperSourceBorderEventTypeLightSourceAltitudeChanged = /* 'lsaC' */ 0x6C736143
};

/* Enum BMDSwitcherBorderBevelOption - Border Bevel Option for DVE Key and SuperSource Box */

typedef uint32_t BMDSwitcherBorderBevelOption;
enum _BMDSwitcherBorderBevelOption {
    bmdSwitcherBorderBevelOptionNone                             = /* 'none' */ 0x6E6F6E65,
    bmdSwitcherBorderBevelOptionInOut                            = /* 'inot' */ 0x696E6F74,
    bmdSwitcherBorderBevelOptionIn                               = /* 'inin' */ 0x696E696E,
    bmdSwitcherBorderBevelOptionOut                              = /* 'otot' */ 0x6F746F74
};

/* Enum BMDSwitcherTransitionMixParametersEventType - Used in IBMDSwitcherTransitionMixParametersCallback */

typedef uint32_t BMDSwitcherTransitionMixParametersEventType;
enum _BMDSwitcherTransitionMixParametersEventType {
    bmdSwitcherTransitionMixParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543
};

/* Enum BMDSwitcherTransitionDipParametersEventType - Used in IBMDSwitcherTransitionDipParametersCallback */

typedef uint32_t BMDSwitcherTransitionDipParametersEventType;
enum _BMDSwitcherTransitionDipParametersEventType {
    bmdSwitcherTransitionDipParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionDipParametersEventTypeInputDipChanged   = /* 'ipdC' */ 0x69706443
};

/* Enum BMDSwitcherTransitionWipeParametersEventType - Used in IBMDSwitcherTransitionWipeParametersCallback */

typedef uint32_t BMDSwitcherTransitionWipeParametersEventType;
enum _BMDSwitcherTransitionWipeParametersEventType {
    bmdSwitcherTransitionWipeParametersEventTypeRateChanged      = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionWipeParametersEventTypePatternChanged   = /* 'patC' */ 0x70617443,
    bmdSwitcherTransitionWipeParametersEventTypeBorderSizeChanged = /* 'bdsC' */ 0x62647343,
    bmdSwitcherTransitionWipeParametersEventTypeInputBorderChanged = /* 'ipbC' */ 0x69706243,
    bmdSwitcherTransitionWipeParametersEventTypeSymmetryChanged  = /* 'symC' */ 0x73796D43,
    bmdSwitcherTransitionWipeParametersEventTypeSoftnessChanged  = /* 'sftC' */ 0x73667443,
    bmdSwitcherTransitionWipeParametersEventTypeHorizontalOffsetChanged = /* 'hofC' */ 0x686F6643,
    bmdSwitcherTransitionWipeParametersEventTypeVerticalOffsetChanged = /* 'vofC' */ 0x766F6643,
    bmdSwitcherTransitionWipeParametersEventTypeReverseChanged   = /* 'revC' */ 0x72657643,
    bmdSwitcherTransitionWipeParametersEventTypeFlipFlopChanged  = /* 'ffpC' */ 0x66667043
};

/* Enum BMDSwitcherTransitionDVEParametersEventType - Used in IBMDSwitcherTransitionDVEParametersCallback */

typedef uint32_t BMDSwitcherTransitionDVEParametersEventType;
enum _BMDSwitcherTransitionDVEParametersEventType {
    bmdSwitcherTransitionDVEParametersEventTypeRateChanged       = /* 'rteC' */ 0x72746543,
    bmdSwitcherTransitionDVEParametersEventTypeLogoRateChanged   = /* 'lrtC' */ 0x6C727443,
    bmdSwitcherTransitionDVEParametersEventTypeReverseChanged    = /* 'revC' */ 0x72657643,
    bmdSwitcherTransitionDVEParametersEventTypeFlipFlopChanged   = /* 'ffpC' */ 0x66667043,
    bmdSwitcherTransitionDVEParametersEventTypeStyleChanged      = /* 'styC' */ 0x73747943,
    bmdSwitcherTransitionDVEParametersEventTypeInputFillChanged  = /* 'ipfC' */ 0x69706643,
    bmdSwitcherTransitionDVEParametersEventTypeInputCutChanged   = /* 'ipcC' */ 0x69706343,
    bmdSwitcherTransitionDVEParametersEventTypeEnableKeyChanged  = /* 'enkC' */ 0x656E6B43,
    bmdSwitcherTransitionDVEParametersEventTypePreMultipliedChanged = /* 'pmuC' */ 0x706D7543,
    bmdSwitcherTransitionDVEParametersEventTypeClipChanged       = /* 'clpC' */ 0x636C7043,
    bmdSwitcherTransitionDVEParametersEventTypeGainChanged       = /* 'gneC' */ 0x676E6543,
    bmdSwitcherTransitionDVEParametersEventTypeInverseChanged    = /* 'invC' */ 0x696E7643
};

/* Enum BMDSwitcherTransitionStingerParametersEventType - Used in IBMDSwitcherTransitionStingerParametersCallback */

typedef uint32_t BMDSwitcherTransitionStingerParametersEventType;
enum _BMDSwitcherTransitionStingerParametersEventType {
    bmdSwitcherTransitionStingerParametersEventTypeSourceChanged = /* 'srcC' */ 0x73726343,
    bmdSwitcherTransitionStingerParametersEventTypePreMultipliedChanged = /* 'pmuC' */ 0x706D7543,
    bmdSwitcherTransitionStingerParametersEventTypeClipChanged   = /* 'clpC' */ 0x636C7043,
    bmdSwitcherTransitionStingerParametersEventTypeGainChanged   = /* 'gneC' */ 0x676E6543,
    bmdSwitcherTransitionStingerParametersEventTypeInverseChanged = /* 'invC' */ 0x696E7643,
    bmdSwitcherTransitionStingerParametersEventTypePrerollChanged = /* 'prlC' */ 0x70726C43,
    bmdSwitcherTransitionStingerParametersEventTypeClipDurationChanged = /* 'cdrC' */ 0x63647243,
    bmdSwitcherTransitionStingerParametersEventTypeTriggerPointChanged = /* 'tgpC' */ 0x74677043,
    bmdSwitcherTransitionStingerParametersEventTypeMixRateChanged = /* 'mxrC' */ 0x6D787243
};

/* Enum BMDSwitcherTransitionParametersEventType - Used in IBMDSwitcherTransitionParametersCallback */

typedef uint32_t BMDSwitcherTransitionParametersEventType;
enum _BMDSwitcherTransitionParametersEventType {
    bmdSwitcherTransitionParametersEventTypeTransitionStyleChanged = /* 'styC' */ 0x73747943,
    bmdSwitcherTransitionParametersEventTypeNextTransitionStyleChanged = /* 'nstC' */ 0x6E737443,
    bmdSwitcherTransitionParametersEventTypeTransitionSelectionChanged = /* 'sltC' */ 0x736C7443,
    bmdSwitcherTransitionParametersEventTypeNextTransitionSelectionChanged = /* 'nslC' */ 0x6E736C43
};

/* Enum BMDSwitcherSuperSourceArtOption - SuperSource Art Option */

typedef uint32_t BMDSwitcherSuperSourceArtOption;
enum _BMDSwitcherSuperSourceArtOption {
    bmdSwitcherSuperSourceArtOptionBackground                    = /* 'bkgd' */ 0x626B6764,
    bmdSwitcherSuperSourceArtOptionForeground                    = /* 'frgd' */ 0x66726764
};

/* Enum BMDSwitcherMixEffectBlockEventType - Used in IBMDSwitcherMixEffectBlockCallback */

typedef uint32_t BMDSwitcherMixEffectBlockEventType;
enum _BMDSwitcherMixEffectBlockEventType {
    bmdSwitcherMixEffectBlockEventTypeProgramInputChanged        = /* 'pgiC' */ 0x70676943,
    bmdSwitcherMixEffectBlockEventTypePreviewInputChanged        = /* 'pviC' */ 0x70766943,
    bmdSwitcherMixEffectBlockEventTypeTransitionPositionChanged  = /* 'tspC' */ 0x74737043,
    bmdSwitcherMixEffectBlockEventTypeTransitionFramesRemainingChanged = /* 'tfrC' */ 0x74667243,
    bmdSwitcherMixEffectBlockEventTypeInTransitionChanged        = /* 'iitC' */ 0x69697443,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackFramesRemainingChanged = /* 'ffrC' */ 0x66667243,
    bmdSwitcherMixEffectBlockEventTypeInFadeToBlackChanged       = /* 'ifbC' */ 0x69666243,
    bmdSwitcherMixEffectBlockEventTypePreviewLiveChanged         = /* 'pvlC' */ 0x70766C43,
    bmdSwitcherMixEffectBlockEventTypePreviewTransitionChanged   = /* 'pvtC' */ 0x70767443,
    bmdSwitcherMixEffectBlockEventTypeInputAvailabilityMaskChanged = /* 'avmC' */ 0x61766D43,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackRateChanged     = /* 'fbrC' */ 0x66627243,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackFullyBlackChanged = /* 'fbbC' */ 0x66626243,
    bmdSwitcherMixEffectBlockEventTypeFadeToBlackInTransitionChanged = /* 'fbtC' */ 0x66627443
};

/* Enum BMDSwitcherAudioMonitorOutputEventType - Used in IBMDSwitcherAudioMonitorOutputCallback */

typedef uint32_t BMDSwitcherAudioMonitorOutputEventType;
enum _BMDSwitcherAudioMonitorOutputEventType {
    bmdSwitcherAudioMonitorOutputEventTypeMonitorEnableChanged   = /* 'mneC' */ 0x6D6E6543,
    bmdSwitcherAudioMonitorOutputEventTypeGainChanged            = /* 'mgnC' */ 0x6D676E43,
    bmdSwitcherAudioMonitorOutputEventTypeMuteChanged            = /* 'mteC' */ 0x6D746543,
    bmdSwitcherAudioMonitorOutputEventTypeSoloChanged            = /* 'solC' */ 0x736F6C43,
    bmdSwitcherAudioMonitorOutputEventTypeSoloInputChanged       = /* 'sliC' */ 0x736C6943,
    bmdSwitcherAudioMonitorOutputEventTypeDimChanged             = /* 'dimC' */ 0x64696D43,
    bmdSwitcherAudioMonitorOutputEventTypeDimLevelChanged        = /* 'dmlC' */ 0x646D6C43
};

/* Enum BMDSwitcherAudioInputEventType - Used in IBMDSwitcherAudioInputCallback */

typedef uint32_t BMDSwitcherAudioInputEventType;
enum _BMDSwitcherAudioInputEventType {
    bmdSwitcherAudioInputEventTypeCurrentExternalPortTypeChanged = /* 'eptC' */ 0x65707443,
    bmdSwitcherAudioInputEventTypeMixOptionChanged               = /* 'mxoC' */ 0x6D786F43,
    bmdSwitcherAudioInputEventTypeGainChanged                    = /* 'ignC' */ 0x69676E43,
    bmdSwitcherAudioInputEventTypeBalanceChanged                 = /* 'balC' */ 0x62616C43,
    bmdSwitcherAudioInputEventTypeIsMixedInChanged               = /* 'imiC' */ 0x696D6943
};

/* Enum BMDSwitcherAudioMixerEventType - Used in IBMDSwitcherAudioMixerCallback */

typedef uint32_t BMDSwitcherAudioMixerEventType;
enum _BMDSwitcherAudioMixerEventType {
    bmdSwitcherAudioMixerEventTypeProgramOutGainChanged          = /* 'pgnC' */ 0x70676E43,
    bmdSwitcherAudioMixerEventTypeProgramOutBalanceChanged       = /* 'balC' */ 0x62616C43,
    bmdSwitcherAudioMixerEventTypeProgramOutFollowFadeToBlackChanged = /* 'ffbC' */ 0x66666243,
    bmdSwitcherAudioMixerEventTypeAudioFollowVideoCrossfadeTransitionChanged = /* 'aftC' */ 0x61667443
};

/* Enum BMDSwitcherAudioInputType - Audio Input Type */

typedef uint32_t BMDSwitcherAudioInputType;
enum _BMDSwitcherAudioInputType {
    bmdSwitcherAudioInputTypeEmbeddedWithVideo                   = /* 'ewvd' */ 0x65777664,
    bmdSwitcherAudioInputTypeMediaPlayer                         = /* 'mdpy' */ 0x6D647079,
    bmdSwitcherAudioInputTypeAudioIn                             = /* 'adin' */ 0x6164696E
};

/* Enum BMDSwitcherAudioMixOption - Audio Mix Option */

typedef uint32_t BMDSwitcherAudioMixOption;
enum _BMDSwitcherAudioMixOption {
    bmdSwitcherAudioMixOptionOff                                 = /* 'offf' */ 0x6F666666,
    bmdSwitcherAudioMixOptionOn                                  = /* 'onon' */ 0x6F6E6F6E,
    bmdSwitcherAudioMixOptionAudioFollowVideo                    = /* 'afvv' */ 0x61667676
};

/* Enum BMDSwitcherTalkbackId - Talkback Id */

typedef uint32_t BMDSwitcherTalkbackId;
enum _BMDSwitcherTalkbackId {
    bmdSwitcherTalkbackIdProduction                              = /* 'prod' */ 0x70726F64,
    bmdSwitcherTalkbackIdEngineering                             = /* 'engg' */ 0x656E6767
};

/* Enum BMDSwitcherTalkbackEventType - Used in IBMDSwitcherTalkbackCallback */

typedef uint32_t BMDSwitcherTalkbackEventType;
enum _BMDSwitcherTalkbackEventType {
    bmdSwitcherTalkbackEventTypeMuteSDIChanged                   = /* 'tmsC' */ 0x746D7343,
    bmdSwitcherTalkbackEventTypeInputMuteSDIChanged              = /* 'imsC' */ 0x696D7343,
    bmdSwitcherTalkbackEventTypeCurrentInputSupportsMuteSDIChanged = /* 'ismC' */ 0x69736D43
};

/* Enum BMDSwitcherAudioHeadphoneOutputEventType - Used in IBMDSwitcherAudioHeadphoneOutputCallback */

typedef uint32_t BMDSwitcherAudioHeadphoneOutputEventType;
enum _BMDSwitcherAudioHeadphoneOutputEventType {
    bmdSwitcherAudioHeadphoneOutputEventTypeGainChanged          = /* 'hogC' */ 0x686F6743,
    bmdSwitcherAudioHeadphoneOutputEventTypeInputProgramOutGainChanged = /* 'hopC' */ 0x686F7043,
    bmdSwitcherAudioHeadphoneOutputEventTypeInputTalkbackGainChanged = /* 'hotC' */ 0x686F7443,
    bmdSwitcherAudioHeadphoneOutputEventTypeInputSidetoneGainChanged = /* 'hosC' */ 0x686F7343
};

/* Enum BMDSwitcherFairlightAudioLimiterEventType - Used in IBMDSwitcherFairlightAudioLimiterCallback */

typedef uint32_t BMDSwitcherFairlightAudioLimiterEventType;
enum _BMDSwitcherFairlightAudioLimiterEventType {
    bmdSwitcherFairlightAudioLimiterEventTypeEnabledChanged      = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioLimiterEventTypeThresholdChanged    = /* 'thrC' */ 0x74687243,
    bmdSwitcherFairlightAudioLimiterEventTypeAttackChanged       = /* 'atkC' */ 0x61746B43,
    bmdSwitcherFairlightAudioLimiterEventTypeHoldChanged         = /* 'hldC' */ 0x686C6443,
    bmdSwitcherFairlightAudioLimiterEventTypeReleaseChanged      = /* 'rlsC' */ 0x726C7343
};

/* Enum BMDSwitcherFairlightAudioCompressorEventType - Used in IBMDSwitcherFairlightAudioCompressorCallback */

typedef uint32_t BMDSwitcherFairlightAudioCompressorEventType;
enum _BMDSwitcherFairlightAudioCompressorEventType {
    bmdSwitcherFairlightAudioCompressorEventTypeEnabledChanged   = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioCompressorEventTypeThresholdChanged = /* 'thrC' */ 0x74687243,
    bmdSwitcherFairlightAudioCompressorEventTypeRatioChanged     = /* 'rtoC' */ 0x72746F43,
    bmdSwitcherFairlightAudioCompressorEventTypeAttackChanged    = /* 'atkC' */ 0x61746B43,
    bmdSwitcherFairlightAudioCompressorEventTypeHoldChanged      = /* 'hldC' */ 0x686C6443,
    bmdSwitcherFairlightAudioCompressorEventTypeReleaseChanged   = /* 'rlsC' */ 0x726C7343
};

/* Enum BMDSwitcherFairlightAudioExpanderEventType - Used in IBMDSwitcherFairlightAudioExpanderCallback */

typedef uint32_t BMDSwitcherFairlightAudioExpanderEventType;
enum _BMDSwitcherFairlightAudioExpanderEventType {
    bmdSwitcherFairlightAudioExpanderEventTypeEnabledChanged     = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioExpanderEventTypeGateModeChanged    = /* 'gtmC' */ 0x67746D43,
    bmdSwitcherFairlightAudioExpanderEventTypeThresholdChanged   = /* 'thrC' */ 0x74687243,
    bmdSwitcherFairlightAudioExpanderEventTypeRangeChanged       = /* 'rngC' */ 0x726E6743,
    bmdSwitcherFairlightAudioExpanderEventTypeRatioChanged       = /* 'rtoC' */ 0x72746F43,
    bmdSwitcherFairlightAudioExpanderEventTypeAttackChanged      = /* 'atkC' */ 0x61746B43,
    bmdSwitcherFairlightAudioExpanderEventTypeHoldChanged        = /* 'hldC' */ 0x686C6443,
    bmdSwitcherFairlightAudioExpanderEventTypeReleaseChanged     = /* 'rlsC' */ 0x726C7343
};

/* Enum BMDSwitcherFairlightAudioDynamicsProcessorEventType - Used in IBMDSwitcherFairlightAudioDynamicsProcessorCallback */

typedef uint32_t BMDSwitcherFairlightAudioDynamicsProcessorEventType;
enum _BMDSwitcherFairlightAudioDynamicsProcessorEventType {
    bmdSwitcherFairlightAudioDynamicsProcessorEventTypeMakeupGainChanged = /* 'mugC' */ 0x6D756743
};

/* Enum BMDSwitcherFairlightAudioEqualizerBandEventType - Used in IBMDSwitcherFairlightAudioEqualizerBandCallback */

typedef uint32_t BMDSwitcherFairlightAudioEqualizerBandEventType;
enum _BMDSwitcherFairlightAudioEqualizerBandEventType {
    bmdSwitcherFairlightAudioEqualizerBandEventTypeEnabledChanged = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeShapeChanged  = /* 'shpC' */ 0x73687043,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeFrequencyRangeChanged = /* 'fqrC' */ 0x66717243,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeFrequencyChanged = /* 'frqC' */ 0x66727143,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeGainChanged   = /* 'ganC' */ 0x67616E43,
    bmdSwitcherFairlightAudioEqualizerBandEventTypeQFactorChanged = /* 'qftC' */ 0x71667443
};

/* Enum BMDSwitcherFairlightAudioEqualizerBandShape - Fairlight Audio Equalizer Band Shape */

typedef uint32_t BMDSwitcherFairlightAudioEqualizerBandShape;
enum _BMDSwitcherFairlightAudioEqualizerBandShape {
    bmdSwitcherFairlightAudioEqualizerBandShapeLowShelf          = 0x0001,
    bmdSwitcherFairlightAudioEqualizerBandShapeLowPass           = 0x0002,
    bmdSwitcherFairlightAudioEqualizerBandShapeBandPass          = 0x0004,
    bmdSwitcherFairlightAudioEqualizerBandShapeNotch             = 0x0008,
    bmdSwitcherFairlightAudioEqualizerBandShapeHighPass          = 0x0010,
    bmdSwitcherFairlightAudioEqualizerBandShapeHighShelf         = 0x0020
};

/* Enum BMDSwitcherFairlightAudioEqualizerBandFrequencyRange - Fairlight Audio Equalizer Band Frequency Range */

typedef uint32_t BMDSwitcherFairlightAudioEqualizerBandFrequencyRange;
enum _BMDSwitcherFairlightAudioEqualizerBandFrequencyRange {
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeLow      = 0x0001,
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeMidLow   = 0x0002,
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeMidHigh  = 0x0004,
    bmdSwitcherFairlightAudioEqualizerBandFrequencyRangeHigh     = 0x0008
};

/* Enum BMDSwitcherFairlightAudioEqualizerEventType - Used in IBMDSwitcherFairlightAudioEqualizerCallback */

typedef uint32_t BMDSwitcherFairlightAudioEqualizerEventType;
enum _BMDSwitcherFairlightAudioEqualizerEventType {
    bmdSwitcherFairlightAudioEqualizerEventTypeEnabledChanged    = /* 'enbC' */ 0x656E6243,
    bmdSwitcherFairlightAudioEqualizerEventTypeGainChanged       = /* 'ganC' */ 0x67616E43
};

/* Enum BMDSwitcherFairlightAudioSourceEventType - Used in IBMDSwitcherFairlightAudioSourceCallback */

typedef uint32_t BMDSwitcherFairlightAudioSourceEventType;
enum _BMDSwitcherFairlightAudioSourceEventType {
    bmdSwitcherFairlightAudioSourceEventTypeIsActiveChanged      = /* 'isaC' */ 0x69736143,
    bmdSwitcherFairlightAudioSourceEventTypeMaxDelayFramesChanged = /* 'mdfC' */ 0x6D646643,
    bmdSwitcherFairlightAudioSourceEventTypeDelayFramesChanged   = /* 'dlfC' */ 0x646C6643,
    bmdSwitcherFairlightAudioSourceEventTypeInputGainChanged     = /* 'ingC' */ 0x696E6743,
    bmdSwitcherFairlightAudioSourceEventTypeStereoSimulationIntensityChanged = /* 'ssiC' */ 0x73736943,
    bmdSwitcherFairlightAudioSourceEventTypePanChanged           = /* 'panC' */ 0x70616E43,
    bmdSwitcherFairlightAudioSourceEventTypeFaderGainChanged     = /* 'fdgC' */ 0x66646743,
    bmdSwitcherFairlightAudioSourceEventTypeMixOptionChanged     = /* 'mxoC' */ 0x6D786F43,
    bmdSwitcherFairlightAudioSourceEventTypeIsMixedInChanged     = /* 'imiC' */ 0x696D6943
};

/* Enum BMDSwitcherFairlightAudioSourceType - Fairlight Audio Source Type */

typedef uint32_t BMDSwitcherFairlightAudioSourceType;
enum _BMDSwitcherFairlightAudioSourceType {
    bmdSwitcherFairlightAudioSourceTypeMono                      = /* 'mono' */ 0x6D6F6E6F,
    bmdSwitcherFairlightAudioSourceTypeStereo                    = /* 'ster' */ 0x73746572
};

/* Enum BMDSwitcherFairlightAudioMixOption - Fairlight Audio Mix Option */

typedef uint32_t BMDSwitcherFairlightAudioMixOption;
enum _BMDSwitcherFairlightAudioMixOption {
    bmdSwitcherFairlightAudioMixOptionOff                        = 0x00000001,
    bmdSwitcherFairlightAudioMixOptionOn                         = 0x00000002,
    bmdSwitcherFairlightAudioMixOptionAudioFollowVideo           = 0x00000004
};

/* Enum BMDSwitcherFairlightAudioInputEventType - Used in IBMDSwitcherFairlightAudioInputCallback */

typedef uint32_t BMDSwitcherFairlightAudioInputEventType;
enum _BMDSwitcherFairlightAudioInputEventType {
    bmdSwitcherFairlightAudioInputEventTypeCurrentExternalPortTypeChanged = /* 'eptC' */ 0x65707443,
    bmdSwitcherFairlightAudioInputEventTypeConfigurationChanged  = /* 'cfgC' */ 0x63666743
};

/* Enum BMDSwitcherFairlightAnalogAudioInputEventType - Used in IBMDSwitcherFairlightAnalogAudioInputCallback */

typedef uint32_t BMDSwitcherFairlightAnalogAudioInputEventType;
enum _BMDSwitcherFairlightAnalogAudioInputEventType {
    bmdSwitcherFairlightAnalogAudioInputEventTypeLevelChanged    = /* 'aalC' */ 0x61616C43
};

/* Enum BMDSwitcherFairlightAudioAnalogInputLevel - Fairlight Analog Audio Input Level */

typedef uint32_t BMDSwitcherFairlightAudioAnalogInputLevel;
enum _BMDSwitcherFairlightAudioAnalogInputLevel {
    bmdSwitcherFairlightAudioAnalogInputLevelMicrophone          = 0x00000001,
    bmdSwitcherFairlightAudioAnalogInputLevelConsumerLine        = 0x00000002,
    bmdSwitcherFairlightAudioAnalogInputLevelProLine             = 0x00000004
};

/* Enum BMDSwitcherFairlightAudioInputType - Fairlight Audio Input Type */

typedef uint32_t BMDSwitcherFairlightAudioInputType;
enum _BMDSwitcherFairlightAudioInputType {
    bmdSwitcherFairlightAudioInputTypeEmbeddedWithVideo          = /* 'ewvd' */ 0x65777664,
    bmdSwitcherFairlightAudioInputTypeMediaPlayer                = /* 'mdpy' */ 0x6D647079,
    bmdSwitcherFairlightAudioInputTypeAudioIn                    = /* 'adin' */ 0x6164696E,
    bmdSwitcherFairlightAudioInputTypeMADI                       = /* 'madi' */ 0x6D616469
};

/* Enum BMDSwitcherFairlightAudioInputConfiguration - Fairlight Audio Input Configuration */

typedef uint32_t BMDSwitcherFairlightAudioInputConfiguration;
enum _BMDSwitcherFairlightAudioInputConfiguration {
    bmdSwitcherFairlightAudioInputConfigurationMono              = 0x00000001,
    bmdSwitcherFairlightAudioInputConfigurationStereo            = 0x00000002,
    bmdSwitcherFairlightAudioInputConfigurationDualMono          = 0x00000004
};

/* Enum BMDSwitcherFairlightAudioHeadphoneOutputEventType - Used in IBMDSwitcherFairlightAudioHeadphoneOutputCallback */

typedef uint32_t BMDSwitcherFairlightAudioHeadphoneOutputEventType;
enum _BMDSwitcherFairlightAudioHeadphoneOutputEventType {
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeGainChanged = /* 'hogC' */ 0x686F6743,
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeInputMasterOutGainChanged = /* 'homC' */ 0x686F6D43,
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeInputTalkbackGainChanged = /* 'hotC' */ 0x686F7443,
    bmdSwitcherFairlightAudioHeadphoneOutputEventTypeInputSidetoneGainChanged = /* 'hosC' */ 0x686F7343
};

/* Enum BMDSwitcherFairlightAudioMixerEventType - Used in IBMDSwitcherFairlightAudioMixerCallback */

typedef uint32_t BMDSwitcherFairlightAudioMixerEventType;
enum _BMDSwitcherFairlightAudioMixerEventType {
    bmdSwitcherFairlightAudioMixerEventTypeMasterOutFaderGainChanged = /* 'fdgC' */ 0x66646743,
    bmdSwitcherFairlightAudioMixerEventTypeMasterOutFollowFadeToBlackChanged = /* 'ffbC' */ 0x66666243,
    bmdSwitcherFairlightAudioMixerEventTypeAudioFollowVideoCrossfadeTransitionChanged = /* 'aftC' */ 0x61667443
};

/* Enum BMDSwitcherTransitionStyle - Transition styles used in IBMDSwitcherTransitionParameters */

typedef uint32_t BMDSwitcherTransitionStyle;
enum _BMDSwitcherTransitionStyle {
    bmdSwitcherTransitionStyleMix                                = /* 'mixx' */ 0x6D697878,
    bmdSwitcherTransitionStyleDip                                = /* 'dipp' */ 0x64697070,
    bmdSwitcherTransitionStyleWipe                               = /* 'wipe' */ 0x77697065,
    bmdSwitcherTransitionStyleDVE                                = /* 'dvee' */ 0x64766565,
    bmdSwitcherTransitionStyleStinger                            = /* 'stng' */ 0x73746E67
};

/* Enum BMDSwitcherTransitionSelection - Used in IBMDSwitcherTransitionParameters */

typedef uint32_t BMDSwitcherTransitionSelection;
enum _BMDSwitcherTransitionSelection {
    bmdSwitcherTransitionSelectionBackground                     = 0x00000001,
    bmdSwitcherTransitionSelectionKey1                           = 0x00000002,
    bmdSwitcherTransitionSelectionKey2                           = 0x00000004,
    bmdSwitcherTransitionSelectionKey3                           = 0x00000008,
    bmdSwitcherTransitionSelectionKey4                           = 0x00000010
};

/* Enum BMDSwitcherKeyLumaParametersEventType - Used in IBMDSwitcherKeyLumaParametersCallback */

typedef uint32_t BMDSwitcherKeyLumaParametersEventType;
enum _BMDSwitcherKeyLumaParametersEventType {
    bmdSwitcherKeyLumaParametersEventTypePreMultipliedChanged    = /* 'pmlC' */ 0x706D6C43,
    bmdSwitcherKeyLumaParametersEventTypeClipChanged             = /* 'clpC' */ 0x636C7043,
    bmdSwitcherKeyLumaParametersEventTypeGainChanged             = /* 'gneC' */ 0x676E6543,
    bmdSwitcherKeyLumaParametersEventTypeInverseChanged          = /* 'invC' */ 0x696E7643
};

/* Enum BMDSwitcherKeyChromaParametersEventType - Used in IBMDSwitcherKeyChromaParametersCallback */

typedef uint32_t BMDSwitcherKeyChromaParametersEventType;
enum _BMDSwitcherKeyChromaParametersEventType {
    bmdSwitcherKeyChromaParametersEventTypeHueChanged            = /* 'hueC' */ 0x68756543,
    bmdSwitcherKeyChromaParametersEventTypeGainChanged           = /* 'gneC' */ 0x676E6543,
    bmdSwitcherKeyChromaParametersEventTypeYSuppressChanged      = /* 'yspC' */ 0x79737043,
    bmdSwitcherKeyChromaParametersEventTypeLiftChanged           = /* 'lftC' */ 0x6C667443,
    bmdSwitcherKeyChromaParametersEventTypeNarrowChanged         = /* 'nrwC' */ 0x6E727743
};

/* Enum BMDSwitcherKeyAdvancedChromaParametersEventType - Used in IBMDSwitcherKeyAdvancedChromaParametersCallback */

typedef uint32_t BMDSwitcherKeyAdvancedChromaParametersEventType;
enum _BMDSwitcherKeyAdvancedChromaParametersEventType {
    bmdSwitcherKeyAdvancedChromaParametersEventTypeForegroundLevelChanged = /* 'cflC' */ 0x63666C43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeBackgroundLevelChanged = /* 'cblC' */ 0x63626C43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeKeyEdgeChanged = /* 'ckeC' */ 0x636B6543,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSpillSuppressChanged = /* 'cssC' */ 0x63737343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeFlareSuppressChanged = /* 'cfsC' */ 0x63667343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeBrightnessChanged = /* 'cfiC' */ 0x63666943,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeContrastChanged = /* 'cfcC' */ 0x63666343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSaturationChanged = /* 'cfaC' */ 0x63666143,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeRedChanged    = /* 'cfrC' */ 0x63667243,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeGreenChanged  = /* 'cfgC' */ 0x63666743,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeBlueChanged   = /* 'cfbC' */ 0x63666243,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSamplingModeEnabledChanged = /* 'ccoC' */ 0x63636F43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypePreviewEnabledChanged = /* 'cpoC' */ 0x63706F43,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeCursorXPositionChanged = /* 'cpxC' */ 0x63707843,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeCursorYPositionChanged = /* 'cpyC' */ 0x63707943,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeCursorSizeChanged = /* 'ccsC' */ 0x63637343,
    bmdSwitcherKeyAdvancedChromaParametersEventTypeSampledColorChanged = /* 'cscC' */ 0x63736343
};

/* Enum BMDSwitcherKeyPatternParametersEventType - Used in IBMDSwitcherKeyPatternParametersCallback */

typedef uint32_t BMDSwitcherKeyPatternParametersEventType;
enum _BMDSwitcherKeyPatternParametersEventType {
    bmdSwitcherKeyPatternParametersEventTypePatternChanged       = /* 'patC' */ 0x70617443,
    bmdSwitcherKeyPatternParametersEventTypeSizeChanged          = /* 'szeC' */ 0x737A6543,
    bmdSwitcherKeyPatternParametersEventTypeSymmetryChanged      = /* 'symC' */ 0x73796D43,
    bmdSwitcherKeyPatternParametersEventTypeSoftnessChanged      = /* 'sftC' */ 0x73667443,
    bmdSwitcherKeyPatternParametersEventTypeHorizontalOffsetChanged = /* 'hzoC' */ 0x687A6F43,
    bmdSwitcherKeyPatternParametersEventTypeVerticalOffsetChanged = /* 'vtoC' */ 0x76746F43,
    bmdSwitcherKeyPatternParametersEventTypeInverseChanged       = /* 'invC' */ 0x696E7643
};

/* Enum BMDSwitcherKeyFlyKeyFrameParametersEventType - Used in IBMDSwitcherKeyFlyKeyFrameParametersCallback */

typedef uint32_t BMDSwitcherKeyFlyKeyFrameParametersEventType;
enum _BMDSwitcherKeyFlyKeyFrameParametersEventType {
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeSizeXChanged     = /* 'fszx' */ 0x66737A78,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeSizeYChanged     = /* 'fszy' */ 0x66737A79,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypePositionXChanged = /* 'fpsx' */ 0x66707378,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypePositionYChanged = /* 'fpsy' */ 0x66707379,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeRotationChanged  = /* 'frot' */ 0x66726F74,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderWidthOutChanged = /* 'fbwo' */ 0x6662776F,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderWidthInChanged = /* 'fbwi' */ 0x66627769,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSoftnessOutChanged = /* 'fbso' */ 0x6662736F,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSoftnessInChanged = /* 'fbsi' */ 0x66627369,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderBevelSoftnessChanged = /* 'fbbs' */ 0x66626273,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderBevelPositionChanged = /* 'fbbp' */ 0x66626270,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderHueChanged = /* 'fbhu' */ 0x66626875,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderSaturationChanged = /* 'fbst' */ 0x66627374,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLumaChanged = /* 'fblm' */ 0x66626C6D,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLightSourceDirectionChanged = /* 'fbld' */ 0x66626C64,
    bmdSwitcherKeyFlyKeyFrameParametersEventTypeBorderLightSourceAltitudeChanged = /* 'fbla' */ 0x66626C61
};

/* Enum BMDSwitcherKeyFlyParametersEventType - Used in IBMDSwitcherKeyFlyParametersCallback */

typedef uint32_t BMDSwitcherKeyFlyParametersEventType;
enum _BMDSwitcherKeyFlyParametersEventType {
    bmdSwitcherKeyFlyParametersEventTypeFlyChanged               = /* 'flyC' */ 0x666C7943,
    bmdSwitcherKeyFlyParametersEventTypeCanFlyChanged            = /* 'cflC' */ 0x63666C43,
    bmdSwitcherKeyFlyParametersEventTypeRateChanged              = /* 'rteC' */ 0x72746543,
    bmdSwitcherKeyFlyParametersEventTypeSizeXChanged             = /* 'szxC' */ 0x737A7843,
    bmdSwitcherKeyFlyParametersEventTypeSizeYChanged             = /* 'szyC' */ 0x737A7943,
    bmdSwitcherKeyFlyParametersEventTypePositionXChanged         = /* 'psxC' */ 0x70737843,
    bmdSwitcherKeyFlyParametersEventTypePositionYChanged         = /* 'psyC' */ 0x70737943,
    bmdSwitcherKeyFlyParametersEventTypeRotationChanged          = /* 'rotC' */ 0x726F7443,
    bmdSwitcherKeyFlyParametersEventTypeIsKeyFrameStoredChanged  = /* 'kfsC' */ 0x6B667343,
    bmdSwitcherKeyFlyParametersEventTypeIsAtKeyFramesChanged     = /* 'akfC' */ 0x616B6643,
    bmdSwitcherKeyFlyParametersEventTypeIsRunningChanged         = /* 'rngC' */ 0x726E6743
};

/* Enum BMDSwitcherKeyDVEParametersEventType - Used in IBMDSwitcherKeyDVEParametersCallback */

typedef uint32_t BMDSwitcherKeyDVEParametersEventType;
enum _BMDSwitcherKeyDVEParametersEventType {
    bmdSwitcherKeyDVEParametersEventTypeShadowChanged            = /* 'shdC' */ 0x73686443,
    bmdSwitcherKeyDVEParametersEventTypeLightSourceDirectionChanged = /* 'ltdC' */ 0x6C746443,
    bmdSwitcherKeyDVEParametersEventTypeLightSourceAltitudeChanged = /* 'ltaC' */ 0x6C746143,
    bmdSwitcherKeyDVEParametersEventTypeBorderEnabledChanged     = /* 'benC' */ 0x62656E43,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelChanged       = /* 'bbvC' */ 0x62627643,
    bmdSwitcherKeyDVEParametersEventTypeBorderWidthInChanged     = /* 'bwiC' */ 0x62776943,
    bmdSwitcherKeyDVEParametersEventTypeBorderWidthOutChanged    = /* 'bwoC' */ 0x62776F43,
    bmdSwitcherKeyDVEParametersEventTypeBorderSoftnessInChanged  = /* 'bsiC' */ 0x62736943,
    bmdSwitcherKeyDVEParametersEventTypeBorderSoftnessOutChanged = /* 'bsoC' */ 0x62736F43,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelSoftnessChanged = /* 'bbsC' */ 0x62627343,
    bmdSwitcherKeyDVEParametersEventTypeBorderBevelPositionChanged = /* 'bbpC' */ 0x62627043,
    bmdSwitcherKeyDVEParametersEventTypeBorderOpacityChanged     = /* 'bopC' */ 0x626F7043,
    bmdSwitcherKeyDVEParametersEventTypeBorderHueChanged         = /* 'bhuC' */ 0x62687543,
    bmdSwitcherKeyDVEParametersEventTypeBorderSaturationChanged  = /* 'bstC' */ 0x62737443,
    bmdSwitcherKeyDVEParametersEventTypeBorderLumaChanged        = /* 'blmC' */ 0x626C6D43,
    bmdSwitcherKeyDVEParametersEventTypeMaskedChanged            = /* 'mskC' */ 0x6D736B43,
    bmdSwitcherKeyDVEParametersEventTypeMaskTopChanged           = /* 'mtpC' */ 0x6D747043,
    bmdSwitcherKeyDVEParametersEventTypeMaskBottomChanged        = /* 'mbtC' */ 0x6D627443,
    bmdSwitcherKeyDVEParametersEventTypeMaskLeftChanged          = /* 'mlfC' */ 0x6D6C6643,
    bmdSwitcherKeyDVEParametersEventTypeMaskRightChanged         = /* 'mrtC' */ 0x6D727443
};

/* Enum BMDSwitcherKeyEventType - Used in IBMDSwitcherKeyCallback */

typedef uint32_t BMDSwitcherKeyEventType;
enum _BMDSwitcherKeyEventType {
    bmdSwitcherKeyEventTypeTypeChanged                           = /* 'typC' */ 0x74797043,
    bmdSwitcherKeyEventTypeInputCutChanged                       = /* 'ipcC' */ 0x69706343,
    bmdSwitcherKeyEventTypeInputFillChanged                      = /* 'ipfC' */ 0x69706643,
    bmdSwitcherKeyEventTypeOnAirChanged                          = /* 'onaC' */ 0x6F6E6143,
    bmdSwitcherKeyEventTypeCanBeDVEKeyChanged                    = /* 'cbdC' */ 0x63626443,
    bmdSwitcherKeyEventTypeMaskedChanged                         = /* 'mkeC' */ 0x6D6B6543,
    bmdSwitcherKeyEventTypeMaskTopChanged                        = /* 'mktC' */ 0x6D6B7443,
    bmdSwitcherKeyEventTypeMaskBottomChanged                     = /* 'mkbC' */ 0x6D6B6243,
    bmdSwitcherKeyEventTypeMaskLeftChanged                       = /* 'mklC' */ 0x6D6B6C43,
    bmdSwitcherKeyEventTypeMaskRightChanged                      = /* 'mkrC' */ 0x6D6B7243
};

/* Enum BMDSwitcherKeyType - (Upstream) Key types */

typedef uint32_t BMDSwitcherKeyType;
enum _BMDSwitcherKeyType {
    bmdSwitcherKeyTypeLuma                                       = /* 'luma' */ 0x6C756D61,
    bmdSwitcherKeyTypeChroma                                     = /* 'chrm' */ 0x6368726D,
    bmdSwitcherKeyTypePattern                                    = /* 'ptrn' */ 0x7074726E,
    bmdSwitcherKeyTypeDVE                                        = /* 'dvee' */ 0x64766565
};

/* Enum BMDSwitcherPatternStyle - Pattern style for Wipe Transition, or Pattern Keys */

typedef uint32_t BMDSwitcherPatternStyle;
enum _BMDSwitcherPatternStyle {
    bmdSwitcherPatternStyleLeftToRightBar                        = /* 'ltrb' */ 0x6C747262,
    bmdSwitcherPatternStyleTopToBottomBar                        = /* 'ttbb' */ 0x74746262,
    bmdSwitcherPatternStyleHorizontalBarnDoor                    = /* 'hbnd' */ 0x68626E64,
    bmdSwitcherPatternStyleVerticalBarnDoor                      = /* 'vbnd' */ 0x76626E64,
    bmdSwitcherPatternStyleCornersInFourBox                      = /* 'cifb' */ 0x63696662,
    bmdSwitcherPatternStyleRectangleIris                         = /* 'reci' */ 0x72656369,
    bmdSwitcherPatternStyleDiamondIris                           = /* 'diai' */ 0x64696169,
    bmdSwitcherPatternStyleCircleIris                            = /* 'ciri' */ 0x63697269,
    bmdSwitcherPatternStyleTopLeftBox                            = /* 'tlbx' */ 0x746C6278,
    bmdSwitcherPatternStyleTopRightBox                           = /* 'trbx' */ 0x74726278,
    bmdSwitcherPatternStyleBottomRightBox                        = /* 'brbx' */ 0x62726278,
    bmdSwitcherPatternStyleBottomLeftBox                         = /* 'blbx' */ 0x626C6278,
    bmdSwitcherPatternStyleTopCentreBox                          = /* 'tcbx' */ 0x74636278,
    bmdSwitcherPatternStyleRightCentreBox                        = /* 'rcbx' */ 0x72636278,
    bmdSwitcherPatternStyleBottomCentreBox                       = /* 'bcbx' */ 0x62636278,
    bmdSwitcherPatternStyleLeftCentreBox                         = /* 'lcbx' */ 0x6C636278,
    bmdSwitcherPatternStyleTopLeftDiagonal                       = /* 'tldg' */ 0x746C6467,
    bmdSwitcherPatternStyleTopRightDiagonal                      = /* 'trdg' */ 0x74726467
};

/* Enum BMDSwitcherVideoMode - Video mode of Switcher */

typedef uint32_t BMDSwitcherVideoMode;
enum _BMDSwitcherVideoMode {
    bmdSwitcherVideoMode525i5994NTSC                             = /* 'ntsc' */ 0x6E747363,
    bmdSwitcherVideoMode625i50PAL                                = /* 'pall' */ 0x70616C6C,
    bmdSwitcherVideoMode525i5994Anamorphic                       = /* 'ntsA' */ 0x6E747341,
    bmdSwitcherVideoMode625i50Anamorphic                         = /* 'palA' */ 0x70616C41,
    bmdSwitcherVideoMode720p50                                   = /* '72p0' */ 0x37327030,
    bmdSwitcherVideoMode720p5994                                 = /* '72p9' */ 0x37327039,
    bmdSwitcherVideoMode1080i50                                  = /* '10i0' */ 0x31306930,
    bmdSwitcherVideoMode1080i5994                                = /* '10i9' */ 0x31306939,
    bmdSwitcherVideoMode1080p2398                                = /* '10p3' */ 0x31307033,
    bmdSwitcherVideoMode1080p24                                  = /* '10p4' */ 0x31307034,
    bmdSwitcherVideoMode1080p25                                  = /* '10p5' */ 0x31307035,
    bmdSwitcherVideoMode1080p2997                                = /* '10p7' */ 0x31307037,
    bmdSwitcherVideoMode1080p30                                  = /* '10pt' */ 0x31307074,
    bmdSwitcherVideoMode1080p50                                  = /* '10p0' */ 0x31307030,
    bmdSwitcherVideoMode1080p5994                                = /* '10p9' */ 0x31307039,
    bmdSwitcherVideoMode1080p60                                  = /* '10ps' */ 0x31307073,
    bmdSwitcherVideoMode4KHDp2398                                = /* '4H23' */ 0x34483233,
    bmdSwitcherVideoMode4KHDp24                                  = /* '4H24' */ 0x34483234,
    bmdSwitcherVideoMode4KHDp25                                  = /* '4H25' */ 0x34483235,
    bmdSwitcherVideoMode4KHDp2997                                = /* '4H29' */ 0x34483239,
    bmdSwitcherVideoMode4KHDp50                                  = /* '4H50' */ 0x34483530,
    bmdSwitcherVideoMode4KHDp5994                                = /* '4H59' */ 0x34483539,
    bmdSwitcherVideoMode8KHDp2398                                = /* '8H23' */ 0x38483233,
    bmdSwitcherVideoMode8KHDp24                                  = /* '8H24' */ 0x38483234,
    bmdSwitcherVideoMode8KHDp25                                  = /* '8H25' */ 0x38483235,
    bmdSwitcherVideoMode8KHDp2997                                = /* '8H29' */ 0x38483239,
    bmdSwitcherVideoMode8KHDp50                                  = /* '8H50' */ 0x38483530,
    bmdSwitcherVideoMode8KHDp5994                                = /* '8H59' */ 0x38483539
};

/* Enum BMDSwitcherDownConversionMethod - Down convert method used when converting 16:9 to 4:3 */

typedef uint32_t BMDSwitcherDownConversionMethod;
enum _BMDSwitcherDownConversionMethod {
    bmdSwitcherDownConversionMethodCentreCut                     = /* 'dmcc' */ 0x646D6363,
    bmdSwitcherDownConversionMethodLetterbox                     = /* 'dmlb' */ 0x646D6C62,
    bmdSwitcherDownConversionMethodAnamorphic                    = /* 'dmam' */ 0x646D616D
};

/* Enum BMDSwitcher3GSDIOutputLevel - Switcher 3G-SDI level mode for all outputs */

typedef uint32_t BMDSwitcher3GSDIOutputLevel;
enum _BMDSwitcher3GSDIOutputLevel {
    bmdSwitcher3GSDIOutputLevelA                                 = /* '3gsa' */ 0x33677361,
    bmdSwitcher3GSDIOutputLevelB                                 = /* '3gsb' */ 0x33677362
};

/* Enum BMDSwitcherPowerStatus - IBMDSwitcher Power Status bits */

typedef uint32_t BMDSwitcherPowerStatus;
enum _BMDSwitcherPowerStatus {
    bmdSwitcherPowerStatusSupply1                                = 0x01,
    bmdSwitcherPowerStatusSupply2                                = 0x02
};

/* Enum BMDSwitcherPixelFormat - Pixel Format used in IBMDSwitcherFrame */

typedef uint32_t BMDSwitcherPixelFormat;
enum _BMDSwitcherPixelFormat {
    bmdSwitcherPixelFormat8BitARGB                               = /* 'argb' */ 0x61726762,
    bmdSwitcherPixelFormat8BitXRGB                               = /* 'xrgb' */ 0x78726762,
    bmdSwitcherPixelFormat8BitYUV                                = /* '2vuy' */ 0x32767579,
    bmdSwitcherPixelFormat10BitYUVA                              = /* 'yuva' */ 0x79757661
};

/* Enum BMDSwitcherFlyKeyFrame - Used in IBMDSwitcherKeyFlyParameters */

typedef uint32_t BMDSwitcherFlyKeyFrame;
enum _BMDSwitcherFlyKeyFrame {
    bmdSwitcherFlyKeyFrameFull                                   = 0x00000001,
    bmdSwitcherFlyKeyFrameInfinityCentreOfKey                    = 0x00000002,
    bmdSwitcherFlyKeyFrameInfinityTopLeft                        = 0x00000004,
    bmdSwitcherFlyKeyFrameInfinityTop                            = 0x00000008,
    bmdSwitcherFlyKeyFrameInfinityTopRight                       = 0x00000010,
    bmdSwitcherFlyKeyFrameInfinityLeft                           = 0x00000020,
    bmdSwitcherFlyKeyFrameInfinityCentre                         = 0x00000040,
    bmdSwitcherFlyKeyFrameInfinityRight                          = 0x00000080,
    bmdSwitcherFlyKeyFrameInfinityBottomLeft                     = 0x00000100,
    bmdSwitcherFlyKeyFrameInfinityBottom                         = 0x00000200,
    bmdSwitcherFlyKeyFrameInfinityBottomRight                    = 0x00000400,
    bmdSwitcherFlyKeyFrameA                                      = 0x00000800,
    bmdSwitcherFlyKeyFrameB                                      = 0x00001000
};

/* Enum BMDSwitcherDVETransitionStyle - Transition style for DVE Transition */

typedef uint32_t BMDSwitcherDVETransitionStyle;
enum _BMDSwitcherDVETransitionStyle {
    bmdSwitcherDVETransitionStyleSwooshTopLeft                   = /* 'swtl' */ 0x7377746C,
    bmdSwitcherDVETransitionStyleSwooshTop                       = /* 'swtc' */ 0x73777463,
    bmdSwitcherDVETransitionStyleSwooshTopRight                  = /* 'swtr' */ 0x73777472,
    bmdSwitcherDVETransitionStyleSwooshLeft                      = /* 'swlc' */ 0x73776C63,
    bmdSwitcherDVETransitionStyleSwooshRight                     = /* 'swrc' */ 0x73777263,
    bmdSwitcherDVETransitionStyleSwooshBottomLeft                = /* 'swbl' */ 0x7377626C,
    bmdSwitcherDVETransitionStyleSwooshBottom                    = /* 'swbc' */ 0x73776263,
    bmdSwitcherDVETransitionStyleSwooshBottomRight               = /* 'swbr' */ 0x73776272,
    bmdSwitcherDVETransitionStyleSpinCWTopLeft                   = /* 'sptl' */ 0x7370746C,
    bmdSwitcherDVETransitionStyleSpinCWTopRight                  = /* 'sptr' */ 0x73707472,
    bmdSwitcherDVETransitionStyleSpinCWBottomLeft                = /* 'spbl' */ 0x7370626C,
    bmdSwitcherDVETransitionStyleSpinCWBottomRight               = /* 'spbr' */ 0x73706272,
    bmdSwitcherDVETransitionStyleSpinCCWTopLeft                  = /* 'sctl' */ 0x7363746C,
    bmdSwitcherDVETransitionStyleSpinCCWTopRight                 = /* 'sctr' */ 0x73637472,
    bmdSwitcherDVETransitionStyleSpinCCWBottomLeft               = /* 'scbl' */ 0x7363626C,
    bmdSwitcherDVETransitionStyleSpinCCWBottomRight              = /* 'scbr' */ 0x73636272,
    bmdSwitcherDVETransitionStyleSqueezeTopLeft                  = /* 'sqtl' */ 0x7371746C,
    bmdSwitcherDVETransitionStyleSqueezeTop                      = /* 'sqtc' */ 0x73717463,
    bmdSwitcherDVETransitionStyleSqueezeTopRight                 = /* 'sqtr' */ 0x73717472,
    bmdSwitcherDVETransitionStyleSqueezeLeft                     = /* 'sqlc' */ 0x73716C63,
    bmdSwitcherDVETransitionStyleSqueezeRight                    = /* 'sqrc' */ 0x73717263,
    bmdSwitcherDVETransitionStyleSqueezeBottomLeft               = /* 'sqbl' */ 0x7371626C,
    bmdSwitcherDVETransitionStyleSqueezeBottom                   = /* 'sqbc' */ 0x73716263,
    bmdSwitcherDVETransitionStyleSqueezeBottomRight              = /* 'sqbr' */ 0x73716272,
    bmdSwitcherDVETransitionStylePushTopLeft                     = /* 'sutl' */ 0x7375746C,
    bmdSwitcherDVETransitionStylePushTop                         = /* 'sutc' */ 0x73757463,
    bmdSwitcherDVETransitionStylePushTopRight                    = /* 'sutr' */ 0x73757472,
    bmdSwitcherDVETransitionStylePushLeft                        = /* 'sulc' */ 0x73756C63,
    bmdSwitcherDVETransitionStylePushRight                       = /* 'surc' */ 0x73757263,
    bmdSwitcherDVETransitionStylePushBottomLeft                  = /* 'subl' */ 0x7375626C,
    bmdSwitcherDVETransitionStylePushBottom                      = /* 'subc' */ 0x73756263,
    bmdSwitcherDVETransitionStylePushBottomRight                 = /* 'subr' */ 0x73756272,
    bmdSwitcherDVETransitionStyleGraphicCWSpin                   = /* 'sgcw' */ 0x73676377,
    bmdSwitcherDVETransitionStyleGraphicCCWSpin                  = /* 'sgcc' */ 0x73676363,
    bmdSwitcherDVETransitionStyleGraphicLogoWipe                 = /* 'sglw' */ 0x73676C77
};

/* Enum BMDSwitcherStingerTransitionSource - Transition source used in Stinger Transitions */

typedef uint32_t BMDSwitcherStingerTransitionSource;
enum _BMDSwitcherStingerTransitionSource {
    bmdSwitcherStingerTransitionSourceMediaPlayer1               = /* 'smp1' */ 0x736D7031,
    bmdSwitcherStingerTransitionSourceMediaPlayer2               = /* 'smp2' */ 0x736D7032,
    bmdSwitcherStingerTransitionSourceMediaPlayer3               = /* 'smp3' */ 0x736D7033,
    bmdSwitcherStingerTransitionSourceMediaPlayer4               = /* 'smp4' */ 0x736D7034,
    bmdSwitcherStingerTransitionSourceNone                       = /* 'snon' */ 0x736E6F6E
};

/* Enum BMDSwitcherMediaPlayerSourceType - Source for a Media Player */

typedef uint32_t BMDSwitcherMediaPlayerSourceType;
enum _BMDSwitcherMediaPlayerSourceType {
    bmdSwitcherMediaPlayerSourceTypeStill                        = /* 'smps' */ 0x736D7073,
    bmdSwitcherMediaPlayerSourceTypeClip                         = /* 'smpc' */ 0x736D7063
};

/* Enum BMDSwitcherMultiViewLayout - Layout for MultiView */

typedef uint32_t BMDSwitcherMultiViewLayout;
enum _BMDSwitcherMultiViewLayout {
    bmdSwitcherMultiViewLayoutProgramTop                         = 0x0C,
    bmdSwitcherMultiViewLayoutProgramBottom                      = 0x03,
    bmdSwitcherMultiViewLayoutProgramLeft                        = 0x0a,
    bmdSwitcherMultiViewLayoutProgramRight                       = 0x05,
    bmdSwitcherMultiViewLayoutTopLeftSmall                       = 0x01,
    bmdSwitcherMultiViewLayoutTopRightSmall                      = 0x02,
    bmdSwitcherMultiViewLayoutBottomLeftSmall                    = 0x04,
    bmdSwitcherMultiViewLayoutBottomRightSmall                   = 0x08
};

/* Enum BMDSwitcherMultiViewEventType - Used in IBMDSwitcherMultiViewCallback */

typedef uint32_t BMDSwitcherMultiViewEventType;
enum _BMDSwitcherMultiViewEventType {
    bmdSwitcherMultiViewEventTypeLayoutChanged                   = /* 'lotC' */ 0x6C6F7443,
    bmdSwitcherMultiViewEventTypeWindowChanged                   = /* 'wdwC' */ 0x77647743,
    bmdSwitcherMultiViewEventTypeCurrentInputSupportsVuMeterChanged = /* 'vmsC' */ 0x766D7343,
    bmdSwitcherMultiViewEventTypeVuMeterEnabledChanged           = /* 'vmeC' */ 0x766D6543,
    bmdSwitcherMultiViewEventTypeVuMeterOpacityChanged           = /* 'vmoC' */ 0x766D6F43,
    bmdSwitcherMultiViewEventTypeCurrentInputSupportsSafeAreaChanged = /* 'sasC' */ 0x73617343,
    bmdSwitcherMultiViewEventTypeSafeAreaEnabledChanged          = /* 'saeC' */ 0x73616543,
    bmdSwitcherMultiViewEventTypeProgramPreviewSwappedChanged    = /* 'ppsC' */ 0x70707343
};

/* Enum BMDSwitcherDownstreamKeyEventType - Used in IBMDSwitcherDownstreamKeyCallback */

typedef uint32_t BMDSwitcherDownstreamKeyEventType;
enum _BMDSwitcherDownstreamKeyEventType {
    bmdSwitcherDownstreamKeyEventTypeInputCutChanged             = /* 'ipcC' */ 0x69706343,
    bmdSwitcherDownstreamKeyEventTypeInputFillChanged            = /* 'ipfC' */ 0x69706643,
    bmdSwitcherDownstreamKeyEventTypeTieChanged                  = /* 'tieC' */ 0x74696543,
    bmdSwitcherDownstreamKeyEventTypeRateChanged                 = /* 'rteC' */ 0x72746543,
    bmdSwitcherDownstreamKeyEventTypeOnAirChanged                = /* 'onaC' */ 0x6F6E6143,
    bmdSwitcherDownstreamKeyEventTypeIsTransitioningChanged      = /* 'itsC' */ 0x69747343,
    bmdSwitcherDownstreamKeyEventTypeIsAutoTransitioningChanged  = /* 'iatC' */ 0x69617443,
    bmdSwitcherDownstreamKeyEventTypeIsTransitionTowardsOnAirChanged = /* 'toaC' */ 0x746F6143,
    bmdSwitcherDownstreamKeyEventTypeFramesRemainingChanged      = /* 'frmC' */ 0x66726D43,
    bmdSwitcherDownstreamKeyEventTypePreMultipliedChanged        = /* 'pmlC' */ 0x706D6C43,
    bmdSwitcherDownstreamKeyEventTypeClipChanged                 = /* 'clpC' */ 0x636C7043,
    bmdSwitcherDownstreamKeyEventTypeGainChanged                 = /* 'gneC' */ 0x676E6543,
    bmdSwitcherDownstreamKeyEventTypeInverseChanged              = /* 'invC' */ 0x696E7643,
    bmdSwitcherDownstreamKeyEventTypeMaskedChanged               = /* 'mskC' */ 0x6D736B43,
    bmdSwitcherDownstreamKeyEventTypeMaskTopChanged              = /* 'mktC' */ 0x6D6B7443,
    bmdSwitcherDownstreamKeyEventTypeMaskBottomChanged           = /* 'mkbC' */ 0x6D6B6243,
    bmdSwitcherDownstreamKeyEventTypeMaskLeftChanged             = /* 'mklC' */ 0x6D6B6C43,
    bmdSwitcherDownstreamKeyEventTypeMaskRightChanged            = /* 'mkrC' */ 0x6D6B7243
};

/* Enum BMDSwitcherConnectToFailure - used in ConnectTo */

typedef uint32_t BMDSwitcherConnectToFailure;
enum _BMDSwitcherConnectToFailure {
    bmdSwitcherConnectToFailureNoResponse                        = /* 'cfnr' */ 0x63666E72,
    bmdSwitcherConnectToFailureIncompatibleFirmware              = /* 'cfif' */ 0x63666966,
    bmdSwitcherConnectToFailureCorruptData                       = /* 'cfcd' */ 0x63666364,
    bmdSwitcherConnectToFailureStateSync                         = /* 'cfss' */ 0x63667373,
    bmdSwitcherConnectToFailureStateSyncTimedOut                 = /* 'cfst' */ 0x63667374,
    bmdSwitcherConnectToFailureDeprecatedAfter_v7_3              = /* 'cfd0' */ 0x63666430
};

/* Enum BMDSwitcherSaveRecallType - BMDSwitcher Save Recall Type */

typedef uint32_t BMDSwitcherSaveRecallType;
enum _BMDSwitcherSaveRecallType {
    bmdSwitcherSaveRecallTypeStartupState                        = /* 'srss' */ 0x73727373
};

/* Enum BMDSwitcherMediaPoolEventType - Used in IBMDSwitcherClipCallback, IBMDSwitcherStillsCallback */

typedef uint32_t BMDSwitcherMediaPoolEventType;
enum _BMDSwitcherMediaPoolEventType {
    bmdSwitcherMediaPoolEventTypeValidChanged                    = /* 'vlid' */ 0x766C6964,
    bmdSwitcherMediaPoolEventTypeNameChanged                     = /* 'name' */ 0x6E616D65,
    bmdSwitcherMediaPoolEventTypeHashChanged                     = /* 'hash' */ 0x68617368,
    bmdSwitcherMediaPoolEventTypeAudioValidChanged               = /* 'avld' */ 0x61766C64,
    bmdSwitcherMediaPoolEventTypeAudioNameChanged                = /* 'anme' */ 0x616E6D65,
    bmdSwitcherMediaPoolEventTypeAudioHashChanged                = /* 'ahsh' */ 0x61687368,
    bmdSwitcherMediaPoolEventTypeLockBusy                        = /* 'lbsy' */ 0x6C627379,
    bmdSwitcherMediaPoolEventTypeLockIdle                        = /* 'lidl' */ 0x6C69646C,
    bmdSwitcherMediaPoolEventTypeTransferCompleted               = /* 'cmpt' */ 0x636D7074,
    bmdSwitcherMediaPoolEventTypeTransferCancelled               = /* 'cncl' */ 0x636E636C,
    bmdSwitcherMediaPoolEventTypeTransferFailed                  = /* 'fail' */ 0x6661696C
};

/* Enum BMDSwitcherStillCaptureEventType - Used in IBMDSwitcherStillCaptureCallback */

typedef uint32_t BMDSwitcherStillCaptureEventType;
enum _BMDSwitcherStillCaptureEventType {
    bmdSwitcherStillCaptureEventTypeIsAvailableChanged           = /* 'scac' */ 0x73636163
};

/* Enum BMDSwitcherRecordDiskStatus - Used in IBMDSwitcherRecordDisk */

typedef uint32_t BMDSwitcherRecordDiskStatus;
enum _BMDSwitcherRecordDiskStatus {
    bmdSwitcherRecordDiskIdle                                    = /* 'rdid' */ 0x72646964,
    bmdSwitcherRecordDiskUnformatted                             = /* 'rduf' */ 0x72647566,
    bmdSwitcherRecordDiskActive                                  = /* 'rdav' */ 0x72646176,
    bmdSwitcherRecordDiskRecording                               = /* 'rdrc' */ 0x72647263
};

/* Enum BMDSwitcherRecordDiskEventType - Used in IBMDSwitcherRecordDiskCallback */

typedef uint32_t BMDSwitcherRecordDiskEventType;
enum _BMDSwitcherRecordDiskEventType {
    bmdSwitcherRecordDiskEventTypeStatusChanged                  = /* 'rdsc' */ 0x72647363,
    bmdSwitcherRecordDiskEventTypeRecordingTimeAvailableChanged  = /* 'rdtc' */ 0x72647463,
    bmdSwitcherRecordDiskEventTypeVolumeNameChanged              = /* 'rdvc' */ 0x72647663
};

/* Enum BMDSwitcherRecordAVEventType - Used in IBMDSwitcherRecordAVCallback */

typedef uint32_t BMDSwitcherRecordAVEventType;
enum _BMDSwitcherRecordAVEventType {
    bmdSwitcherRecordAVEventTypeFilenameChanged                  = /* 'rmfc' */ 0x726D6663,
    bmdSwitcherRecordAVEventTypeRecordInAllCamerasChanged        = /* 'racc' */ 0x72616363,
    bmdSwitcherRecordAVEventTypeDurationChanged                  = /* 'rmdc' */ 0x726D6463,
    bmdSwitcherRecordAVEventTypeActiveDiskIndexChanged           = /* 'rmac' */ 0x726D6163,
    bmdSwitcherRecordAVEventTypeTotalRecordingTimeAvailableChanged = /* 'rmtc' */ 0x726D7463,
    bmdSwitcherRecordAVEventTypeRecordAllISOInputsChanged        = /* 'isra' */ 0x69737261
};

/* Enum BMDSwitcherRecordDiskAvailabilityEventType - Used in IBMDSwitcherRecordAVCallback */

typedef uint32_t BMDSwitcherRecordDiskAvailabilityEventType;
enum _BMDSwitcherRecordDiskAvailabilityEventType {
    bmdSwitcherRecordDiskAvailabilityEventTypeAvailable          = /* 'rdaa' */ 0x72646161,
    bmdSwitcherRecordDiskAvailabilityEventTypeRemoved            = /* 'rdar' */ 0x72646172
};

/* Enum BMDSwitcherRecordAVState - Used in IBMDSwitcherRecordAV */

typedef uint32_t BMDSwitcherRecordAVState;
enum _BMDSwitcherRecordAVState {
    bmdSwitcherRecordAVStateIdle                                 = /* 'rasi' */ 0x72617369,
    bmdSwitcherRecordAVStateRecording                            = /* 'rasr' */ 0x72617372,
    bmdSwitcherRecordAVStateStopping                             = /* 'rass' */ 0x72617373
};

/* Enum BMDSwitcherRecordAVError - Used in IBMDSwitcherRecordAV */

typedef uint32_t BMDSwitcherRecordAVError;
enum _BMDSwitcherRecordAVError {
    bmdSwitcherRecordAVErrorNone                                 = /* 'renn' */ 0x72656E6E,
    bmdSwitcherRecordAVErrorNoMedia                              = /* 'renm' */ 0x72656E6D,
    bmdSwitcherRecordAVErrorMediaFull                            = /* 'remf' */ 0x72656D66,
    bmdSwitcherRecordAVErrorMediaError                           = /* 'reme' */ 0x72656D65,
    bmdSwitcherRecordAVErrorMediaUnformatted                     = /* 'remu' */ 0x72656D75,
    bmdSwitcherRecordAVErrorDroppingFrames                       = /* 'redf' */ 0x72656466,
    bmdSwitcherRecordAVErrorUnknown                              = /* 'reuk' */ 0x7265756B
};

/* Enum BMDSwitcherStreamRTMPEventType - Used in IBMDSwitcherStreamRTMPCallback */

typedef uint32_t BMDSwitcherStreamRTMPEventType;
enum _BMDSwitcherStreamRTMPEventType {
    bmdSwitcherStreamRTMPEventTypeServiceNameChanged             = /* 'rsnh' */ 0x72736E68,
    bmdSwitcherStreamRTMPEventTypeUrlChanged                     = /* 'rsuc' */ 0x72737563,
    bmdSwitcherStreamRTMPEventTypeKeyChanged                     = /* 'rskc' */ 0x72736B63,
    bmdSwitcherStreamRTMPEventTypeVideoBitratesChanged           = /* 'rsbc' */ 0x72736263,
    bmdSwitcherStreamRTMPEventTypeAudioBitratesChanged           = /* 'rabc' */ 0x72616263,
    bmdSwitcherStreamRTMPEventTypeEncodingBitrateChanged         = /* 'rsec' */ 0x72736563,
    bmdSwitcherStreamRTMPEventTypeCacheUsedChanged               = /* 'rscc' */ 0x72736363,
    bmdSwitcherStreamRTMPEventTypeDurationChanged                = /* 'rsdc' */ 0x72736463,
    bmdSwitcherStreamRTMPEventTypeAuthenticationChanged          = /* 'rsac' */ 0x72736163,
    bmdSwitcherStreamRTMPEventTypeLowLatencyChanged              = /* 'lltc' */ 0x6C6C7463
};

/* Enum BMDSwitcherStreamRTMPState - Used in IBMDSwitcherStreamRTMP */

typedef uint32_t BMDSwitcherStreamRTMPState;
enum _BMDSwitcherStreamRTMPState {
    bmdSwitcherStreamRTMPStateIdle                               = /* 'rtsi' */ 0x72747369,
    bmdSwitcherStreamRTMPStateConnecting                         = /* 'rtsc' */ 0x72747363,
    bmdSwitcherStreamRTMPStateStreaming                          = /* 'rtss' */ 0x72747373,
    bmdSwitcherStreamRTMPStateStopping                           = /* 'rtst' */ 0x72747374
};

/* Enum BMDSwitcherStreamRTMPError - Used in IBMDSwitcherStreamRTMP */

typedef uint32_t BMDSwitcherStreamRTMPError;
enum _BMDSwitcherStreamRTMPError {
    bmdSwitcherStreamRTMPErrorNone                               = /* 'rten' */ 0x7274656E,
    bmdSwitcherStreamRTMPErrorInvalidState                       = /* 'rtei' */ 0x72746569,
    bmdSwitcherStreamRTMPErrorUnknown                            = /* 'rteu' */ 0x72746575
};

/* Enum BMDSwitcherCameraControlEventType - Used in IBMDSwitcherCameraControlCallback */

typedef uint32_t BMDSwitcherCameraControlEventType;
enum _BMDSwitcherCameraControlEventType {
    bmdSwitcherCameraControlEventTypePeriodicFlushIntervalChanged = /* 'pfic' */ 0x70666963,
    bmdSwitcherCameraControlEventTypeParameterValueChanged       = /* 'pmvc' */ 0x706D7663,
    bmdSwitcherCameraControlEventTypeParameterPeriodicFlushEnabledChanged = /* 'pmpc' */ 0x706D7063
};

/* Enum BMDSwitcherCameraControlParameterType - Used in IBMDSwitcherCameraControl */

typedef uint32_t BMDSwitcherCameraControlParameterType;
enum _BMDSwitcherCameraControlParameterType {
    bmdSwitcherCameraControlParameterTypeVoidBool                = /* 'ccvb' */ 0x63637662,
    bmdSwitcherCameraControlParameterTypeSigned8Bit              = /* 'ccs8' */ 0x63637338,
    bmdSwitcherCameraControlParameterTypeSigned16Bit             = /* 'ccs1' */ 0x63637331,
    bmdSwitcherCameraControlParameterTypeSigned32Bit             = /* 'ccs3' */ 0x63637333,
    bmdSwitcherCameraControlParameterTypeSigned64Bit             = /* 'ccs6' */ 0x63637336,
    bmdSwitcherCameraControlParameterTypeUTF8                    = /* 'ccu8' */ 0x63637538,
    bmdSwitcherCameraControlParameterTypeFixedPoint16Bit         = /* 'ccfp' */ 0x63636670
};

/* Enum BMDSwitcherMacroPoolEventType - Used in IBMDSwitcherMacroPoolCallback */

typedef uint32_t BMDSwitcherMacroPoolEventType;
enum _BMDSwitcherMacroPoolEventType {
    bmdSwitcherMacroPoolEventTypeValidChanged                    = /* 'mava' */ 0x6D617661,
    bmdSwitcherMacroPoolEventTypeHasUnsupportedOpsChanged        = /* 'maop' */ 0x6D616F70,
    bmdSwitcherMacroPoolEventTypeNameChanged                     = /* 'mana' */ 0x6D616E61,
    bmdSwitcherMacroPoolEventTypeDescriptionChanged              = /* 'made' */ 0x6D616465,
    bmdSwitcherMacroPoolEventTypeTransferCompleted               = /* 'mats' */ 0x6D617473,
    bmdSwitcherMacroPoolEventTypeTransferCancelled               = /* 'matc' */ 0x6D617463,
    bmdSwitcherMacroPoolEventTypeTransferFailed                  = /* 'matf' */ 0x6D617466
};

/* Enum BMDSwitcherMacroControlEventType - Used in IBMDSwitcherMacroControlCallback */

typedef uint32_t BMDSwitcherMacroControlEventType;
enum _BMDSwitcherMacroControlEventType {
    bmdSwitcherMacroControlEventTypeRunStatusChanged             = /* 'marn' */ 0x6D61726E,
    bmdSwitcherMacroControlEventTypeRecordStatusChanged          = /* 'marc' */ 0x6D617263
};

/* Enum BMDSwitcherMacroRunStatus - Used in IBMDSwitcherMacroControl */

typedef uint32_t BMDSwitcherMacroRunStatus;
enum _BMDSwitcherMacroRunStatus {
    bmdSwitcherMacroRunStatusIdle                                = 0x00,
    bmdSwitcherMacroRunStatusRunning                             = 0x01,
    bmdSwitcherMacroRunStatusWaitingForUser                      = 0x02
};

/* Enum BMDSwitcherMacroRecordStatus - Used in IBMDSwitcherMacroControl */

typedef uint32_t BMDSwitcherMacroRecordStatus;
enum _BMDSwitcherMacroRecordStatus {
    bmdSwitcherMacroRecordStatusIdle                             = 0x00,
    bmdSwitcherMacroRecordStatusRecording                        = 0x01
};

/* Enum BMDSwitcherSerialPortFunction - Used in IBMDSwitcherSerialPort */

typedef uint32_t BMDSwitcherSerialPortFunction;
enum _BMDSwitcherSerialPortFunction {
    bmdSwitcherSerialPortFunctionNone                            = /* 'spfn' */ 0x7370666E,
    bmdSwitcherSerialPortFunctionPtzVisca                        = /* 'spfp' */ 0x73706670,
    bmdSwitcherSerialPortFunctionGvg100                          = /* 'spfg' */ 0x73706667
};

/* Enum BMDSwitcherSerialPortEventType - Used in IBMDSwitcherSerialPortCallback */

typedef uint32_t BMDSwitcherSerialPortEventType;
enum _BMDSwitcherSerialPortEventType {
    bmdSwitcherSerialPortEventTypeFunctionChanged                = /* 'spfc' */ 0x73706663
};

/* Enum BMDSwitcherHyperDeckClipEventType - Used in IBMDSwitcherHyperDeckClipCallback */

typedef uint32_t BMDSwitcherHyperDeckClipEventType;
enum _BMDSwitcherHyperDeckClipEventType {
    bmdSwitcherHyperDeckClipEventTypeValidChanged                = /* 'ecnC' */ 0x65636E43,
    bmdSwitcherHyperDeckClipEventTypeInfoAvailableChanged        = /* 'eciC' */ 0x65636943
};

/* Enum BMDSwitcherHyperDeckPlayerState - Device State of an HyperDeck */

typedef uint32_t BMDSwitcherHyperDeckPlayerState;
enum _BMDSwitcherHyperDeckPlayerState {
    bmdSwitcherHyperDeckStateUnknown                             = /* 'epsu' */ 0x65707375,
    bmdSwitcherHyperDeckStateIdle                                = /* 'epsi' */ 0x65707369,
    bmdSwitcherHyperDeckStatePlay                                = /* 'epsp' */ 0x65707370,
    bmdSwitcherHyperDeckStateRecord                              = /* 'epsr' */ 0x65707372,
    bmdSwitcherHyperDeckStateShuttle                             = /* 'epsf' */ 0x65707366
};

/* Enum BMDSwitcherHyperDeckEventType - Used in IBMDSwitcherHyperDeckCallback */

typedef uint32_t BMDSwitcherHyperDeckEventType;
enum _BMDSwitcherHyperDeckEventType {
    bmdSwitcherHyperDeckEventTypeConnectionStatusChanged         = /* 'emsC' */ 0x656D7343,
    bmdSwitcherHyperDeckEventTypeRemoteAccessEnabledChanged      = /* 'emaC' */ 0x656D6143,
    bmdSwitcherHyperDeckEventTypeStorageMediaStateChanged        = /* 'emvC' */ 0x656D7643,
    bmdSwitcherHyperDeckEventTypeEstimatedRecordTimeRemainingChanged = /* 'emRC' */ 0x656D5243,
    bmdSwitcherHyperDeckEventTypeActiveStorageMediaChanged       = /* 'emVC' */ 0x656D5643,
    bmdSwitcherHyperDeckEventTypeClipCountChanged                = /* 'emcC' */ 0x656D6343,
    bmdSwitcherHyperDeckEventTypeSwitcherInputChanged            = /* 'emiC' */ 0x656D6943,
    bmdSwitcherHyperDeckEventTypeFrameRateChanged                = /* 'emrC' */ 0x656D7243,
    bmdSwitcherHyperDeckEventTypeInterlacedVideoChanged          = /* 'emtC' */ 0x656D7443,
    bmdSwitcherHyperDeckEventTypeDropFrameTimeCodeChanged        = /* 'emdC' */ 0x656D6443,
    bmdSwitcherHyperDeckEventTypePlayerStateChanged              = /* 'empC' */ 0x656D7043,
    bmdSwitcherHyperDeckEventTypeCurrentClipChanged              = /* 'emuC' */ 0x656D7543,
    bmdSwitcherHyperDeckEventTypeCurrentClipTimeChanged          = /* 'emmC' */ 0x656D6D43,
    bmdSwitcherHyperDeckEventTypeCurrentTimelineTimeChanged      = /* 'emMC' */ 0x656D4D43,
    bmdSwitcherHyperDeckEventTypeShuttleSpeedChanged             = /* 'emhC' */ 0x656D6843,
    bmdSwitcherHyperDeckEventTypeLoopedPlaybackChanged           = /* 'emlC' */ 0x656D6C43,
    bmdSwitcherHyperDeckEventTypeSingleClipPlaybackChanged       = /* 'emgC' */ 0x656D6743,
    bmdSwitcherHyperDeckEventTypeAutoRollOnTakeChanged           = /* 'emAC' */ 0x656D4143,
    bmdSwitcherHyperDeckEventTypeAutoRollOnTakeFrameDelayChanged = /* 'emDC' */ 0x656D4443,
    bmdSwitcherHyperDeckEventTypeNetworkAddressChanged           = /* 'emnC' */ 0x656D6E43
};

/* Enum BMDSwitcherHyperDeckConnectionStatus - HyperDeck Connection State */

typedef uint32_t BMDSwitcherHyperDeckConnectionStatus;
enum _BMDSwitcherHyperDeckConnectionStatus {
    bmdSwitcherHyperDeckConnectionStatusNotConnected             = /* 'esnc' */ 0x65736E63,
    bmdSwitcherHyperDeckConnectionStatusConnecting               = /* 'escg' */ 0x65736367,
    bmdSwitcherHyperDeckConnectionStatusConnected                = /* 'escd' */ 0x65736364,
    bmdSwitcherHyperDeckConnectionStatusIncompatible             = /* 'esic' */ 0x65736963
};

/* Enum BMDSwitcherHyperDeckStorageMediaState - HyperDeck Storage Media State */

typedef uint32_t BMDSwitcherHyperDeckStorageMediaState;
enum _BMDSwitcherHyperDeckStorageMediaState {
    bmdSwitcherHyperDeckStorageMediaStateReady                   = /* 'esrd' */ 0x65737264,
    bmdSwitcherHyperDeckStorageMediaStateUnavailable             = /* 'esun' */ 0x6573756E
};

/* Enum BMDSwitcherHyperDeckErrorType - HyperDeck Transient Error */

typedef uint32_t BMDSwitcherHyperDeckErrorType;
enum _BMDSwitcherHyperDeckErrorType {
    bmdSwitcherHyperDeckErrorTypeUnknown                         = /* 'eeuk' */ 0x6565756B,
    bmdSwitcherHyperDeckErrorTypeAlreadyInUse                    = /* 'eeiu' */ 0x65656975,
    bmdSwitcherHyperDeckErrorTypeDuplicateAddress                = /* 'eeda' */ 0x65656461,
    bmdSwitcherHyperDeckErrorTypeRemoteDisabled                  = /* 'eerd' */ 0x65657264,
    bmdSwitcherHyperDeckErrorTypeMediaFull                       = /* 'eemf' */ 0x65656D66,
    bmdSwitcherHyperDeckErrorTypeMediaError                      = /* 'eeme' */ 0x65656D65,
    bmdSwitcherHyperDeckErrorTypeNoInput                         = /* 'eeni' */ 0x65656E69
};

/* Enum BMDSwitcherMixMinusOutputAudioMode - Mix-Minus Output Audio Mode */

typedef uint32_t BMDSwitcherMixMinusOutputAudioMode;
enum _BMDSwitcherMixMinusOutputAudioMode {
    bmdSwitcherMixMinusOutputAudioModeProgramOut                 = 0x00000001,
    bmdSwitcherMixMinusOutputAudioModeMixMinus                   = 0x00000002
};

/* Enum BMDSwitcherMixMinusOutputEventType - Used in IBMDSwitcherMixMinusOutputCallback */

typedef uint32_t BMDSwitcherMixMinusOutputEventType;
enum _BMDSwitcherMixMinusOutputEventType {
    bmdSwitcherMixMinusOutputEventTypeAvailableAudioModesChanged = /* 'ammC' */ 0x616D6D43,
    bmdSwitcherMixMinusOutputEventTypeAudioModeChanged           = /* 'mmmC' */ 0x6D6D6D43,
    bmdSwitcherMixMinusOutputEventTypeHasMinusAudioInputIdChanged = /* 'hmaC' */ 0x686D6143,
    bmdSwitcherMixMinusOutputEventTypeMinusAudioInputIdChanged   = /* 'maiC' */ 0x6D616943
};

/* Enum BMDSwitcherAudioInputXLREventType - Used in IBMDSwitcherAudioInputXLRCallback */

typedef uint32_t BMDSwitcherAudioInputXLREventType;
enum _BMDSwitcherAudioInputXLREventType {
    bmdSwitcherAudioInputXLREventTypeRCAToXLREnabledChanged      = /* 'rtxC' */ 0x72747843
};

/* Enum BMDSwitcherTimeCodeMode - Used in IBMDSwitcher */

typedef uint32_t BMDSwitcherTimeCodeMode;
enum _BMDSwitcherTimeCodeMode {
    bmdSwitcherTimeCodeModeFreeRun                               = /* 'tmfr' */ 0x746D6672,
    bmdSwitcherTimeCodeModeTimeOfDay                             = /* 'tmtd' */ 0x746D7464
};

#if defined(__cplusplus)

// Forward Declarations

class IBMDSwitcherAudioMonitorOutputCallback;
class IBMDSwitcherAudioMonitorOutput;
class IBMDSwitcherAudioInputCallback;
class IBMDSwitcherAudioInput;
class IBMDSwitcherAudioMixerCallback;
class IBMDSwitcherAudioMixer;
class IBMDSwitcherTalkbackCallback;
class IBMDSwitcherTalkback;
class IBMDSwitcherAudioHeadphoneOutput;
class IBMDSwitcherAudioHeadphoneOutputCallback;
class IBMDSwitcherFairlightAudioLimiterCallback;
class IBMDSwitcherFairlightAudioLimiter;
class IBMDSwitcherFairlightAudioCompressorCallback;
class IBMDSwitcherFairlightAudioCompressor;
class IBMDSwitcherFairlightAudioExpanderCallback;
class IBMDSwitcherFairlightAudioExpander;
class IBMDSwitcherFairlightAudioDynamicsProcessorCallback;
class IBMDSwitcherFairlightAudioDynamicsProcessor;
class IBMDSwitcherFairlightAudioEqualizerBandCallback;
class IBMDSwitcherFairlightAudioEqualizerBand;
class IBMDSwitcherFairlightAudioEqualizerBandIterator;
class IBMDSwitcherFairlightAudioEqualizerCallback;
class IBMDSwitcherFairlightAudioEqualizer;
class IBMDSwitcherFairlightAudioSourceCallback;
class IBMDSwitcherFairlightAudioSource;
class IBMDSwitcherFairlightAudioSourceIterator;
class IBMDSwitcherFairlightAnalogAudioInputCallback;
class IBMDSwitcherFairlightAnalogAudioInput;
class IBMDSwitcherFairlightAudioInputCallback;
class IBMDSwitcherFairlightAudioInput;
class IBMDSwitcherFairlightAudioInputIterator;
class IBMDSwitcherFairlightAudioHeadphoneOutputCallback;
class IBMDSwitcherFairlightAudioHeadphoneOutput;
class IBMDSwitcherFairlightAudioHeadphoneOutputIterator;
class IBMDSwitcherFairlightAudioMixerCallback;
class IBMDSwitcherFairlightAudioMixer;
class IBMDSwitcherKeyLumaParametersCallback;
class IBMDSwitcherKeyLumaParameters;
class IBMDSwitcherKeyChromaParametersCallback;
class IBMDSwitcherKeyChromaParameters;
class IBMDSwitcherKeyAdvancedChromaParametersCallback;
class IBMDSwitcherKeyAdvancedChromaParameters;
class IBMDSwitcherKeyPatternParametersCallback;
class IBMDSwitcherKeyPatternParameters;
class IBMDSwitcherKeyFlyKeyFrameParametersCallback;
class IBMDSwitcherKeyFlyKeyFrameParameters;
class IBMDSwitcherKeyFlyParametersCallback;
class IBMDSwitcherKeyFlyParameters;
class IBMDSwitcherKeyDVEParametersCallback;
class IBMDSwitcherKeyDVEParameters;
class IBMDSwitcherKeyCallback;
class IBMDSwitcherKey;
class IBMDSwitcherMediaPlayerCallback;
class IBMDSwitcherMediaPlayer;
class IBMDSwitcherTransitionMixParametersCallback;
class IBMDSwitcherTransitionMixParameters;
class IBMDSwitcherTransitionDipParametersCallback;
class IBMDSwitcherTransitionDipParameters;
class IBMDSwitcherTransitionWipeParametersCallback;
class IBMDSwitcherTransitionWipeParameters;
class IBMDSwitcherTransitionDVEParametersCallback;
class IBMDSwitcherTransitionDVEParameters;
class IBMDSwitcherTransitionStingerParametersCallback;
class IBMDSwitcherTransitionStingerParameters;
class IBMDSwitcherTransitionParametersCallback;
class IBMDSwitcherTransitionParameters;
class IBMDSwitcherMixEffectBlockCallback;
class IBMDSwitcherMixEffectBlock;
class IBMDSwitcherInputCallback;
class IBMDSwitcherInput;
class IBMDSwitcherInputColorCallback;
class IBMDSwitcherInputColor;
class IBMDSwitcherInputAuxCallback;
class IBMDSwitcherInputAux;
class IBMDSwitcherSuperSourceBoxCallback;
class IBMDSwitcherSuperSourceBox;
class IBMDSwitcherSuperSourceBorderCallback;
class IBMDSwitcherSuperSourceBorder;
class IBMDSwitcherInputSuperSourceCallback;
class IBMDSwitcherInputSuperSource;
class IBMDSwitcherMultiViewCallback;
class IBMDSwitcherMultiView;
class IBMDSwitcherDownstreamKeyCallback;
class IBMDSwitcherDownstreamKey;
class IBMDSwitcherInputIterator;
class IBMDSwitcherSuperSourceBoxIterator;
class IBMDSwitcherMixEffectBlockIterator;
class IBMDSwitcherDownstreamKeyIterator;
class IBMDSwitcherKeyIterator;
class IBMDSwitcherMediaPlayerIterator;
class IBMDSwitcherMultiViewIterator;
class IBMDSwitcherAudioMonitorOutputIterator;
class IBMDSwitcherAudioHeadphoneOutputIterator;
class IBMDSwitcherAudioInputIterator;
class IBMDSwitcherSerialPortIterator;
class IBMDSwitcherHyperDeckIterator;
class IBMDSwitcherMixMinusOutputIterator;
class IBMDSwitcherTalkbackIterator;
class IBMDSwitcherCallback;
class IBMDSwitcher;
class IBMDSwitcherDiscovery;
class IBMDSwitcherFrame;
class IBMDSwitcherAudio;
class IBMDSwitcherLockCallback;
class IBMDSwitcherStillsCallback;
class IBMDSwitcherStills;
class IBMDSwitcherClipCallback;
class IBMDSwitcherClip;
class IBMDSwitcherMediaPoolCallback;
class IBMDSwitcherMediaPool;
class IBMDSwitcherStillCapture;
class IBMDSwitcherStillCaptureCallback;
class IBMDSwitcherSaveRecall;
class IBMDSwitcherRecordDiskIterator;
class IBMDSwitcherRecordDisk;
class IBMDSwitcherRecordDiskCallback;
class IBMDSwitcherRecordAV;
class IBMDSwitcherRecordAVCallback;
class IBMDSwitcherStreamRTMP;
class IBMDSwitcherStreamRTMPCallback;
class IBMDSwitcherCameraControlParameterIterator;
class IBMDSwitcherCameraControlCallback;
class IBMDSwitcherCameraControl;
class IBMDSwitcherMacro;
class IBMDSwitcherTransferMacro;
class IBMDSwitcherMacroPoolCallback;
class IBMDSwitcherMacroPool;
class IBMDSwitcherMacroControlCallback;
class IBMDSwitcherMacroControl;
class IBMDSwitcherSerialPortCallback;
class IBMDSwitcherSerialPort;
class IBMDSwitcherHyperDeckClipCallback;
class IBMDSwitcherHyperDeckClip;
class IBMDSwitcherHyperDeckClipIterator;
class IBMDSwitcherHyperDeckCallback;
class IBMDSwitcherHyperDeck;
class IBMDSwitcherMixMinusOutput;
class IBMDSwitcherMixMinusOutputCallback;
class IBMDSwitcherAudioInputXLRCallback;
class IBMDSwitcherAudioInputXLR;

/* Interface IBMDSwitcherAudioMonitorOutputCallback - Audio Monitor Output Object Callback */

class BMD_PUBLIC IBMDSwitcherAudioMonitorOutputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherAudioMonitorOutputEventType eventType) = 0;
    virtual HRESULT LevelNotification (/* in */ double left, /* in */ double right, /* in */ double peakLeft, /* in */ double peakRight) = 0;

protected:
    virtual ~IBMDSwitcherAudioMonitorOutputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioMonitorOutput - Audio Monitor Output Object */

class BMD_PUBLIC IBMDSwitcherAudioMonitorOutput : public IUnknown
{
public:
    virtual HRESULT GetMonitorEnable (/* out */ bool* enable) = 0;
    virtual HRESULT SetMonitorEnable (/* in */ bool enable) = 0;	// When set to false, this output mirrors the output of Program Out and Monitor Functionality is disabled
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetMute (/* out */ bool* mute) = 0;
    virtual HRESULT SetMute (/* in */ bool mute) = 0;
    virtual HRESULT GetSolo (/* out */ bool* solo) = 0;
    virtual HRESULT SetSolo (/* in */ bool solo) = 0;
    virtual HRESULT GetSoloInput (/* out */ BMDSwitcherAudioInputId* audioInput) = 0;
    virtual HRESULT SetSoloInput (/* in */ BMDSwitcherAudioInputId audioInput) = 0;
    virtual HRESULT GetDim (/* out */ bool* dim) = 0;
    virtual HRESULT SetDim (/* in */ bool dim) = 0;
    virtual HRESULT GetDimLevel (/* out */ double* gain) = 0;
    virtual HRESULT SetDimLevel (/* in */ double gain) = 0;
    virtual HRESULT ResetLevelNotificationPeaks (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherAudioMonitorOutputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherAudioMonitorOutputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherAudioMonitorOutput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInputCallback - Audio Input Object Callback */

class BMD_PUBLIC IBMDSwitcherAudioInputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherAudioInputEventType eventType) = 0;
    virtual HRESULT LevelNotification (/* in */ double left, /* in */ double right, /* in */ double peakLeft, /* in */ double peakRight) = 0;

protected:
    virtual ~IBMDSwitcherAudioInputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInput - Audio Input Object */

class BMD_PUBLIC IBMDSwitcherAudioInput : public IUnknown
{
public:
    virtual HRESULT GetType (/* out */ BMDSwitcherAudioInputType* type) = 0;
    virtual HRESULT GetCurrentExternalPortType (/* out */ BMDSwitcherExternalPortType* type) = 0;
    virtual HRESULT GetMixOption (/* out */ BMDSwitcherAudioMixOption* mixOption) = 0;
    virtual HRESULT SetMixOption (/* in */ BMDSwitcherAudioMixOption mixOption) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetBalance (/* out */ double* balance) = 0;
    virtual HRESULT SetBalance (/* in */ double balance) = 0;
    virtual HRESULT IsMixedIn (/* out */ bool* mixedIn) = 0;
    virtual HRESULT GetAudioInputId (/* out */ BMDSwitcherAudioInputId* audioInputId) = 0;
    virtual HRESULT ResetLevelNotificationPeaks (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherAudioInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherAudioInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherAudioInput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioMixerCallback - Audio Mixer Object Callback */

class BMD_PUBLIC IBMDSwitcherAudioMixerCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherAudioMixerEventType eventType) = 0;
    virtual HRESULT ProgramOutLevelNotification (/* in */ double left, /* in */ double right, /* in */ double peakLeft, /* in */ double peakRight) = 0;

protected:
    virtual ~IBMDSwitcherAudioMixerCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioMixer - Audio Mixer Object */

class BMD_PUBLIC IBMDSwitcherAudioMixer : public IUnknown
{
public:
    virtual HRESULT GetProgramOutGain (/* out */ double* gain) = 0;
    virtual HRESULT SetProgramOutGain (/* in */ double gain) = 0;
    virtual HRESULT GetProgramOutBalance (/* out */ double* balance /* [-1.00, 1.00] */) = 0;
    virtual HRESULT SetProgramOutBalance (/* in */ double balance /* [-1.00, 1.00] */) = 0;
    virtual HRESULT GetProgramOutFollowFadeToBlack (/* out */ bool* follow) = 0;
    virtual HRESULT SetProgramOutFollowFadeToBlack (/* in */ bool follow) = 0;
    virtual HRESULT GetAudioFollowVideoCrossfadeTransition (/* out */ bool* transition) = 0;
    virtual HRESULT SetAudioFollowVideoCrossfadeTransition (/* in */ bool transition) = 0;
    virtual HRESULT SetAllLevelNotificationsEnable (/* in */ bool enable) = 0;
    virtual HRESULT ResetProgramOutLevelNotificationPeaks (void) = 0;
    virtual HRESULT ResetAllLevelNotificationPeaks (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherAudioMixerCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherAudioMixerCallback* callback) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;

protected:
    virtual ~IBMDSwitcherAudioMixer () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTalkbackCallback - Talkback Object Callback */

class BMD_PUBLIC IBMDSwitcherTalkbackCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTalkbackEventType eventType, /* in */ BMDSwitcherAudioInputId audioInputId) = 0;

protected:
    virtual ~IBMDSwitcherTalkbackCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTalkback - Talkback Object */

class BMD_PUBLIC IBMDSwitcherTalkback : public IUnknown
{
public:
    virtual HRESULT GetId (/* out */ BMDSwitcherTalkbackId* talkbackId) = 0;
    virtual HRESULT GetMuteSDI (/* out */ bool* muteSDI) = 0;
    virtual HRESULT SetMuteSDI (/* in */ bool muteSDI) = 0;
    virtual HRESULT InputCanMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ bool* canMuteSDI) = 0;
    virtual HRESULT CurrentInputSupportsMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ bool* supportsMuteSDI) = 0;
    virtual HRESULT GetInputMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ bool* muteSDI) = 0;
    virtual HRESULT SetInputMuteSDI (/* in */ BMDSwitcherAudioInputId audioInputId, /* in */ bool muteSDI) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTalkbackCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTalkbackCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTalkback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioHeadphoneOutput - Headphone Output Object */

class BMD_PUBLIC IBMDSwitcherAudioHeadphoneOutput : public IUnknown
{
public:
    virtual HRESULT GetGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputProgramOutGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputProgramOutGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputTalkbackGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputTalkbackGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputSidetoneGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputSidetoneGain (/* in */ double decibel) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherAudioHeadphoneOutputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherAudioHeadphoneOutputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherAudioHeadphoneOutput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioHeadphoneOutputCallback - Headphone Output Object Callback */

class BMD_PUBLIC IBMDSwitcherAudioHeadphoneOutputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherAudioHeadphoneOutputEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherAudioHeadphoneOutputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioLimiterCallback - Fairlight Audio Limiter Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioLimiterCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioLimiterEventType eventType) = 0;
    virtual HRESULT GainReductionLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dB */) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioLimiterCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioLimiter - Fairlight Audio Limiter Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioLimiter : public IUnknown
{
public:
    virtual HRESULT GetEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetThreshold (/* out */ double* decibel) = 0;
    virtual HRESULT SetThreshold (/* in */ double decibel) = 0;
    virtual HRESULT GetAttack (/* out */ double* ms) = 0;
    virtual HRESULT SetAttack (/* in */ double ms) = 0;
    virtual HRESULT GetHold (/* out */ double* ms) = 0;
    virtual HRESULT SetHold (/* in */ double ms) = 0;
    virtual HRESULT GetRelease (/* out */ double* ms) = 0;
    virtual HRESULT SetRelease (/* in */ double ms) = 0;
    virtual HRESULT Reset (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioLimiterCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioLimiterCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioLimiter () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioCompressorCallback - Fairlight Audio Compressor Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioCompressorCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioCompressorEventType eventType) = 0;
    virtual HRESULT GainReductionLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dB */) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioCompressorCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioCompressor - Fairlight Audio Compressor Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioCompressor : public IUnknown
{
public:
    virtual HRESULT GetEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetThreshold (/* out */ double* decibel) = 0;
    virtual HRESULT SetThreshold (/* in */ double decibel) = 0;
    virtual HRESULT GetRatio (/* out */ double* ratio) = 0;
    virtual HRESULT SetRatio (/* in */ double ratio) = 0;
    virtual HRESULT GetAttack (/* out */ double* ms) = 0;
    virtual HRESULT SetAttack (/* in */ double ms) = 0;
    virtual HRESULT GetHold (/* out */ double* ms) = 0;
    virtual HRESULT SetHold (/* in */ double ms) = 0;
    virtual HRESULT GetRelease (/* out */ double* ms) = 0;
    virtual HRESULT SetRelease (/* in */ double ms) = 0;
    virtual HRESULT Reset (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioCompressorCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioCompressorCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioCompressor () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioExpanderCallback - Fairlight Audio Expander Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioExpanderCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioExpanderEventType eventType) = 0;
    virtual HRESULT GainReductionLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dB */) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioExpanderCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioExpander - Fairlight Audio Expander Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioExpander : public IUnknown
{
public:
    virtual HRESULT GetEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetGateMode (/* out */ bool* gateMode) = 0;
    virtual HRESULT SetGateMode (/* in */ bool gateMode) = 0;
    virtual HRESULT GetThreshold (/* out */ double* decibel) = 0;
    virtual HRESULT SetThreshold (/* in */ double decibel) = 0;
    virtual HRESULT GetRange (/* out */ double* range) = 0;
    virtual HRESULT SetRange (/* in */ double range) = 0;
    virtual HRESULT GetRatio (/* out */ double* ratio) = 0;
    virtual HRESULT SetRatio (/* in */ double ratio) = 0;
    virtual HRESULT GetAttack (/* out */ double* ms) = 0;
    virtual HRESULT SetAttack (/* in */ double ms) = 0;
    virtual HRESULT GetHold (/* out */ double* ms) = 0;
    virtual HRESULT SetHold (/* in */ double ms) = 0;
    virtual HRESULT GetRelease (/* out */ double* ms) = 0;
    virtual HRESULT SetRelease (/* in */ double ms) = 0;
    virtual HRESULT Reset (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioExpanderCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioExpanderCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioExpander () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioDynamicsProcessorCallback - Fairlight Audio Dynamics Processor Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioDynamicsProcessorCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioDynamicsProcessorEventType eventType) = 0;
    virtual HRESULT InputLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dBFS */, /* in */ uint32_t numPeakLevels, /* in */ const double* peakLevels /* in dBFS */) = 0;
    virtual HRESULT OutputLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dBFS */, /* in */ uint32_t numPeakLevels, /* in */ const double* peakLevels /* in dBFS */) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioDynamicsProcessorCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioDynamicsProcessor - Fairlight Audio Dynamics Processor Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioDynamicsProcessor : public IUnknown
{
public:
    virtual HRESULT GetProcessor (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT GetMakeupGain (/* out */ double* gain) = 0;
    virtual HRESULT SetMakeupGain (/* in */ double gain) = 0;
    virtual HRESULT Reset (void) = 0;
    virtual HRESULT ResetInputPeakLevels (void) = 0;
    virtual HRESULT ResetOutputPeakLevels (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioDynamicsProcessorCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioDynamicsProcessorCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioDynamicsProcessor () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioEqualizerBandCallback - Fairlight Audio Equalizer Band Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioEqualizerBandCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioEqualizerBandEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioEqualizerBandCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioEqualizerBand - Fairlight Audio Equalizer Band Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioEqualizerBand : public IUnknown
{
public:
    virtual HRESULT GetEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetSupportedShapes (/* out */ BMDSwitcherFairlightAudioEqualizerBandShape* shapes) = 0;
    virtual HRESULT GetShape (/* out */ BMDSwitcherFairlightAudioEqualizerBandShape* shape) = 0;
    virtual HRESULT SetShape (/* in */ BMDSwitcherFairlightAudioEqualizerBandShape shape) = 0;
    virtual HRESULT GetSupportedFrequencyRanges (/* out */ BMDSwitcherFairlightAudioEqualizerBandFrequencyRange* ranges) = 0;
    virtual HRESULT GetFrequencyRange (/* out */ BMDSwitcherFairlightAudioEqualizerBandFrequencyRange* range) = 0;
    virtual HRESULT SetFrequencyRange (/* in */ BMDSwitcherFairlightAudioEqualizerBandFrequencyRange range) = 0;
    virtual HRESULT GetFrequencyRangeMinMax (/* in */ BMDSwitcherFairlightAudioEqualizerBandFrequencyRange range, /* out */ uint32_t* minFreq, /* out */ uint32_t* maxFreq) = 0;
    virtual HRESULT GetFrequency (/* out */ uint32_t* freq) = 0;
    virtual HRESULT SetFrequency (/* in */ uint32_t freq) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetQFactor (/* out */ double* value) = 0;
    virtual HRESULT SetQFactor (/* in */ double value) = 0;
    virtual HRESULT Reset (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioEqualizerBandCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioEqualizerBandCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioEqualizerBand () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioEqualizerBandIterator - Fairlight Audio Equalizer Band Iterator */

class BMD_PUBLIC IBMDSwitcherFairlightAudioEqualizerBandIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherFairlightAudioEqualizerBand** audioEqualizerBand) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioEqualizerBandIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioEqualizerCallback - Fairlight Audio Equalizer Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioEqualizerCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioEqualizerEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioEqualizerCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioEqualizer - Fairlight Audio Equalizer Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioEqualizer : public IUnknown
{
public:
    virtual HRESULT GetEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT Reset (void) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioEqualizerCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioEqualizerCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioEqualizer () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioSourceCallback - Fairlight Audio Source Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioSourceCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioSourceEventType eventType) = 0;
    virtual HRESULT OutputLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dBFS */, /* in */ uint32_t numPeakLevels, /* in */ const double* peakLevels /* in dBFS */) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioSourceCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioSource - Fairlight Audio Source Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioSource : public IUnknown
{
public:
    virtual HRESULT IsActive (/* out */ bool* active) = 0;
    virtual HRESULT GetSourceType (/* out */ BMDSwitcherFairlightAudioSourceType* type) = 0;
    virtual HRESULT GetMaxDelayFrames (/* out */ uint16_t* maxDelay) = 0;
    virtual HRESULT GetDelayFrames (/* out */ uint16_t* delay) = 0;
    virtual HRESULT SetDelayFrames (/* in */ uint16_t delay) = 0;
    virtual HRESULT GetInputGain (/* out */ double* gain) = 0;
    virtual HRESULT SetInputGain (/* in */ double gain) = 0;
    virtual HRESULT HasStereoSimulation (/* out */ bool* hasStereoSimulation) = 0;
    virtual HRESULT GetStereoSimulationIntensity (/* out */ double* intensity) = 0;
    virtual HRESULT SetStereoSimulationIntensity (/* in */ double intensity) = 0;
    virtual HRESULT GetEffect (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT GetPan (/* out */ double* pan) = 0;
    virtual HRESULT SetPan (/* in */ double pan) = 0;
    virtual HRESULT GetFaderGain (/* out */ double* gain) = 0;
    virtual HRESULT SetFaderGain (/* in */ double gain) = 0;
    virtual HRESULT GetSupportedMixOptions (/* out */ BMDSwitcherFairlightAudioMixOption* mixOptions) = 0;
    virtual HRESULT GetMixOption (/* out */ BMDSwitcherFairlightAudioMixOption* mixOption) = 0;
    virtual HRESULT SetMixOption (/* in */ BMDSwitcherFairlightAudioMixOption mixOption) = 0;
    virtual HRESULT IsMixedIn (/* out */ bool* mixedIn) = 0;
    virtual HRESULT ResetOutputPeakLevels (void) = 0;
    virtual HRESULT GetId (/* out */ BMDSwitcherFairlightAudioSourceId* sourceId) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioSourceCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioSourceCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioSource () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioSourceIterator - Fairlight Audio Source Iterator */

class BMD_PUBLIC IBMDSwitcherFairlightAudioSourceIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherFairlightAudioSource** audioSource) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherFairlightAudioSourceId audioSourceId, /* out */ IBMDSwitcherFairlightAudioSource** audioSource) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioSourceIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAnalogAudioInputCallback - Fairlight Analog Audio Input Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAnalogAudioInputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAnalogAudioInputEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAnalogAudioInputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAnalogAudioInput - Fairlight Analog Audio Input Object */

class BMD_PUBLIC IBMDSwitcherFairlightAnalogAudioInput : public IUnknown
{
public:
    virtual HRESULT GetSupportedInputLevels (/* out */ BMDSwitcherFairlightAudioAnalogInputLevel* levels) = 0;
    virtual HRESULT GetInputLevel (/* out */ BMDSwitcherFairlightAudioAnalogInputLevel* level) = 0;
    virtual HRESULT SetInputLevel (/* in */ BMDSwitcherFairlightAudioAnalogInputLevel level) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAnalogAudioInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAnalogAudioInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAnalogAudioInput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioInputCallback - Fairlight Audio Input Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioInputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioInputEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioInputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioInput - Fairlight Audio Input Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioInput : public IUnknown
{
public:
    virtual HRESULT GetType (/* out */ BMDSwitcherFairlightAudioInputType* type) = 0;
    virtual HRESULT GetCurrentExternalPortType (/* out */ BMDSwitcherExternalPortType* type) = 0;
    virtual HRESULT GetSupportedConfigurations (/* out */ BMDSwitcherFairlightAudioInputConfiguration* supportedConfigurations) = 0;
    virtual HRESULT GetConfiguration (/* out */ BMDSwitcherFairlightAudioInputConfiguration* configuration) = 0;
    virtual HRESULT SetConfiguration (/* in */ BMDSwitcherFairlightAudioInputConfiguration configuration) = 0;
    virtual HRESULT GetId (/* out */ BMDSwitcherAudioInputId* id) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioInput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioInputIterator - Fairlight Audio Input Iterator */

class BMD_PUBLIC IBMDSwitcherFairlightAudioInputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherFairlightAudioInput** audioInput) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ IBMDSwitcherFairlightAudioInput** audioInput) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioInputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutputCallback - Fairlight Headphone Output Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioHeadphoneOutputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioHeadphoneOutputEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioHeadphoneOutputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutput - Fairlight Headphone Output Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioHeadphoneOutput : public IUnknown
{
public:
    virtual HRESULT GetGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputMasterOutGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputMasterOutGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputTalkbackGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputTalkbackGain (/* in */ double decibel) = 0;
    virtual HRESULT GetInputSidetoneGain (/* out */ double* decibel) = 0;
    virtual HRESULT SetInputSidetoneGain (/* in */ double decibel) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioHeadphoneOutputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioHeadphoneOutput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioHeadphoneOutputIterator - Fairlight Audio Headphone Output Iterator */

class BMD_PUBLIC IBMDSwitcherFairlightAudioHeadphoneOutputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherFairlightAudioHeadphoneOutput** audioHeadphoneOutput) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioHeadphoneOutputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioMixerCallback - Fairlight Audio Mixer Object Callback */

class BMD_PUBLIC IBMDSwitcherFairlightAudioMixerCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherFairlightAudioMixerEventType eventType) = 0;
    virtual HRESULT MasterOutLevelNotification (/* in */ uint32_t numLevels, /* in */ const double* levels /* in dBFS */, /* in */ uint32_t numPeakLevels, /* in */ const double* peakLevels /* in dBFS */) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioMixerCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFairlightAudioMixer - Fairlight Audio Mixer Object */

class BMD_PUBLIC IBMDSwitcherFairlightAudioMixer : public IUnknown
{
public:
    virtual HRESULT GetMasterOutEffect (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT GetMasterOutFaderGain (/* out */ double* gain) = 0;
    virtual HRESULT SetMasterOutFaderGain (/* in */ double gain) = 0;
    virtual HRESULT GetMasterOutFollowFadeToBlack (/* out */ bool* follow) = 0;
    virtual HRESULT SetMasterOutFollowFadeToBlack (/* in */ bool follow) = 0;
    virtual HRESULT GetAudioFollowVideoCrossfadeTransition (/* out */ bool* transition) = 0;
    virtual HRESULT SetAudioFollowVideoCrossfadeTransition (/* in */ bool transition) = 0;
    virtual HRESULT SetAllLevelNotificationsEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT ResetMasterOutPeakLevels (void) = 0;
    virtual HRESULT ResetAllPeakLevels (void) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherFairlightAudioMixerCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherFairlightAudioMixerCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherFairlightAudioMixer () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyLumaParametersCallback - Luma Key Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyLumaParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyLumaParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyLumaParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyLumaParameters - Luma Key Parameters */

class BMD_PUBLIC IBMDSwitcherKeyLumaParameters : public IUnknown
{
public:
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyLumaParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyLumaParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyLumaParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyChromaParametersCallback - Chroma Key Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyChromaParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyChromaParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyChromaParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyChromaParameters - Chroma Key Parameters */

class BMD_PUBLIC IBMDSwitcherKeyChromaParameters : public IUnknown
{
public:
    virtual HRESULT GetHue (/* out */ double* hue) = 0;	// [0, 360)
    virtual HRESULT SetHue (/* in */ double hue) = 0;	// [0, 360)
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetYSuppress (/* out */ double* ySuppress) = 0;
    virtual HRESULT SetYSuppress (/* in */ double ySuppress) = 0;
    virtual HRESULT GetLift (/* out */ double* lift) = 0;
    virtual HRESULT SetLift (/* in */ double lift) = 0;
    virtual HRESULT GetNarrow (/* out */ bool* narrow) = 0;
    virtual HRESULT SetNarrow (/* in */ bool narrow) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyChromaParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyChromaParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyChromaParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyAdvancedChromaParametersCallback - Advanced Chroma Key Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyAdvancedChromaParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyAdvancedChromaParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyAdvancedChromaParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyAdvancedChromaParameters - Advanced Chroma Key Parameters */

class BMD_PUBLIC IBMDSwitcherKeyAdvancedChromaParameters : public IUnknown
{
public:
    virtual HRESULT GetForegroundLevel (/* out */ double* level) = 0;
    virtual HRESULT SetForegroundLevel (/* in */ double level) = 0;
    virtual HRESULT GetBackgroundLevel (/* out */ double* level) = 0;
    virtual HRESULT SetBackgroundLevel (/* in */ double level) = 0;
    virtual HRESULT GetKeyEdge (/* out */ double* keyEdge) = 0;
    virtual HRESULT SetKeyEdge (/* in */ double keyEdge) = 0;
    virtual HRESULT GetSpillSuppress (/* out */ double* spillSuppress) = 0;
    virtual HRESULT SetSpillSuppress (/* in */ double spillSuppress) = 0;
    virtual HRESULT GetFlareSuppress (/* out */ double* flareSuppress) = 0;
    virtual HRESULT SetFlareSuppress (/* in */ double flareSuppress) = 0;
    virtual HRESULT GetBrightness (/* out */ double* brightness) = 0;
    virtual HRESULT SetBrightness (/* in */ double brightness) = 0;
    virtual HRESULT GetContrast (/* out */ double* contrast) = 0;
    virtual HRESULT SetContrast (/* in */ double contrast) = 0;
    virtual HRESULT GetSaturation (/* out */ double* saturation) = 0;
    virtual HRESULT SetSaturation (/* in */ double saturation) = 0;
    virtual HRESULT GetRed (/* out */ double* red) = 0;
    virtual HRESULT SetRed (/* in */ double red) = 0;
    virtual HRESULT GetGreen (/* out */ double* green) = 0;
    virtual HRESULT SetGreen (/* in */ double green) = 0;
    virtual HRESULT GetBlue (/* out */ double* blue) = 0;
    virtual HRESULT SetBlue (/* in */ double blue) = 0;
    virtual HRESULT GetSamplingModeEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetSamplingModeEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetPreviewEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetPreviewEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetCursorXPosition (/* out */ double* position) = 0;
    virtual HRESULT SetCursorXPosition (/* in */ double position) = 0;
    virtual HRESULT GetCursorYPosition (/* out */ double* position) = 0;
    virtual HRESULT SetCursorYPosition (/* in */ double position) = 0;
    virtual HRESULT GetCursorSize (/* out */ double* size) = 0;
    virtual HRESULT SetCursorSize (/* in */ double size) = 0;
    virtual HRESULT GetSampledColor (/* out */ double* y, /* out */ double* cb, /* out */ double* cr) = 0;
    virtual HRESULT SetSampledColor (/* in */ double y, /* in */ double cb, /* in */ double cr) = 0;
    virtual HRESULT ResetKeyAdjustments (void) = 0;	// Resets Foreground Level, Background Level, and Key Edge
    virtual HRESULT ResetChromaCorrection (void) = 0;	// Resets Spill Suppress and Flare Suppress
    virtual HRESULT ResetColorAdjustments (void) = 0;	// Resets Brightness, Contrast, Saturation, Red, Green, and Blue
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyAdvancedChromaParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyAdvancedChromaParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyAdvancedChromaParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyPatternParametersCallback - Pattern Key Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyPatternParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyPatternParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyPatternParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyPatternParameters - Pattern Key Parameters */

class BMD_PUBLIC IBMDSwitcherKeyPatternParameters : public IUnknown
{
public:
    virtual HRESULT GetPattern (/* out */ BMDSwitcherPatternStyle* pattern) = 0;
    virtual HRESULT SetPattern (/* in */ BMDSwitcherPatternStyle pattern) = 0;
    virtual HRESULT GetSize (/* out */ double* size) = 0;
    virtual HRESULT SetSize (/* in */ double size) = 0;
    virtual HRESULT GetSymmetry (/* out */ double* symmetry) = 0;
    virtual HRESULT SetSymmetry (/* in */ double symmetry) = 0;
    virtual HRESULT GetSoftness (/* out */ double* softness) = 0;
    virtual HRESULT SetSoftness (/* in */ double softness) = 0;
    virtual HRESULT GetHorizontalOffset (/* out */ double* hOffset) = 0;
    virtual HRESULT SetHorizontalOffset (/* in */ double hOffset) = 0;
    virtual HRESULT GetVerticalOffset (/* out */ double* vOffset) = 0;
    virtual HRESULT SetVerticalOffset (/* in */ double vOffset) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyPatternParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyPatternParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyPatternParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyFlyKeyFrameParametersCallback - Key Fly Frame Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyFlyKeyFrameParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyFlyKeyFrameParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyFlyKeyFrameParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyFlyKeyFrameParameters - Key Fly Frame Parameters */

class BMD_PUBLIC IBMDSwitcherKeyFlyKeyFrameParameters : public IUnknown
{
public:
    virtual HRESULT GetSizeX (/* out */ double* multiplierX) = 0;
    virtual HRESULT SetSizeX (/* in */ double multiplierX) = 0;
    virtual HRESULT GetSizeY (/* out */ double* multiplierY) = 0;
    virtual HRESULT SetSizeY (/* in */ double multiplierY) = 0;
    virtual HRESULT GetCanScaleUp (/* out */ bool* canScaleUp) = 0;
    virtual HRESULT GetPositionX (/* out */ double* offsetX) = 0;
    virtual HRESULT SetPositionX (/* in */ double offsetX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* offsetY) = 0;
    virtual HRESULT SetPositionY (/* in */ double offsetY) = 0;
    virtual HRESULT GetRotation (/* out */ double* degrees) = 0;
    virtual HRESULT SetRotation (/* in */ double degrees) = 0;
    virtual HRESULT GetCanRotate (/* out */ bool* canRotate) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softIn) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoft) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoft) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetBorderOpacity (/* in */ double opacity) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue /* [0, 360) */) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue /* [0, 360) */) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetBorderLightSourceDirection (/* out */ double* degrees /* [0, 360) */) = 0;
    virtual HRESULT SetBorderLightSourceDirection (/* in */ double degrees /* [0, 360) */) = 0;
    virtual HRESULT GetBorderLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetBorderLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyFlyKeyFrameParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyFlyKeyFrameParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyFlyParametersCallback - Key Fly Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyFlyParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyFlyParametersEventType eventType, /* in */ BMDSwitcherFlyKeyFrame keyFrame /* Only used when eventType is bmdSwitcherFlyParametersEventTypeIsKeyFrameStoredChanged */) = 0;

protected:
    virtual ~IBMDSwitcherKeyFlyParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyFlyParameters - Key Fly Parameters */

class BMD_PUBLIC IBMDSwitcherKeyFlyParameters : public IUnknown
{
public:
    virtual HRESULT GetFly (/* out */ bool* isFlyKey) = 0;
    virtual HRESULT SetFly (/* in */ bool isFlyKey) = 0;
    virtual HRESULT GetCanFly (/* out */ bool* canFly) = 0;
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetSizeX (/* out */ double* multiplierX) = 0;
    virtual HRESULT SetSizeX (/* in */ double multiplierX) = 0;
    virtual HRESULT GetSizeY (/* out */ double* multiplierY) = 0;
    virtual HRESULT SetSizeY (/* in */ double multiplierY) = 0;
    virtual HRESULT GetCanScaleUp (/* out */ bool* canScaleUp) = 0;
    virtual HRESULT GetPositionX (/* out */ double* offsetX) = 0;
    virtual HRESULT SetPositionX (/* in */ double offsetX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* offsetY) = 0;
    virtual HRESULT SetPositionY (/* in */ double offsetY) = 0;
    virtual HRESULT GetRotation (/* out */ double* degrees) = 0;
    virtual HRESULT SetRotation (/* in */ double degrees) = 0;
    virtual HRESULT GetCanRotate (/* out */ bool* canRotate) = 0;
    virtual HRESULT ResetRotation (void) = 0;
    virtual HRESULT ResetDVE (void) = 0;	// Resets all DVE parameters, excluding mask
    virtual HRESULT ResetDVEFull (void) = 0;	// Resets all DVE parameters to full screen, excluding mask
    virtual HRESULT IsKeyFrameStored (/* in */ BMDSwitcherFlyKeyFrame keyFrame, /* out */ bool* stored) = 0;
    virtual HRESULT StoreAsKeyFrame (/* in */ BMDSwitcherFlyKeyFrame keyFrame) = 0;	// Stores current state into the specified Key Frame(s), only Key Frame A and/or B can be specified.
    virtual HRESULT ClearKeyFrame (/* in */ BMDSwitcherFlyKeyFrame keyFrame) = 0;	// Clears the specified Key Frame(s), only Key Frame A and/or B can be specified.
    virtual HRESULT RunToKeyFrame (/* in */ BMDSwitcherFlyKeyFrame destination) = 0;	// Can only specify 1 Key Frame destination
    virtual HRESULT IsAtKeyFrames (/* out */ BMDSwitcherFlyKeyFrame* keyFrames) = 0;
    virtual HRESULT GetKeyFrameParameters (/* in */ BMDSwitcherFlyKeyFrame keyFrame, /* out */ IBMDSwitcherKeyFlyKeyFrameParameters** keyFrameParameters) = 0;
    virtual HRESULT IsRunning (/* out */ bool* isRunning, /* out */ BMDSwitcherFlyKeyFrame* destination) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyFlyParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyFlyParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyFlyParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyDVEParametersCallback - DVE Key Parameters Callback */

class BMD_PUBLIC IBMDSwitcherKeyDVEParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyDVEParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyDVEParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyDVEParameters - DVE Key Parameters */

class BMD_PUBLIC IBMDSwitcherKeyDVEParameters : public IUnknown
{
public:
    virtual HRESULT GetShadow (/* out */ bool* shadowOn) = 0;
    virtual HRESULT SetShadow (/* in */ bool shadowOn) = 0;
    virtual HRESULT GetLightSourceDirection (/* out */ double* degrees /* [0, 360) */) = 0;
    virtual HRESULT SetLightSourceDirection (/* in */ double degrees /* [0, 360) */) = 0;
    virtual HRESULT GetLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT GetBorderEnabled (/* out */ bool* on) = 0;
    virtual HRESULT SetBorderEnabled (/* in */ bool on) = 0;
    virtual HRESULT GetBorderBevel (/* out */ BMDSwitcherBorderBevelOption* bevelOption) = 0;
    virtual HRESULT SetBorderBevel (/* in */ BMDSwitcherBorderBevelOption bevelOption) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softOut) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoft) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoft) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetBorderOpacity (/* in */ double opacity) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue /* [0, 360) */) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue /* [0, 360) */) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetMasked (/* out */ bool* maskEnabled) = 0;
    virtual HRESULT SetMasked (/* in */ bool maskEnabled) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT ResetMask (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyDVEParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyDVEParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKeyDVEParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyCallback - Key Object Callback */

class BMD_PUBLIC IBMDSwitcherKeyCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherKeyEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherKeyCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKey - Key Object */

class BMD_PUBLIC IBMDSwitcherKey : public IUnknown
{
public:
    virtual HRESULT DoesSupportAdvancedChroma (/* out */ bool* supportsAdvancedChroma) = 0;
    virtual HRESULT GetType (/* out */ BMDSwitcherKeyType* type) = 0;
    virtual HRESULT SetType (/* in */ BMDSwitcherKeyType type) = 0;
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT GetOnAir (/* out */ bool* onAir) = 0;
    virtual HRESULT SetOnAir (/* in */ bool onAir) = 0;
    virtual HRESULT CanBeDVEKey (/* out */ bool* canDVE) = 0;
    virtual HRESULT GetMasked (/* out */ bool* maskEnabled) = 0;
    virtual HRESULT SetMasked (/* in */ bool maskEnabled) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT ResetMask (void) = 0;
    virtual HRESULT GetTransitionSelectionMask (/* out */ BMDSwitcherTransitionSelection* selectionMask) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherKeyCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherKeyCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherKey () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPlayerCallback - Media Player Callback */

class BMD_PUBLIC IBMDSwitcherMediaPlayerCallback : public IUnknown
{
public:
    virtual HRESULT SourceChanged (void) = 0;
    virtual HRESULT PlayingChanged (void) = 0;
    virtual HRESULT LoopChanged (void) = 0;
    virtual HRESULT AtBeginningChanged (void) = 0;
    virtual HRESULT ClipFrameChanged (void) = 0;

protected:
    virtual ~IBMDSwitcherMediaPlayerCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPlayer - Media Player */

class BMD_PUBLIC IBMDSwitcherMediaPlayer : public IUnknown
{
public:
    virtual HRESULT GetSource (/* out */ BMDSwitcherMediaPlayerSourceType* type, /* out */ uint32_t* index) = 0;
    virtual HRESULT SetSource (/* in */ BMDSwitcherMediaPlayerSourceType type, /* in */ uint32_t index) = 0;
    virtual HRESULT GetPlaying (/* out */ bool* playing) = 0;
    virtual HRESULT SetPlaying (/* in */ bool playing) = 0;
    virtual HRESULT GetLoop (/* out */ bool* loop) = 0;
    virtual HRESULT SetLoop (/* in */ bool loop) = 0;
    virtual HRESULT GetAtBeginning (/* out */ bool* atBegining) = 0;
    virtual HRESULT SetAtBeginning (void) = 0;
    virtual HRESULT GetClipFrame (/* out */ uint32_t* clipFrameIndex) = 0;
    virtual HRESULT SetClipFrame (/* in */ uint32_t clipFrameIndex) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMediaPlayerCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMediaPlayerCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMediaPlayer () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionMixParametersCallback - Transition Mix Parameters Callback */

class BMD_PUBLIC IBMDSwitcherTransitionMixParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTransitionMixParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTransitionMixParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionMixParameters - Transition Mix Parameters */

class BMD_PUBLIC IBMDSwitcherTransitionMixParameters : public IUnknown
{
public:
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionMixParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionMixParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionMixParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionDipParametersCallback - Transition Dip Parameters Callback */

class BMD_PUBLIC IBMDSwitcherTransitionDipParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTransitionDipParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTransitionDipParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionDipParameters - Transition Dip Parameters */

class BMD_PUBLIC IBMDSwitcherTransitionDipParameters : public IUnknown
{
public:
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetInputDip (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputDip (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionDipParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionDipParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionDipParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionWipeParametersCallback - Transition Wipe Parameters Callback */

class BMD_PUBLIC IBMDSwitcherTransitionWipeParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTransitionWipeParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTransitionWipeParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionWipeParameters - Transition Wipe Parameters */

class BMD_PUBLIC IBMDSwitcherTransitionWipeParameters : public IUnknown
{
public:
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetPattern (/* out */ BMDSwitcherPatternStyle* pattern) = 0;
    virtual HRESULT SetPattern (/* in */ BMDSwitcherPatternStyle pattern) = 0;
    virtual HRESULT GetBorderSize (/* out */ double* size) = 0;
    virtual HRESULT SetBorderSize (/* in */ double size) = 0;
    virtual HRESULT GetInputBorder (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputBorder (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetSymmetry (/* out */ double* symmetry) = 0;
    virtual HRESULT SetSymmetry (/* in */ double symmetry) = 0;
    virtual HRESULT GetSoftness (/* out */ double* soft) = 0;
    virtual HRESULT SetSoftness (/* in */ double soft) = 0;
    virtual HRESULT GetHorizontalOffset (/* out */ double* hOffset) = 0;
    virtual HRESULT SetHorizontalOffset (/* in */ double hOffset) = 0;
    virtual HRESULT GetVerticalOffset (/* out */ double* vOffset) = 0;
    virtual HRESULT SetVerticalOffset (/* in */ double vOffset) = 0;
    virtual HRESULT GetReverse (/* out */ bool* reverse) = 0;
    virtual HRESULT SetReverse (/* in */ bool reverse) = 0;
    virtual HRESULT GetFlipFlop (/* out */ bool* flipflop) = 0;
    virtual HRESULT SetFlipFlop (/* in */ bool flipflop) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionWipeParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionWipeParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionWipeParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionDVEParametersCallback - Transition DVE Parameters Callback */

class BMD_PUBLIC IBMDSwitcherTransitionDVEParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTransitionDVEParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTransitionDVEParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionDVEParameters - Transition DVE Parameters */

class BMD_PUBLIC IBMDSwitcherTransitionDVEParameters : public IUnknown
{
public:
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetLogoRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetLogoRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetReverse (/* out */ bool* reverse) = 0;
    virtual HRESULT SetReverse (/* in */ bool reverse) = 0;
    virtual HRESULT GetFlipFlop (/* out */ bool* flipflop) = 0;
    virtual HRESULT SetFlipFlop (/* in */ bool flipflop) = 0;
    virtual HRESULT GetStyle (/* out */ BMDSwitcherDVETransitionStyle* style) = 0;
    virtual HRESULT SetStyle (/* in */ BMDSwitcherDVETransitionStyle style) = 0;
    virtual HRESULT DoesSupportStyle (/* in */ BMDSwitcherDVETransitionStyle style, /* out */ bool* supported) = 0;
    virtual HRESULT GetNumSupportedStyles (/* out */ uint32_t* numSupportedStyles) = 0;
    virtual HRESULT GetSupportedStyles (/* out */ BMDSwitcherDVETransitionStyle* supportedStyles, /* in */ uint32_t supportedStylesMaxCount) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetEnableKey (/* out */ bool* enableKey) = 0;
    virtual HRESULT SetEnableKey (/* in */ bool enableKey) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionDVEParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionDVEParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionDVEParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionStingerParametersCallback - Transition Stinger Parameters Callback */

class BMD_PUBLIC IBMDSwitcherTransitionStingerParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTransitionStingerParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTransitionStingerParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionStingerParameters - Transition Stinger Parameters */

class BMD_PUBLIC IBMDSwitcherTransitionStingerParameters : public IUnknown
{
public:
    virtual HRESULT GetSource (/* out */ BMDSwitcherStingerTransitionSource* src) = 0;
    virtual HRESULT SetSource (/* in */ BMDSwitcherStingerTransitionSource src) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT GetPreroll (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetPreroll (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetClipDuration (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetClipDuration (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetTriggerPoint (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetTriggerPoint (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetMixRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetMixRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionStingerParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionStingerParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionStingerParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionParametersCallback - Transition Parameters Object Callback */

class BMD_PUBLIC IBMDSwitcherTransitionParametersCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherTransitionParametersEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherTransitionParametersCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransitionParameters - Transition Parameters Object */

class BMD_PUBLIC IBMDSwitcherTransitionParameters : public IUnknown
{
public:
    virtual HRESULT GetTransitionStyle (/* out */ BMDSwitcherTransitionStyle* style) = 0;
    virtual HRESULT GetNextTransitionStyle (/* out */ BMDSwitcherTransitionStyle* style) = 0;
    virtual HRESULT SetNextTransitionStyle (/* in */ BMDSwitcherTransitionStyle style) = 0;
    virtual HRESULT GetTransitionSelection (/* out */ BMDSwitcherTransitionSelection* selection) = 0;
    virtual HRESULT SetNextTransitionSelection (/* in */ BMDSwitcherTransitionSelection selection) = 0;
    virtual HRESULT GetNextTransitionSelection (/* out */ BMDSwitcherTransitionSelection* selection) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherTransitionParametersCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherTransitionParametersCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherTransitionParameters () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixEffectBlockCallback - Mix Effect Block Notification Callback */

class BMD_PUBLIC IBMDSwitcherMixEffectBlockCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMixEffectBlockEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherMixEffectBlockCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixEffectBlock - Mix Effect Block */

class BMD_PUBLIC IBMDSwitcherMixEffectBlock : public IUnknown
{
public:
    virtual HRESULT GetProgramInput (/* out */ BMDSwitcherInputId* value) = 0;
    virtual HRESULT SetProgramInput (/* in */ BMDSwitcherInputId value) = 0;
    virtual HRESULT GetPreviewInput (/* out */ BMDSwitcherInputId* value) = 0;
    virtual HRESULT SetPreviewInput (/* in */ BMDSwitcherInputId value) = 0;
    virtual HRESULT GetPreviewLive (/* out */ bool* value) = 0;
    virtual HRESULT GetPreviewTransition (/* out */ bool* value) = 0;
    virtual HRESULT SetPreviewTransition (/* in */ bool value) = 0;
    virtual HRESULT PerformAutoTransition (void) = 0;
    virtual HRESULT PerformCut (void) = 0;
    virtual HRESULT GetInTransition (/* out */ bool* value) = 0;
    virtual HRESULT GetTransitionPosition (/* out */ double* value) = 0;
    virtual HRESULT SetTransitionPosition (/* in */ double value) = 0;
    virtual HRESULT GetTransitionFramesRemaining (/* out */ uint32_t* value) = 0;
    virtual HRESULT PerformFadeToBlack (void) = 0;
    virtual HRESULT GetFadeToBlackRate (/* out */ uint32_t* value) = 0;
    virtual HRESULT SetFadeToBlackRate (/* in */ uint32_t value) = 0;
    virtual HRESULT GetFadeToBlackFramesRemaining (/* out */ uint32_t* value) = 0;
    virtual HRESULT GetFadeToBlackFullyBlack (/* out */ bool* value) = 0;
    virtual HRESULT SetFadeToBlackFullyBlack (/* in */ bool value) = 0;
    virtual HRESULT GetInFadeToBlack (/* out */ bool* value) = 0;
    virtual HRESULT GetFadeToBlackInTransition (/* out */ bool* value) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* value) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMixEffectBlockCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMixEffectBlockCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMixEffectBlock () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputCallback - Switcher Input Object Callback */

class BMD_PUBLIC IBMDSwitcherInputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherInputEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherInputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInput - Switcher Input Object */

class BMD_PUBLIC IBMDSwitcherInput : public IUnknown
{
public:
    virtual HRESULT GetPortType (/* out */ BMDSwitcherPortType* type) = 0;
    virtual HRESULT GetInputAvailability (/* out */ BMDSwitcherInputAvailability* availability) = 0;
    virtual HRESULT SetShortName (/* in */ CFStringRef name) = 0;
    virtual HRESULT GetShortName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT SetLongName (/* in */ CFStringRef name) = 0;
    virtual HRESULT GetLongName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT AreNamesDefault (/* in */ bool* isDefault) = 0;
    virtual HRESULT ResetNames (void) = 0;
    virtual HRESULT IsProgramTallied (/* out */ bool* isTallied) = 0;
    virtual HRESULT IsPreviewTallied (/* out */ bool* isTallied) = 0;
    virtual HRESULT GetAvailableExternalPortTypes (/* out */ BMDSwitcherExternalPortType* types) = 0;
    virtual HRESULT SetCurrentExternalPortType (/* in */ BMDSwitcherExternalPortType value) = 0;
    virtual HRESULT GetCurrentExternalPortType (/* out */ BMDSwitcherExternalPortType* value) = 0;
    virtual HRESULT GetInputId (/* out */ BMDSwitcherInputId* inputId) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherInput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputColorCallback - Color Input Object Callback */

class BMD_PUBLIC IBMDSwitcherInputColorCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherInputColorEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherInputColorCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputColor - Color Input Object */

class BMD_PUBLIC IBMDSwitcherInputColor : public IUnknown
{
public:
    virtual HRESULT GetHue (/* out */ double* hue) = 0;
    virtual HRESULT SetHue (/* in */ double hue) = 0;
    virtual HRESULT GetSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetLuma (/* in */ double luma) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputColorCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputColorCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherInputColor () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputAuxCallback - Aux Input Object Callback */

class BMD_PUBLIC IBMDSwitcherInputAuxCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherInputAuxEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherInputAuxCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputAux - Aux Input Object */

class BMD_PUBLIC IBMDSwitcherInputAux : public IUnknown
{
public:
    virtual HRESULT GetInputSource (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputSource (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputAuxCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputAuxCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherInputAux () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSuperSourceBoxCallback - SuperSource Box Object Callback */

class BMD_PUBLIC IBMDSwitcherSuperSourceBoxCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherSuperSourceBoxEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherSuperSourceBoxCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSuperSourceBox - SuperSource Box Object */

class BMD_PUBLIC IBMDSwitcherSuperSourceBox : public IUnknown
{
public:
    virtual HRESULT GetEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetInputSource (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputSource (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetPositionX (/* out */ double* positionX) = 0;
    virtual HRESULT SetPositionX (/* in */ double positionX) = 0;
    virtual HRESULT GetPositionY (/* out */ double* positionY) = 0;
    virtual HRESULT SetPositionY (/* in */ double positionY) = 0;
    virtual HRESULT GetSize (/* out */ double* size) = 0;
    virtual HRESULT SetSize (/* in */ double size) = 0;
    virtual HRESULT GetCropped (/* out */ bool* cropped) = 0;
    virtual HRESULT SetCropped (/* in */ bool cropped) = 0;
    virtual HRESULT GetCropTop (/* out */ double* top) = 0;
    virtual HRESULT SetCropTop (/* in */ double top) = 0;
    virtual HRESULT GetCropBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetCropBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetCropLeft (/* out */ double* left) = 0;
    virtual HRESULT SetCropLeft (/* in */ double left) = 0;
    virtual HRESULT GetCropRight (/* out */ double* right) = 0;
    virtual HRESULT SetCropRight (/* in */ double right) = 0;
    virtual HRESULT ResetCrop (void) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherSuperSourceBoxCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherSuperSourceBoxCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherSuperSourceBox () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSuperSourceBorderCallback - SuperSource Border Object Callback */

class BMD_PUBLIC IBMDSwitcherSuperSourceBorderCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherSuperSourceBorderEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherSuperSourceBorderCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSuperSourceBorder - SuperSource Border Object */

class BMD_PUBLIC IBMDSwitcherSuperSourceBorder : public IUnknown
{
public:
    virtual HRESULT GetBorderEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT SetBorderEnabled (/* in */ bool enabled) = 0;
    virtual HRESULT GetBorderBevel (/* out */ BMDSwitcherBorderBevelOption* bevelOption) = 0;
    virtual HRESULT SetBorderBevel (/* in */ BMDSwitcherBorderBevelOption bevelOption) = 0;
    virtual HRESULT GetBorderWidthOut (/* out */ double* widthOut) = 0;
    virtual HRESULT SetBorderWidthOut (/* in */ double widthOut) = 0;
    virtual HRESULT GetBorderWidthIn (/* out */ double* widthIn) = 0;
    virtual HRESULT SetBorderWidthIn (/* in */ double widthIn) = 0;
    virtual HRESULT GetBorderSoftnessOut (/* out */ double* softnessOut) = 0;
    virtual HRESULT SetBorderSoftnessOut (/* in */ double softnessOut) = 0;
    virtual HRESULT GetBorderSoftnessIn (/* out */ double* softnessIn) = 0;
    virtual HRESULT SetBorderSoftnessIn (/* in */ double softnessIn) = 0;
    virtual HRESULT GetBorderBevelSoftness (/* out */ double* bevelSoftness) = 0;
    virtual HRESULT SetBorderBevelSoftness (/* in */ double bevelSoftness) = 0;
    virtual HRESULT GetBorderBevelPosition (/* out */ double* bevelPosition) = 0;
    virtual HRESULT SetBorderBevelPosition (/* in */ double bevelPosition) = 0;
    virtual HRESULT GetBorderHue (/* out */ double* hue /* [0, 360) */) = 0;
    virtual HRESULT SetBorderHue (/* in */ double hue /* [0, 360) */) = 0;
    virtual HRESULT GetBorderSaturation (/* out */ double* sat) = 0;
    virtual HRESULT SetBorderSaturation (/* in */ double sat) = 0;
    virtual HRESULT GetBorderLuma (/* out */ double* luma) = 0;
    virtual HRESULT SetBorderLuma (/* in */ double luma) = 0;
    virtual HRESULT GetBorderLightSourceDirection (/* out */ double* degrees) = 0;
    virtual HRESULT SetBorderLightSourceDirection (/* in */ double degrees) = 0;
    virtual HRESULT GetBorderLightSourceAltitude (/* out */ double* altitude) = 0;
    virtual HRESULT SetBorderLightSourceAltitude (/* in */ double altitude) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherSuperSourceBorderCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherSuperSourceBorderCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherSuperSourceBorder () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputSuperSourceCallback - SuperSource Input Object Callback */

class BMD_PUBLIC IBMDSwitcherInputSuperSourceCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherInputSuperSourceEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherInputSuperSourceCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputSuperSource - SuperSource Input Object */

class BMD_PUBLIC IBMDSwitcherInputSuperSource : public IUnknown
{
public:
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* mask) = 0;
    virtual HRESULT GetArtOption (/* out */ BMDSwitcherSuperSourceArtOption* artOption) = 0;
    virtual HRESULT SetArtOption (/* in */ BMDSwitcherSuperSourceArtOption artOption) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT SupportsBorder (/* out */ bool* supportsBorder) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherInputSuperSourceCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherInputSuperSourceCallback* callback) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;

protected:
    virtual ~IBMDSwitcherInputSuperSource () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMultiViewCallback - MultiView Object Callback */

class BMD_PUBLIC IBMDSwitcherMultiViewCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMultiViewEventType eventType, /* in */ int32_t window) = 0;

protected:
    virtual ~IBMDSwitcherMultiViewCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMultiView - MultiView Object */

class BMD_PUBLIC IBMDSwitcherMultiView : public IUnknown
{
public:
    virtual HRESULT CanChangeLayout (/* out */ bool* canChangeLayout) = 0;
    virtual HRESULT GetLayout (/* out */ BMDSwitcherMultiViewLayout* layout) = 0;
    virtual HRESULT SetLayout (/* in */ BMDSwitcherMultiViewLayout layout) = 0;
    virtual HRESULT SupportsQuadrantLayout (/* out */ bool* supportsQuadrantLayout) = 0;
    virtual HRESULT GetWindowInput (/* in */ uint32_t window, /* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetWindowInput (/* in */ uint32_t window, /* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetWindowCount (/* out */ uint32_t* windowCount) = 0;
    virtual HRESULT GetInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT CanRouteInputs (/* out */ bool* canRoute) = 0;
    virtual HRESULT SupportsVuMeters (/* out */ bool* supportsVuMeters) = 0;
    virtual HRESULT CurrentInputSupportsVuMeter (/* in */ uint32_t window, /* out */ bool* supportsVuMeter) = 0;
    virtual HRESULT GetVuMeterEnabled (/* in */ uint32_t window, /* out */ bool* enabled) = 0;
    virtual HRESULT SetVuMeterEnabled (/* in */ uint32_t window, /* in */ bool enabled) = 0;
    virtual HRESULT CanAdjustVuMeterOpacity (/* out */ bool* canAdjustVuMeterOpacity) = 0;
    virtual HRESULT GetVuMeterOpacity (/* out */ double* opacity) = 0;
    virtual HRESULT SetVuMeterOpacity (/* in */ double opacity) = 0;
    virtual HRESULT CanToggleSafeAreaEnabled (/* out */ bool* canToggleSafeAreaEnabled) = 0;
    virtual HRESULT CurrentInputSupportsSafeArea (/* in */ uint32_t window, /* out */ bool* supportsSafeArea) = 0;
    virtual HRESULT GetSafeAreaEnabled (/* in */ uint32_t window, /* out */ bool* enabled) = 0;
    virtual HRESULT SetSafeAreaEnabled (/* in */ uint32_t window, /* in */ bool enabled) = 0;
    virtual HRESULT SupportsProgramPreviewSwap (/* out */ bool* supportsProgramPreviewSwap) = 0;
    virtual HRESULT GetProgramPreviewSwapped (/* out */ bool* swapped) = 0;
    virtual HRESULT SetProgramPreviewSwapped (/* in */ bool swapped) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMultiViewCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMultiViewCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMultiView () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDownstreamKeyCallback - Downstream Key Object Callback */

class BMD_PUBLIC IBMDSwitcherDownstreamKeyCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherDownstreamKeyEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherDownstreamKeyCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDownstreamKey - Downstream Key Object */

class BMD_PUBLIC IBMDSwitcherDownstreamKey : public IUnknown
{
public:
    virtual HRESULT GetInputCut (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputCut (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetInputFill (/* out */ BMDSwitcherInputId* input) = 0;
    virtual HRESULT SetInputFill (/* in */ BMDSwitcherInputId input) = 0;
    virtual HRESULT GetCutInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT GetFillInputAvailabilityMask (/* out */ BMDSwitcherInputAvailability* availabilityMask) = 0;
    virtual HRESULT GetTie (/* out */ bool* tie) = 0;
    virtual HRESULT SetTie (/* in */ bool tie) = 0;
    virtual HRESULT GetRate (/* out */ uint32_t* frames) = 0;
    virtual HRESULT SetRate (/* in */ uint32_t frames) = 0;
    virtual HRESULT GetOnAir (/* out */ bool* onAir) = 0;
    virtual HRESULT SetOnAir (/* in */ bool onAir) = 0;
    virtual HRESULT PerformAutoTransition (void) = 0;
    virtual HRESULT PerformAutoTransitionInDirection (/* in */ bool towardsOnAir) = 0;
    virtual HRESULT IsTransitioning (/* out */ bool* isTransitioning) = 0;
    virtual HRESULT IsAutoTransitioning (/* out */ bool* isAutoTransitioning) = 0;
    virtual HRESULT IsTransitionTowardsOnAir (/* out */ bool* isTransitionTowardsOnAir) = 0;
    virtual HRESULT GetFramesRemaining (/* out */ uint32_t* framesRemaining) = 0;
    virtual HRESULT GetPreMultiplied (/* out */ bool* preMultiplied) = 0;
    virtual HRESULT SetPreMultiplied (/* in */ bool preMultiplied) = 0;
    virtual HRESULT GetClip (/* out */ double* clip) = 0;
    virtual HRESULT SetClip (/* in */ double clip) = 0;
    virtual HRESULT GetGain (/* out */ double* gain) = 0;
    virtual HRESULT SetGain (/* in */ double gain) = 0;
    virtual HRESULT GetInverse (/* out */ bool* inverse) = 0;
    virtual HRESULT SetInverse (/* in */ bool inverse) = 0;
    virtual HRESULT GetMasked (/* out */ bool* maskEnabled) = 0;
    virtual HRESULT SetMasked (/* in */ bool maskEnabled) = 0;
    virtual HRESULT GetMaskTop (/* out */ double* top) = 0;
    virtual HRESULT SetMaskTop (/* in */ double top) = 0;
    virtual HRESULT GetMaskBottom (/* out */ double* bottom) = 0;
    virtual HRESULT SetMaskBottom (/* in */ double bottom) = 0;
    virtual HRESULT GetMaskLeft (/* out */ double* left) = 0;
    virtual HRESULT SetMaskLeft (/* in */ double left) = 0;
    virtual HRESULT GetMaskRight (/* out */ double* right) = 0;
    virtual HRESULT SetMaskRight (/* in */ double right) = 0;
    virtual HRESULT ResetMask (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherDownstreamKeyCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherDownstreamKeyCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherDownstreamKey () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherInputIterator - Input Iterator */

class BMD_PUBLIC IBMDSwitcherInputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherInput** input) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherInputId inputId, /* out */ IBMDSwitcherInput** input) = 0;

protected:
    virtual ~IBMDSwitcherInputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSuperSourceBoxIterator - SuperSource Box Iterator */

class BMD_PUBLIC IBMDSwitcherSuperSourceBoxIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherSuperSourceBox** box) = 0;

protected:
    virtual ~IBMDSwitcherSuperSourceBoxIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixEffectBlockIterator - Mix Effect Block Iterator */

class BMD_PUBLIC IBMDSwitcherMixEffectBlockIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMixEffectBlock** mixEffectBlock) = 0;

protected:
    virtual ~IBMDSwitcherMixEffectBlockIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDownstreamKeyIterator - Downstream Key Iterator */

class BMD_PUBLIC IBMDSwitcherDownstreamKeyIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherDownstreamKey** downstreamKey) = 0;

protected:
    virtual ~IBMDSwitcherDownstreamKeyIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherKeyIterator - Key Iterator */

class BMD_PUBLIC IBMDSwitcherKeyIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherKey** key) = 0;

protected:
    virtual ~IBMDSwitcherKeyIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPlayerIterator - Media Player Iterator */

class BMD_PUBLIC IBMDSwitcherMediaPlayerIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMediaPlayer** mediaPlayer) = 0;

protected:
    virtual ~IBMDSwitcherMediaPlayerIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMultiViewIterator - MultiView Iterator */

class BMD_PUBLIC IBMDSwitcherMultiViewIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMultiView** multiView) = 0;

protected:
    virtual ~IBMDSwitcherMultiViewIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioMonitorOutputIterator - Audio Monitor Output Iterator */

class BMD_PUBLIC IBMDSwitcherAudioMonitorOutputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherAudioMonitorOutput** audioMonitorOutput) = 0;

protected:
    virtual ~IBMDSwitcherAudioMonitorOutputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioHeadphoneOutputIterator - Audio Headphone Output Iterator */

class BMD_PUBLIC IBMDSwitcherAudioHeadphoneOutputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherAudioHeadphoneOutput** audioHeadphoneOutput) = 0;

protected:
    virtual ~IBMDSwitcherAudioHeadphoneOutputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInputIterator - Audio Input Iterator */

class BMD_PUBLIC IBMDSwitcherAudioInputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherAudioInput** audioInput) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherAudioInputId audioInputId, /* out */ IBMDSwitcherAudioInput** audioInput) = 0;

protected:
    virtual ~IBMDSwitcherAudioInputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSerialPortIterator - Serial Port Iterator */

class BMD_PUBLIC IBMDSwitcherSerialPortIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherSerialPort** serialPort) = 0;

protected:
    virtual ~IBMDSwitcherSerialPortIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeckIterator - HyperDeck Iterator */

class BMD_PUBLIC IBMDSwitcherHyperDeckIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherHyperDeck** hyperDeck) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherHyperDeckId hyperDeckId, /* out */ IBMDSwitcherHyperDeck** hyperDeck) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeckIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixMinusOutputIterator - Mix-Minus Output Iterator */

class BMD_PUBLIC IBMDSwitcherMixMinusOutputIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherMixMinusOutput** mixMinusOutput) = 0;

protected:
    virtual ~IBMDSwitcherMixMinusOutputIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTalkbackIterator - Talkback Iterator */

class BMD_PUBLIC IBMDSwitcherTalkbackIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherTalkback** talkback) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherTalkbackId talkbackId, /* out */ IBMDSwitcherTalkback** talkback) = 0;

protected:
    virtual ~IBMDSwitcherTalkbackIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherCallback - Switcher Callback Delegate */

class BMD_PUBLIC IBMDSwitcherCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherEventType eventType, /* in */ BMDSwitcherVideoMode coreVideoMode) = 0;

protected:
    virtual ~IBMDSwitcherCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcher - Switcher Object */

class BMD_PUBLIC IBMDSwitcher : public IUnknown
{
public:
    virtual HRESULT GetProductName (/* out */ CFStringRef* productName) = 0;
    virtual HRESULT GetVideoMode (/* out */ BMDSwitcherVideoMode* videoMode) = 0;
    virtual HRESULT SetVideoMode (/* in */ BMDSwitcherVideoMode videoMode) = 0;
    virtual HRESULT DoesSupportVideoMode (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* supported) = 0;
    virtual HRESULT DoesVideoModeChangeRequireReconfiguration (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* required) = 0;
    virtual HRESULT GetMethodForDownConvertedSD (/* out */ BMDSwitcherDownConversionMethod* method) = 0;
    virtual HRESULT SetMethodForDownConvertedSD (/* in */ BMDSwitcherDownConversionMethod method) = 0;
    virtual HRESULT GetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* downConvertedHDVideoMode) = 0;
    virtual HRESULT SetDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode) = 0;
    virtual HRESULT DoesSupportDownConvertedHDVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode downConvertedHDVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT GetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* out */ BMDSwitcherVideoMode* multiviewVideoMode) = 0;
    virtual HRESULT SetMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode) = 0;
    virtual HRESULT DoesSupportMultiViewVideoMode (/* in */ BMDSwitcherVideoMode coreVideoMode, /* in */ BMDSwitcherVideoMode multiviewVideoMode, /* out */ bool* supported) = 0;
    virtual HRESULT Get3GSDIOutputLevel (/* out */ BMDSwitcher3GSDIOutputLevel* outputLevel) = 0;
    virtual HRESULT Set3GSDIOutputLevel (/* in */ BMDSwitcher3GSDIOutputLevel outputLevel) = 0;
    virtual HRESULT GetPowerStatus (/* out */ BMDSwitcherPowerStatus* powerStatus) = 0;
    virtual HRESULT GetTimeCode (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT SetTimeCode (/* in */ uint8_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT RequestTimeCode (void) = 0;
    virtual HRESULT GetTimeCodeLocked (/* out */ bool* timeCodeLocked) = 0;
    virtual HRESULT GetTimeCodeMode (/* out */ BMDSwitcherTimeCodeMode* timeCodeMode) = 0;
    virtual HRESULT SetTimeCodeMode (/* in */ BMDSwitcherTimeCodeMode timeCodeMode) = 0;
    virtual HRESULT GetAreOutputsConfigurable (/* out */ bool* configurable) = 0;
    virtual HRESULT GetSuperSourceCascade (/* out */ bool* cascade) = 0;
    virtual HRESULT SetSuperSourceCascade (/* in */ bool cascade) = 0;
    virtual HRESULT SuspendStreaming (/* in */ uint32_t durationMs) = 0;
    virtual HRESULT AllowStreamingToResume (void) = 0;
    virtual HRESULT DoesSupportAutoVideoMode (/* out */ bool* supported) = 0;
    virtual HRESULT GetAutoVideoMode (/* out */ bool* enabled) = 0;
    virtual HRESULT GetAutoVideoModeDetected (/* out */ bool* detected) = 0;
    virtual HRESULT SetAutoVideoMode (/* in */ bool enabled) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcher () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherDiscovery - Used to discover and connect to switchers */

class BMD_PUBLIC IBMDSwitcherDiscovery : public IUnknown
{
public:
    virtual HRESULT ConnectTo (/* in */ CFStringRef deviceAddress, /* out */ IBMDSwitcher** switcherDevice, /* out */ BMDSwitcherConnectToFailure* failReason) = 0;

protected:
    virtual ~IBMDSwitcherDiscovery () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherFrame - Frame */

class BMD_PUBLIC IBMDSwitcherFrame : public IUnknown
{
public:
    virtual int32_t GetWidth (void) = 0;
    virtual int32_t GetHeight (void) = 0;
    virtual int32_t GetRowBytes (void) = 0;
    virtual BMDSwitcherPixelFormat GetPixelFormat (void) = 0;
    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;

protected:
    virtual ~IBMDSwitcherFrame () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudio - Audio */

class BMD_PUBLIC IBMDSwitcherAudio : public IUnknown
{
public:
    virtual int32_t GetSize (void) = 0;
    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;

protected:
    virtual ~IBMDSwitcherAudio () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherLockCallback - Lock Callback Delegate */

class BMD_PUBLIC IBMDSwitcherLockCallback : public IUnknown
{
public:
    virtual HRESULT Obtained (void) = 0;

protected:
    virtual ~IBMDSwitcherLockCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStillsCallback - Stills Callback Delegate */

class BMD_PUBLIC IBMDSwitcherStillsCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMediaPoolEventType eventType, /* in */ IBMDSwitcherFrame* frame, /* in */ int32_t index) = 0;

protected:
    virtual ~IBMDSwitcherStillsCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStills - Stills */

class BMD_PUBLIC IBMDSwitcherStills : public IUnknown
{
public:
    virtual HRESULT GetCount (/* out */ uint32_t* count) = 0;
    virtual HRESULT IsValid (/* in */ uint32_t index, /* out */ bool* valid) = 0;
    virtual HRESULT GetName (/* in */ uint32_t index, /* out */ CFStringRef* name) = 0;
    virtual HRESULT SetName (/* in */ uint32_t index, /* in */ CFStringRef name) = 0;
    virtual HRESULT GetHash (/* in */ uint32_t index, /* out */ BMDSwitcherHash* hash) = 0;
    virtual HRESULT SetInvalid (/* in */ uint32_t index) = 0;
    virtual HRESULT Lock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT Unlock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT Upload (/* in */ uint32_t index, /* in */ CFStringRef name, /* in */ IBMDSwitcherFrame* frame) = 0;
    virtual HRESULT Download (/* in */ uint32_t index) = 0;
    virtual HRESULT CancelTransfer (void) = 0;
    virtual HRESULT GetProgress (/* out */ double* progress) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherStillsCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherStillsCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherStills () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherClipCallback - Clip Callback Delegate */

class BMD_PUBLIC IBMDSwitcherClipCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMediaPoolEventType eventType, /* in */ IBMDSwitcherFrame* frame, /* in */ int32_t frameIndex, /* in */ IBMDSwitcherAudio* audio, /* in */ int32_t clipIndex) = 0;

protected:
    virtual ~IBMDSwitcherClipCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherClip - Clip */

class BMD_PUBLIC IBMDSwitcherClip : public IUnknown
{
public:
    virtual HRESULT GetIndex (/* out */ uint32_t* index) = 0;
    virtual HRESULT IsValid (/* out */ bool* valid) = 0;
    virtual HRESULT GetName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT SetName (/* in */ CFStringRef name) = 0;
    virtual HRESULT SetValid (/* in */ CFStringRef name, /* in */ uint32_t frameCount) = 0;
    virtual HRESULT SetInvalid (void) = 0;
    virtual HRESULT GetFrameCount (/* out */ uint32_t* frameCount) = 0;
    virtual HRESULT GetMaxFrameCount (/* out */ uint32_t* maxFrameCount) = 0;
    virtual HRESULT IsFrameValid (/* in */ uint32_t frameIndex, /* out */ bool* valid) = 0;
    virtual HRESULT GetFrameHash (/* in */ uint32_t frameIndex, /* out */ BMDSwitcherHash* hash) = 0;
    virtual HRESULT IsAudioValid (/* out */ bool* valid) = 0;
    virtual HRESULT GetAudioName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT SetAudioName (/* in */ CFStringRef name) = 0;
    virtual HRESULT GetAudioHash (/* out */ BMDSwitcherHash* hash) = 0;
    virtual HRESULT SetAudioInvalid (void) = 0;
    virtual HRESULT Lock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT Unlock (/* in */ IBMDSwitcherLockCallback* lockCallback) = 0;
    virtual HRESULT UploadFrame (/* in */ uint32_t frameIndex, /* in */ IBMDSwitcherFrame* frame) = 0;
    virtual HRESULT DownloadFrame (/* in */ uint32_t frameIndex) = 0;
    virtual HRESULT UploadAudio (/* in */ CFStringRef name, /* in */ IBMDSwitcherAudio* audio) = 0;
    virtual HRESULT DownloadAudio (void) = 0;
    virtual HRESULT CancelTransfer (void) = 0;
    virtual HRESULT GetProgress (/* out */ double* progress) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherClipCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherClipCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherClip () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPoolCallback - Media Pool Callback Delegate */

class BMD_PUBLIC IBMDSwitcherMediaPoolCallback : public IUnknown
{
public:
    virtual HRESULT ClipFrameMaxCountsChanged (void) = 0;
    virtual HRESULT FrameTotalForClipsChanged (void) = 0;

protected:
    virtual ~IBMDSwitcherMediaPoolCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMediaPool - Frame Pool for Media Players */

class BMD_PUBLIC IBMDSwitcherMediaPool : public IUnknown
{
public:
    virtual HRESULT GetStills (/* out */ IBMDSwitcherStills** stills) = 0;
    virtual HRESULT GetClip (/* in */ uint32_t clipIndex, /* out */ IBMDSwitcherClip** clip) = 0;
    virtual HRESULT GetClipCount (/* out */ uint32_t* clipCount) = 0;
    virtual HRESULT CreateFrame (/* in */ BMDSwitcherPixelFormat pixelFormat, /* in */ uint32_t width, /* in */ uint32_t height, /* out */ IBMDSwitcherFrame** frame) = 0;
    virtual HRESULT CreateAudio (/* in */ uint32_t sizeBytes, /* out */ IBMDSwitcherAudio** audio) = 0;
    virtual HRESULT GetFrameTotalForClips (/* out */ uint32_t* total) = 0;
    virtual HRESULT GetClipMaxFrameCounts (/* in */ uint32_t clipCount, /* out */ uint32_t* clipMaxFrameCounts) = 0;	// one array element per clip, each element holds the maximum frame count
    virtual HRESULT SetClipMaxFrameCounts (/* in */ uint32_t clipCount, /* in */ const uint32_t* clipMaxFrameCounts) = 0;	// one array element per clip, each element holds the maximum frame count
    virtual HRESULT Clear (void) = 0;	// clears all stills, clips and clip audio
    virtual HRESULT DoesVideoModeChangeClearMediaPool (/* in */ BMDSwitcherVideoMode videoMode, /* out */ bool* clear) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMediaPoolCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMediaPoolCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMediaPool () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStillCapture - Still Capture Object */

class BMD_PUBLIC IBMDSwitcherStillCapture : public IUnknown
{
public:
    virtual HRESULT IsAvailable (/* out */ bool* available) = 0;
    virtual HRESULT CaptureStill (void) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherStillCaptureCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherStillCaptureCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherStillCapture () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStillCaptureCallback - Still Capture Callback Delegate */

class BMD_PUBLIC IBMDSwitcherStillCaptureCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherStillCaptureEventType eventType) = 0;
};

/* Interface IBMDSwitcherSaveRecall - Switcher Save Recall Object */

class BMD_PUBLIC IBMDSwitcherSaveRecall : public IUnknown
{
public:
    virtual HRESULT Save (/* in */ BMDSwitcherSaveRecallType type) = 0;
    virtual HRESULT Clear (/* in */ BMDSwitcherSaveRecallType type) = 0;

protected:
    virtual ~IBMDSwitcherSaveRecall () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordDiskIterator - RecordDisk Iterator */

class BMD_PUBLIC IBMDSwitcherRecordDiskIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherRecordDisk** recordDisk) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherRecordDiskId diskId, /* out */ IBMDSwitcherRecordDisk** disk) = 0;

protected:
    virtual ~IBMDSwitcherRecordDiskIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordDisk - Switcher RecordDisk Object */

class BMD_PUBLIC IBMDSwitcherRecordDisk : public IUnknown
{
public:
    virtual HRESULT GetId (/* out */ BMDSwitcherRecordDiskId* diskId) = 0;
    virtual HRESULT GetVolumeName (/* out */ CFStringRef* volumeName) = 0;
    virtual HRESULT GetRecordingTimeAvailable (/* out */ uint32_t* recordingTimeAvailable) = 0;
    virtual HRESULT GetStatus (/* out */ BMDSwitcherRecordDiskStatus* diskStatus) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherRecordDiskCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherRecordDiskCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherRecordDisk () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordDiskCallback - RecordDisk Callback Delegate */

class BMD_PUBLIC IBMDSwitcherRecordDiskCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherRecordDiskEventType eventType, /* in */ BMDSwitcherRecordDiskId diskId) = 0;
};

/* Interface IBMDSwitcherRecordAV - Switcher RecordAV Object */

class BMD_PUBLIC IBMDSwitcherRecordAV : public IUnknown
{
public:
    virtual HRESULT StartRecording (void) = 0;
    virtual HRESULT StopRecording (void) = 0;
    virtual HRESULT SwitchDisk (void) = 0;
    virtual HRESULT IsRecording (/* out */ bool* recording) = 0;
    virtual HRESULT GetStatus (/* out */ BMDSwitcherRecordAVState* state, /* out */ BMDSwitcherRecordAVError* error) = 0;
    virtual HRESULT SetFilename (/* in */ CFStringRef filename) = 0;
    virtual HRESULT GetFilename (/* out */ CFStringRef* filename) = 0;
    virtual HRESULT SetRecordInAllCameras (/* in */ bool recordInAllCameras) = 0;
    virtual HRESULT GetRecordInAllCameras (/* out */ bool* recordInAllCameras) = 0;
    virtual HRESULT DoesSupportISORecording (/* out */ bool* supportsISORecording) = 0;
    virtual HRESULT SetRecordAllISOInputs (/* in */ bool recordAllISOInputs) = 0;
    virtual HRESULT GetRecordAllISOInputs (/* out */ bool* recordAllISOInputs) = 0;
    virtual HRESULT GetWorkingSetLimit (/* out */ uint32_t* workingSetLimit) = 0;
    virtual HRESULT SetWorkingSetDisk (/* in */ uint32_t workingSetIndex, /* in */ BMDSwitcherRecordDiskId diskId) = 0;
    virtual HRESULT GetWorkingSetDisk (/* in */ uint32_t workingSetIndex, /* out */ BMDSwitcherRecordDiskId* diskId) = 0;
    virtual HRESULT GetActiveDiskIndex (/* out */ uint32_t* workingSetIndex) = 0;
    virtual HRESULT RequestDuration (void) = 0;
    virtual HRESULT GetDuration (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT GetTotalRecordingTimeAvailable (/* out */ uint32_t* totalRecordingTimeAvailable) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherRecordAVCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherRecordAVCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherRecordAV () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherRecordAVCallback - RecordAV Callback Delegate */

class BMD_PUBLIC IBMDSwitcherRecordAVCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherRecordAVEventType eventType) = 0;
    virtual HRESULT NotifyWorkingSetChange (/* in */ uint32_t workingSetIndex, /* in */ BMDSwitcherRecordDiskId diskId) = 0;
    virtual HRESULT NotifyDiskAvailability (/* in */ BMDSwitcherRecordDiskAvailabilityEventType eventType, /* in */ BMDSwitcherRecordDiskId diskId) = 0;
    virtual HRESULT NotifyStatus (/* in */ BMDSwitcherRecordAVState stateType, /* in */ BMDSwitcherRecordAVError error) = 0;
};

/* Interface IBMDSwitcherStreamRTMP - Switcher Stream RTMP Object */

class BMD_PUBLIC IBMDSwitcherStreamRTMP : public IUnknown
{
public:
    virtual HRESULT StartStreaming (void) = 0;
    virtual HRESULT StopStreaming (void) = 0;
    virtual HRESULT IsStreaming (/* out */ bool* streaming) = 0;
    virtual HRESULT GetStatus (/* out */ BMDSwitcherStreamRTMPState* state, /* out */ BMDSwitcherStreamRTMPError* error) = 0;
    virtual HRESULT SetServiceName (/* in */ CFStringRef serviceName) = 0;
    virtual HRESULT GetServiceName (/* out */ CFStringRef* serviceName) = 0;
    virtual HRESULT SetUrl (/* in */ CFStringRef url) = 0;
    virtual HRESULT GetUrl (/* out */ CFStringRef* url) = 0;
    virtual HRESULT SetKey (/* in */ CFStringRef url) = 0;
    virtual HRESULT GetKey (/* out */ CFStringRef* key) = 0;
    virtual HRESULT SetVideoBitrates (/* in */ uint32_t lowBitrate, /* in */ uint32_t highBitrate) = 0;
    virtual HRESULT GetVideoBitrates (/* out */ uint32_t* lowBitRate, /* out */ uint32_t* highBitRate) = 0;
    virtual HRESULT SetAudioBitrates (/* in */ uint32_t lowBitrate, /* in */ uint32_t highBitrate) = 0;
    virtual HRESULT GetAudioBitrates (/* out */ uint32_t* lowBitRate, /* out */ uint32_t* highBitRate) = 0;
    virtual HRESULT RequestDuration (void) = 0;
    virtual HRESULT GetDuration (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames, /* out */ bool* dropFrame) = 0;
    virtual HRESULT GetEncodingBitrate (/* out */ uint32_t* encodingBitrate) = 0;
    virtual HRESULT GetCacheUsed (/* out */ double* cacheUsed) = 0;
    virtual HRESULT SetAuthentication (/* in */ CFStringRef username, /* in */ CFStringRef password) = 0;
    virtual HRESULT GetAuthentication (/* out */ CFStringRef* username, /* out */ CFStringRef* password) = 0;
    virtual HRESULT SetLowLatency (/* in */ bool lowLatency) = 0;
    virtual HRESULT GetLowLatency (/* out */ bool* lowLatency) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherStreamRTMPCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherStreamRTMPCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherStreamRTMP () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherStreamRTMPCallback - Stream RTMP Callback Delegate */

class BMD_PUBLIC IBMDSwitcherStreamRTMPCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherStreamRTMPEventType eventType) = 0;
    virtual HRESULT NotifyStatus (/* in */ BMDSwitcherStreamRTMPState stateType, /* in */ BMDSwitcherStreamRTMPError error) = 0;
};

/* Interface IBMDSwitcherCameraControlParameterIterator - Camera Control Parameter Iterator */

class BMD_PUBLIC IBMDSwitcherCameraControlParameterIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ uint32_t* destinationDevice, /* out */ uint32_t* category, /* out */ uint32_t* parameter) = 0;

protected:
    virtual ~IBMDSwitcherCameraControlParameterIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherCameraControlCallback - Switcher Camera Control Callback Delegate */

class BMD_PUBLIC IBMDSwitcherCameraControlCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherCameraControlEventType eventType, /* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter) = 0;

protected:
    virtual ~IBMDSwitcherCameraControlCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherCameraControl - Switcher Camera Control Object */

class BMD_PUBLIC IBMDSwitcherCameraControl : public IUnknown
{
public:
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT GetPeriodicFlushInterval (/* out */ uint32_t* intervalMs /* In milliseconds */) = 0;
    virtual HRESULT SetPeriodicFlushInterval (/* in */ uint32_t intervalMs /* In milliseconds */) = 0;
    virtual HRESULT GetParameterInfo (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* out */ BMDSwitcherCameraControlParameterType* type, /* out */ uint32_t* count) = 0;
    virtual HRESULT GetParameterPeriodicFlushEnabled (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* out */ bool* enabled) = 0;
    virtual HRESULT SetParameterPeriodicFlushEnabled (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ bool enabled) = 0;
    virtual HRESULT SetFlags (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const bool* values) = 0;
    virtual HRESULT ToggleFlags (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const bool* values) = 0;
    virtual HRESULT GetFlags (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ bool* values) = 0;
    virtual HRESULT SetInt8s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int8_t* values) = 0;
    virtual HRESULT OffsetInt8s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int8_t* values) = 0;
    virtual HRESULT GetInt8s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int8_t* values) = 0;
    virtual HRESULT SetInt16s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int16_t* values) = 0;
    virtual HRESULT OffsetInt16s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int16_t* values) = 0;
    virtual HRESULT GetInt16s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int16_t* values) = 0;
    virtual HRESULT SetInt32s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int32_t* values) = 0;
    virtual HRESULT OffsetInt32s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int32_t* values) = 0;
    virtual HRESULT GetInt32s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int32_t* values) = 0;
    virtual HRESULT SetInt64s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int64_t* values) = 0;
    virtual HRESULT OffsetInt64s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const int64_t* values) = 0;
    virtual HRESULT GetInt64s (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ int64_t* values) = 0;
    virtual HRESULT SetString (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ CFStringRef value) = 0;
    virtual HRESULT GetString (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* out */ CFStringRef* value) = 0;
    virtual HRESULT OffsetFloats (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const double* values) = 0;
    virtual HRESULT SetFloats (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in */ uint32_t count, /* in */ const double* values) = 0;
    virtual HRESULT GetFloats (/* in */ uint32_t destinationDevice, /* in */ uint32_t category, /* in */ uint32_t parameter, /* in, out */ uint32_t* count, /* out */ double* values) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherCameraControlCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherCameraControlCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherCameraControl () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMacro - Macro */

class BMD_PUBLIC IBMDSwitcherMacro : public IUnknown
{
public:
    virtual int32_t GetSize (void) = 0;
    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;

protected:
    virtual ~IBMDSwitcherMacro () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherTransferMacro - MacroTransfer */

class BMD_PUBLIC IBMDSwitcherTransferMacro : public IUnknown
{
public:
    virtual HRESULT Cancel (void) = 0;
    virtual HRESULT GetProgress (/* out */ double* progress) = 0;
    virtual HRESULT GetMacro (/* out */ IBMDSwitcherMacro** macro) = 0;

protected:
    virtual ~IBMDSwitcherTransferMacro () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMacroPoolCallback - Macro Pool Callback Delegate */

class BMD_PUBLIC IBMDSwitcherMacroPoolCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMacroPoolEventType eventType, /* in */ uint32_t index, /* in */ IBMDSwitcherTransferMacro* macroTransfer) = 0;

protected:
    virtual ~IBMDSwitcherMacroPoolCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMacroPool - Management of Macros */

class BMD_PUBLIC IBMDSwitcherMacroPool : public IUnknown
{
public:
    virtual HRESULT GetMaxCount (/* out */ uint32_t* maxCount) = 0;	// Returns the maximum number of macros that can be stored
    virtual HRESULT Delete (/* in */ uint32_t index) = 0;	// Delete a macro
    virtual HRESULT IsValid (/* in */ uint32_t index, /* out */ bool* valid) = 0;	// Returns whether the specified macro is valid
    virtual HRESULT HasUnsupportedOps (/* in */ uint32_t index, /* out */ bool* hasUnsupportedOps) = 0;	// Returns whether the specified macro has any unsupported or invalid operations
    virtual HRESULT GetName (/* in */ uint32_t index, /* out */ CFStringRef* name) = 0;	// Macro's name
    virtual HRESULT SetName (/* in */ uint32_t index, /* in */ CFStringRef name) = 0;
    virtual HRESULT GetDescription (/* in */ uint32_t index, /* out */ CFStringRef* description) = 0;	// Macro's description property
    virtual HRESULT SetDescription (/* in */ uint32_t index, /* in */ CFStringRef description) = 0;
    virtual HRESULT CreateMacro (/* in */ uint32_t sizeBytes, /* out */ IBMDSwitcherMacro** macro) = 0;
    virtual HRESULT Upload (/* in */ uint32_t index, /* in */ CFStringRef name, /* in */ CFStringRef description, /* in */ IBMDSwitcherMacro* macro, /* out */ IBMDSwitcherTransferMacro** macroTransfer) = 0;
    virtual HRESULT Download (/* in */ uint32_t index, /* out */ IBMDSwitcherTransferMacro** macroTransfer) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMacroPoolCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMacroPoolCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMacroPool () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMacroControlCallback - Macro Control Callback Delegate */

class BMD_PUBLIC IBMDSwitcherMacroControlCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMacroControlEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherMacroControlCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMacroControl - Recording and Playback of Macros */

class BMD_PUBLIC IBMDSwitcherMacroControl : public IUnknown
{
public:
    virtual HRESULT Run (/* in */ uint32_t index) = 0;	// Begin running a macro
    virtual HRESULT GetLoop (/* out */ bool* loop) = 0;
    virtual HRESULT SetLoop (/* in */ bool loop) = 0;
    virtual HRESULT ResumeRunning (void) = 0;	// Resume execution of the currently running macro that is waiting for the user to continue
    virtual HRESULT StopRunning (void) = 0;	// Terminate execution of the currently running macro
    virtual HRESULT Record (/* in */ uint32_t index, /* in */ CFStringRef name, /* in */ CFStringRef description) = 0;	// Start recording a new macro
    virtual HRESULT RecordUserWait (void) = 0;	// Insert a user wait event into the currently recording macro
    virtual HRESULT RecordPause (/* in */ uint32_t frames) = 0;	// Insert a frame delay into currently recording macro
    virtual HRESULT StopRecording (void) = 0;	// Stop recording and save the current macro
    virtual HRESULT GetRunStatus (/* out */ BMDSwitcherMacroRunStatus* status, /* out */ bool* loop, /* out */ uint32_t* index) = 0;	// Get the current macro running status
    virtual HRESULT GetRecordStatus (/* out */ BMDSwitcherMacroRecordStatus* status, /* out */ uint32_t* index) = 0;	// Get the current macro recording status
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMacroControlCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMacroControlCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMacroControl () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSerialPortCallback - Serial Port Object Callback */

class BMD_PUBLIC IBMDSwitcherSerialPortCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherSerialPortEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherSerialPortCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherSerialPort - Serial Port */

class BMD_PUBLIC IBMDSwitcherSerialPort : public IUnknown
{
public:
    virtual HRESULT SetFunction (/* in */ BMDSwitcherSerialPortFunction function) = 0;
    virtual HRESULT GetFunction (/* out */ BMDSwitcherSerialPortFunction* function) = 0;
    virtual HRESULT DoesSupportFunction (/* in */ BMDSwitcherSerialPortFunction function, /* out */ bool* supported) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherSerialPortCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherSerialPortCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherSerialPort () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeckClipCallback - HyperDeck Clip Callback Delegate */

class BMD_PUBLIC IBMDSwitcherHyperDeckClipCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherHyperDeckClipEventType eventType, /* in */ BMDSwitcherHyperDeckClipId clipId) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeckClipCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeckClip - Clip */

class BMD_PUBLIC IBMDSwitcherHyperDeckClip : public IUnknown
{
public:
    virtual HRESULT IsValid (/* out */ bool* valid) = 0;
    virtual HRESULT IsInfoAvailable (/* out */ bool* infoAvailable) = 0;
    virtual HRESULT GetId (/* out */ BMDSwitcherHyperDeckClipId* clipId) = 0;
    virtual HRESULT GetName (/* out */ CFStringRef* name) = 0;
    virtual HRESULT GetDuration (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT GetTimelineStart (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT GetTimelineEnd (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherHyperDeckClipCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherHyperDeckClipCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeckClip () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeckClipIterator - HyperDeck Clip Iterator */

class BMD_PUBLIC IBMDSwitcherHyperDeckClipIterator : public IUnknown
{
public:
    virtual HRESULT Next (/* out */ IBMDSwitcherHyperDeckClip** clip) = 0;
    virtual HRESULT GetById (/* in */ BMDSwitcherHyperDeckClipId clipId, /* out */ IBMDSwitcherHyperDeckClip** clip) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeckClipIterator () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeckCallback - HyperDeck Callback Delegate */

class BMD_PUBLIC IBMDSwitcherHyperDeckCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherHyperDeckEventType eventType) = 0;
    virtual HRESULT NotifyError (/* in */ BMDSwitcherHyperDeckErrorType errorType) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeckCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherHyperDeck - Remote Control of HyperDecks */

class BMD_PUBLIC IBMDSwitcherHyperDeck : public IUnknown
{
public:
    virtual HRESULT GetId (/* out */ BMDSwitcherHyperDeckId* hyperDeckId) = 0;
    virtual HRESULT GetConnectionStatus (/* out */ BMDSwitcherHyperDeckConnectionStatus* status) = 0;
    virtual HRESULT IsRemoteAccessEnabled (/* out */ bool* enabled) = 0;
    virtual HRESULT GetStorageMediaCount (/* out */ uint32_t* count) = 0;
    virtual HRESULT GetStorageMediaState (/* in */ uint32_t storageMediaId, /* out */ BMDSwitcherHyperDeckStorageMediaState* state) = 0;
    virtual HRESULT GetActiveStorageMedia (/* out */ int32_t* index) = 0;
    virtual HRESULT SetActiveStorageMedia (/* in */ int32_t index) = 0;
    virtual HRESULT GetClipCount (/* out */ uint32_t* count) = 0;
    virtual HRESULT CreateIterator (/* in */ REFIID iid, /* out */ LPVOID* ppv) = 0;
    virtual HRESULT GetSwitcherInput (/* out */ BMDSwitcherInputId* inputId) = 0;
    virtual HRESULT SetSwitcherInput (/* in */ BMDSwitcherInputId inputId) = 0;
    virtual HRESULT GetFrameRate (/* out */ uint32_t* frameRate, /* out */ uint32_t* timeScale) = 0;
    virtual HRESULT IsInterlacedVideo (/* out */ bool* isInterlaced) = 0;
    virtual HRESULT IsDropFrameTimeCode (/* out */ bool* isDropFrame) = 0;
    virtual HRESULT GetPlayerState (/* out */ BMDSwitcherHyperDeckPlayerState* state) = 0;
    virtual HRESULT GetCurrentClip (/* out */ BMDSwitcherHyperDeckClipId* clipId) = 0;
    virtual HRESULT SetCurrentClip (/* in */ BMDSwitcherHyperDeckClipId clipId) = 0;
    virtual HRESULT GetCurrentClipTime (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT SetCurrentClipTime (/* in */ uint16_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT GetCurrentTimelineTime (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT SetCurrentTimelineTime (/* in */ uint16_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames) = 0;
    virtual HRESULT GetEstimatedRecordTimeRemaining (/* out */ uint16_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
    virtual HRESULT Play (void) = 0;
    virtual HRESULT Record (void) = 0;
    virtual HRESULT Stop (void) = 0;
    virtual HRESULT Shuttle (/* in */ int32_t speedPercent) = 0;
    virtual HRESULT GetShuttleSpeed (/* out */ int32_t* speedPercent) = 0;
    virtual HRESULT Jog (/* in */ int32_t frameDelta) = 0;
    virtual HRESULT GetLoopedPlayback (/* out */ bool* loop) = 0;
    virtual HRESULT SetLoopedPlayback (/* in */ bool loop) = 0;
    virtual HRESULT GetSingleClipPlayback (/* out */ bool* single) = 0;
    virtual HRESULT SetSingleClipPlayback (/* in */ bool single) = 0;
    virtual HRESULT GetAutoRollOnTake (/* out */ bool* autoRollOnTake) = 0;
    virtual HRESULT SetAutoRollOnTake (/* in */ bool autoRollOnTake) = 0;
    virtual HRESULT GetAutoRollOnTakeFrameDelay (/* out */ uint16_t* frameDelay) = 0;
    virtual HRESULT SetAutoRollOnTakeFrameDelay (/* in */ uint16_t frameDelay) = 0;
    virtual HRESULT GetNetworkAddress (/* out */ uint32_t* address) = 0;
    virtual HRESULT SetNetworkAddress (/* in */ uint32_t address) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherHyperDeckCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherHyperDeckCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherHyperDeck () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixMinusOutput - Mix-Minus Output Object */

class BMD_PUBLIC IBMDSwitcherMixMinusOutput : public IUnknown
{
public:
    virtual HRESULT GetAvailableAudioModes (/* out */ BMDSwitcherMixMinusOutputAudioMode* audioModes) = 0;
    virtual HRESULT GetAudioMode (/* out */ BMDSwitcherMixMinusOutputAudioMode* audioMode) = 0;
    virtual HRESULT SetAudioMode (/* in */ BMDSwitcherMixMinusOutputAudioMode audioMode) = 0;
    virtual HRESULT HasMinusAudioInputId (/* out */ bool* hasMinusAudioInputId) = 0;
    virtual HRESULT GetMinusAudioInputId (/* out */ BMDSwitcherAudioInputId* audioInputId) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherMixMinusOutputCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherMixMinusOutputCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherMixMinusOutput () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherMixMinusOutputCallback - Mix-Minus Output Object Callback */

class BMD_PUBLIC IBMDSwitcherMixMinusOutputCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherMixMinusOutputEventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherMixMinusOutputCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInputXLRCallback - Audio Input XLR Object Callback */

class BMD_PUBLIC IBMDSwitcherAudioInputXLRCallback : public IUnknown
{
public:
    virtual HRESULT Notify (/* in */ BMDSwitcherAudioInputXLREventType eventType) = 0;

protected:
    virtual ~IBMDSwitcherAudioInputXLRCallback () {} // call Release method to drop reference count
};

/* Interface IBMDSwitcherAudioInputXLR - Audio Input XLR Object */

class BMD_PUBLIC IBMDSwitcherAudioInputXLR : public IUnknown
{
public:
    virtual HRESULT HasRCAToXLR (/* out */ bool* hasRcaToXlr) = 0;
    virtual HRESULT GetRCAToXLREnabled (/* out */ bool* rcaToXlrEnabled) = 0;
    virtual HRESULT SetRCAToXLREnabled (/* in */ bool rcaToXlrEnabled) = 0;
    virtual HRESULT AddCallback (/* in */ IBMDSwitcherAudioInputXLRCallback* callback) = 0;
    virtual HRESULT RemoveCallback (/* in */ IBMDSwitcherAudioInputXLRCallback* callback) = 0;

protected:
    virtual ~IBMDSwitcherAudioInputXLR () {} // call Release method to drop reference count
};

/* Functions */

extern "C" {

    IBMDSwitcherDiscovery* BMD_PUBLIC CreateBMDSwitcherDiscoveryInstance(void);

}

#endif /* defined(__cplusplus) */
#endif /* defined(BMD_BMDSWITCHERAPI_H) */
